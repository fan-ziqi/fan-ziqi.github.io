<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>范子琦的博客</title>
  
  
  <link href="http://www.fanziqi.site/atom.xml" rel="self"/>
  
  <link href="http://www.fanziqi.site/"/>
  <updated>2022-02-06T04:37:15.628Z</updated>
  <id>http://www.fanziqi.site/</id>
  
  <author>
    <name>Fan Ziqi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入学习C++——44智能指针</title>
    <link href="http://www.fanziqi.site/posts/b0f9a474.html"/>
    <id>http://www.fanziqi.site/posts/b0f9a474.html</id>
    <published>2022-02-06T04:17:00.000Z</published>
    <updated>2022-02-06T04:37:15.628Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="深入学习C-——44智能指针"><a href="#深入学习C-——44智能指针" class="headerlink" title="深入学习C++——44智能指针"></a>深入学习C++——44智能指针</h1><p>我们都知道使用new在堆上分配内存，使用delete释放内存，因为它不会自动释放内存。智能指针本质上是一个原始指针的包装类，当创建一个智能指针，它会调用new并为其分配内存，基于这个智能指针，这些内存会在某一时刻自动释放。下面介绍三种智能指针</p><p>使用智能指针的时候要包含memory头文件</p><h2 id="作用域指针unique-ptr"><a href="#作用域指针unique-ptr" class="headerlink" title="作用域指针unique_ptr"></a>作用域指针unique_ptr</h2><p><code>unique_ptr</code>是作用域指针，超出作用域时会被销毁，然后调用delete。<br>我们不能复制一个unique_ptr，因为如果复制一个unique_ptr，那么他们会指向同一个内存块。如果其中一个死了，它会释放那段内存，而指向同一块内存的另一个指针就会指向已经被释放的内存。</p><p>我们首先创建一个类来理解智能指针，类中只包含构造和析构函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Created Entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Destroyed Entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在特定的作用域下创建一个unique_ptr：在main中创建一对大括号，括号内即为空作用域。在里面使用unique_ptr来分配Entity：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; entity = <span class="keyword">new</span> <span class="built_in">Entity</span>(); <span class="comment">//错误</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样构造会报错，因为unique_ptr的构造函数是explicit的，需要显式调用构造函数，没有构造函数的隐式转换，所以应该：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line"><span class="function">std::unique_ptr&lt;Entity&gt; <span class="title">entity</span><span class="params">(<span class="keyword">new</span> Entity())</span></span>; <span class="comment">//正确</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过更推荐使用下面这种方法！原因是出于异常安全。如果构造函数碰巧抛出异常，使用make_unique会保证你最终得到的不是没有引用的悬空指针，从而造成内存泄漏。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; entity = std::make_unique&lt;Entity&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以跟原始指针一样地使用智能指针，比如使用箭头操作符调用函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; entity = std::make_unique&lt;Entity&gt;();</span><br><span class="line">entity-&gt;<span class="built_in">Print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单步调试，可以看到程序在进入作用域{时输出<code>Created Entity</code>，出作用域}时输出<code>Destroyed Entity</code>，即为智能指针的自动创建与销毁。</p><p>如果需要拷贝或共享这个指针，使得这个指针可以被传递到一个函数中或一个类中，unique_ptr将不可用。如果试图复制一个unique_ptr：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; entity = std::make_unique&lt;Entity&gt;();</span><br><span class="line">std::unique_ptr&lt;Entity&gt; e0 = entity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样会报错，因为在unique_ptr的定义中，删除了拷贝构造函数和拷贝构造操作符，因为这是不被允许的。这是为了防止你跳到大坑里，因为其中一个unique_ptr死了，这个堆分配对象的底层内存会被释放，另一个unique_ptr会指向这个不存在的内存。所以出现了共享指针shared_ptr：</p><h2 id="共享指针shared-ptr"><a href="#共享指针shared-ptr" class="headerlink" title="共享指针shared_ptr"></a>共享指针shared_ptr</h2><p>共享指针shared_ptr更牛逼一点，shared_ptr实现的方式实际上取决于编译器和你在编译器中使用的标准库，在大多数情况下，它使用的是引用计数。引用计数基本上是一种方法，可以跟踪你的指针有多少个引用，一旦引用计数达到0，它就会被删除。如果我创建了一个shared_ptr，又创建了另外一个shared_ptr来复制他，此时的引用计数就是2，当第一个shared_ptr死了，引用计数减1变成1，当最后一个shared_ptr也死了，引用计数变为0，这个指针也就会被销毁内存被释放。</p><p>但是不要这样写！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::shared_ptr&lt;Entity&gt; <span class="title">entity</span><span class="params">(<span class="keyword">new</span> Entity())</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在unique_ptr中不直接调用new的原因是因为异常安全，而在shared_ptr中有所不同。因为shared_ptr需要分配另一块内存，叫做控制块，用来存储引用计数。如果使用new创建一个Entity然后传递给shared_ptr构造函数，那么它必须做两次内存分配：先做一次new Entity的分配，然后是shared_ptr的控制内存块的分配。使用make_shared就可以将两个步骤合起来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::shared_ptr&lt;Entity&gt; sharedEntity = std::make_shared&lt;Entity&gt;();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shared_ptr可以被复制。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::shared_ptr&lt;Entity&gt; entity = std::make_shared&lt;Entity&gt;();</span><br><span class="line">std::shared_ptr&lt;Entity&gt; e0 = sharedEntity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们更改一下main函数，创建两个作用域来演示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">//作用域1</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; e0;</span><br><span class="line">&#123;<span class="comment">//作用域2</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; sharedEntity = std::make_shared&lt;Entity&gt;();</span><br><span class="line">e0 = sharedEntity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此时SharedEntity已经死亡，但是e0还存活（引用计数为1），所以这里没有调用析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里e0也死亡了（引用计数为0），此时调用析构函数。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单步调试，进入作用域1时输出<code>Created Entity</code>，此时出作用域2，并没有析构Entity，因为e0还存活，并且持有对该Entity的引用。出作用域1，输出<code>Destroyed Entity</code>，所有的引用此时都消失。</p><h2 id="弱指针weak-ptr"><a href="#弱指针weak-ptr" class="headerlink" title="弱指针weak_ptr"></a>弱指针weak_ptr</h2><p>将一个shared_ptr赋值给另一个shared_ptr时会增加引用计数，但是将一个shared_ptr赋值给一个weak_ptr时不会增加引用计数。这常用于：如果你不想要Entity的所有权，例如你在排序一个Entity列表，你不关心他们是否有效，只需要存储一个他们的引用，这时就可以使用weak_ptr。可以询问weak_ptr底层对象是否还存活，但它不会保持底层对象存活，因为它不会增加引用计数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;<span class="comment">//作用域1</span></span><br><span class="line">std::weak_ptr&lt;Entity&gt; e0;</span><br><span class="line">&#123;<span class="comment">//作用域2</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; sharedEntity = std::make_shared&lt;Entity&gt;();</span><br><span class="line">e0 = sharedEntity; <span class="comment">// 弱指针不会引用计数</span></span><br><span class="line">&#125;<span class="comment">//出作用域2的时候就调用了析构函数</span></span><br><span class="line"><span class="comment">//此时weak_ptr为一个无效指针</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>综上，使用智能指针可以使内存管理自动化，防止忘记调用delete而造成内存泄露。优先选用unique_ptr，如需在作用域之间复制共享就使用shared_ptr。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++" scheme="http://www.fanziqi.site/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.fanziqi.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>深入学习C++——16指针</title>
    <link href="http://www.fanziqi.site/posts/49c7378a.html"/>
    <id>http://www.fanziqi.site/posts/49c7378a.html</id>
    <published>2022-02-05T15:42:00.000Z</published>
    <updated>2022-02-06T04:18:46.936Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="深入学习C-——16指针"><a href="#深入学习C-——16指针" class="headerlink" title="深入学习C++——16指针"></a>深入学习C++——16指针</h1><p>什么是指针？<strong>指针是一个整数，一种存储内存地址的数字。</strong>指针只是一个数字而已，不要想太多。指针的类型对指针来说是毫无意义的，只能说是这个地址的数据被假设为我们给的类型。指针类型并不会改变指针的实质，指针只是一个内存地址，一个数字而已。 </p><p>首先我们创建一个最纯粹的空指针，我并不关心这个指针的类型，因为我只想保存一个内存地址。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* ptr = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>其中<code>nullptr</code>代表空指针的意思，也可写成NULL。但不可写成0，因为当内存地址为0的时候程序会崩溃。</p><p>每个变量都有一个内存地址，使用引用<code>&amp;</code>运算符（reference）得到这个变量的内存地址。创建一个变量名为var，使用ptr存放var的内存地址：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> var = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">void</span>* ptr = &amp;var;</span><br></pre></td></tr></table></figure><p>如果此时加断点调试，可以看到<code>var</code>的值为<code>8</code>，<code>ptr</code>的值为<code>0xef045ff954</code>，这是一个十六进制的数字，即为var变量的内存地址。我们在内存中转到这个地址，可以看到<code>08 00 00 00</code>，就是<code>var</code>的值<code>8</code>（int占用4个字节）。</p><p>指针的类型对指针无关紧要，将<code>void</code>改为<code>int</code>，再次在内存中转到此地址，效果是完全一样的。指针的类型只在读写时有作用，跟指针本身是完全无关的。<strong>指针只是一个整数</strong>而已。</p><p>如果我们想读写指针指向的数据，需要使用逆向引用<code>*</code>运算符（dereference）。在指针前加上<code>*</code>即可读取这个指针指向的数据。如前例，ptr为var的指针，使用<code>*ptr = 10</code>即可将var的值改为10。但是此时会报错，因为此时指针为void空指针，计算机并不知道这个“10”需要多少字节的数据，自然而然无法将其写入。所以此时需要指定字节数，即将前文改为<code>int* ptr = &amp;var;</code>。记住，类型跟指针毫无关系，类型的目的只是告诉编译器在读写时应该寻找几个字节。此时重新运行程序可以看到var的值被成功修改为10。</p><p>如果需要分配一些空间，可以这么操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//new char[8]分配了8个字节的内存，并返回一个指向那块内存开始的指针。</span></span><br><span class="line"><span class="keyword">char</span>* buffer = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">8</span>];</span><br><span class="line"><span class="comment">//使用memset函数用指定的数据填充一个内存块：第一个参数为内存块开始的指针，第二个值为要填充的值，第三个参数为大小。</span></span><br><span class="line"><span class="built_in">memset</span>(buffer, <span class="number">0</span>, <span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>调试程序，转到buffer地址，可以看到<code>00 00 00 00   00 00 00 00</code>。之后需要释放这个内存，使用<code>delete[] buffer;</code></p><p>指针也是一个变量，因此指针也可以指向指针。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>** ptr = &amp;buffer;</span><br></pre></td></tr></table></figure><p>查看内存：buffer的值为<code>0x193a7d41b60</code>。ptr的值为<code>0x843b7ffb30</code>，即为buffer指针存放的地址。跳转进去可以看到<code>60 1b d4 a7   93 01 00 00</code>，这也就是buffer的值。（计算机中存储顺序为倒序）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++" scheme="http://www.fanziqi.site/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.fanziqi.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>boost库使用串口</title>
    <link href="http://www.fanziqi.site/posts/e4966ae8.html"/>
    <id>http://www.fanziqi.site/posts/e4966ae8.html</id>
    <published>2022-02-04T10:40:00.000Z</published>
    <updated>2022-02-04T10:38:10.068Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="boost库使用串口"><a href="#boost库使用串口" class="headerlink" title="boost库使用串口"></a>boost库使用串口</h1><h2 id="一、使用普通指针"><a href="#一、使用普通指针" class="headerlink" title="一、使用普通指针"></a>一、使用普通指针</h2><h3 id="1-头文件声明"><a href="#1-头文件声明" class="headerlink" title="1. 头文件声明"></a>1. 头文件声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boost::system::error_code error_code_;</span><br><span class="line">boost::asio::io_service io_service_;</span><br><span class="line">boost::asio::serial_port *serial_port_;</span><br></pre></td></tr></table></figure><h3 id="2-使用new分配内存"><a href="#2-使用new分配内存" class="headerlink" title="2. 使用new分配内存"></a>2. 使用new分配内存</h3><p>创建串口然后使用open开启</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serial_port_ = <span class="keyword">new</span> boost::asio::<span class="built_in">serial_port</span>(io_service_);</span><br><span class="line">serial_port_-&gt;<span class="built_in">open</span>(port_name_, error_code_);</span><br></pre></td></tr></table></figure><p>或者直接开启</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serial_port_ = <span class="keyword">new</span> boost::asio::<span class="built_in">serial_port</span>(io_service_, port_name_);</span><br></pre></td></tr></table></figure><h3 id="3-释放内存"><a href="#3-释放内存" class="headerlink" title="3. 释放内存"></a>3. 释放内存</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> serial_port_;</span><br></pre></td></tr></table></figure><h2 id="二、使用共享指针"><a href="#二、使用共享指针" class="headerlink" title="二、使用共享指针"></a>二、使用共享指针</h2><h3 id="1-头文件声明-1"><a href="#1-头文件声明-1" class="headerlink" title="1. 头文件声明"></a>1. 头文件声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boost::system::error_code error_code_;</span><br><span class="line">boost::asio::io_service io_service_;</span><br><span class="line">std::shared_ptr&lt;boost::asio::serial_port&gt; serial_port_;</span><br></pre></td></tr></table></figure><h3 id="2-使用make-shared分配内存"><a href="#2-使用make-shared分配内存" class="headerlink" title="2. 使用make_shared分配内存"></a>2. 使用make_shared分配内存</h3><p>创建串口然后使用open开启</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">serial_port_ = std::make_shared&lt;boost::asio::serial_port&gt;(io_service_);</span><br><span class="line">serial_port_-&gt;<span class="built_in">open</span>(port_name_, error_code_);</span><br></pre></td></tr></table></figure><p>或者直接开启</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serial_port_ = std::make_shared&lt;boost::asio::serial_port&gt;(io_service_, port_name_);</span><br></pre></td></tr></table></figure><h3 id="3-释放内存-1"><a href="#3-释放内存-1" class="headerlink" title="3. 释放内存"></a>3. 释放内存</h3><p>使用智能指针不需要delete释放内存</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="C++" scheme="http://www.fanziqi.site/categories/C/"/>
    
    
    <category term="C++" scheme="http://www.fanziqi.site/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="http://www.fanziqi.site/posts/c4c88997.html"/>
    <id>http://www.fanziqi.site/posts/c4c88997.html</id>
    <published>2022-02-03T16:24:00.000Z</published>
    <updated>2022-02-03T16:24:44.932Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><ul><li><p>安装</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p>生成密钥</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YOUREMAIL&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看公钥</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure></li><li><p>GIthub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key</p></li><li><p>检查本地是否能远程访问github服务器，出现You’ve successfully authenticated，说明认证通过。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>配置自己的名称和电子邮件地址</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOURNAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUREMAIL&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看设置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>新项目</p><ul><li><p>建立新的repository</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/new</span><br></pre></td></tr></table></figure></li><li><p>新建目录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/test_project</span><br><span class="line">cd ~/test_project</span><br><span class="line">git init //初始化一个空的git repository  </span><br><span class="line">git remote add origin https://github.com//username//test_project.git //第一次初始化</span><br><span class="line">git checkout -b main //切换本地分支为main</span><br></pre></td></tr></table></figure></li><li><p>提交</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . //添加文件</span><br><span class="line">git commit -am &quot;first commit&quot; //-m指定本次提交的描述信息 </span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure></li><li><p>设置set-upstream</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/main main</span><br><span class="line">git push //之后push用这个</span><br></pre></td></tr></table></figure></li></ul></li><li><p>已有项目</p><ul><li><p>clone下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:fan-ziqi/My_ROS_Robot.git</span><br></pre></td></tr></table></figure></li><li><p>新建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/test_project</span><br><span class="line">cd ~/test_project</span><br><span class="line">git init //初始化一个空的git repository  </span><br><span class="line">git remote add origin https://github.com//username//test_project.git //第一次初始化</span><br><span class="line">git checkout -b main //切换本地分支为main</span><br></pre></td></tr></table></figure></li><li><p>pull下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure></li><li><p>设置set-upstream</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/main main</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .   // .代表添加所有文件  </span><br><span class="line">git commit -am &quot;对文件操作的简易描述&quot;  </span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>出现错误<code>error: failed to push some refs to &#39;https://github.com/xxx/xxx.git&#39;</code></p><p>出现错误的原因是github中的某些文件不在本地代码目录中。</p><p>也就是说我们需要先将远程代码库中的任何文件先pull到本地代码库中，才能push新的代码到github代码库中。</p><p>使用如下命令：git pull —rebase origin main</p><p>然后再进行上传: git push -u origin main</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Git" scheme="http://www.fanziqi.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>树莓派压缩备份</title>
    <link href="http://www.fanziqi.site/posts/f438cf8d.html"/>
    <id>http://www.fanziqi.site/posts/f438cf8d.html</id>
    <published>2022-02-01T01:15:00.000Z</published>
    <updated>2022-02-01T04:08:31.908Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="树莓派压缩备份"><a href="#树莓派压缩备份" class="headerlink" title="树莓派压缩备份"></a>树莓派压缩备份</h1><p>配置环境真的太折磨人了，如果使用简单的全盘备份，备份出来的文件和SD卡大小相同，且无法存入相同大小的的卡内。所以本文将介绍一种一键压缩备份的方法</p><h2 id="1-首先-clone-该脚本："><a href="#1-首先-clone-该脚本：" class="headerlink" title="1.首先 clone 该脚本："></a>1.首先 clone 该脚本：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/nanhantianyi/rpi-backup.git &amp;&amp; <span class="built_in">cd</span> rpi-backup</span><br></pre></td></tr></table></figure><h2 id="2-备份"><a href="#2-备份" class="headerlink" title="2.备份"></a>2.备份</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash back.sh 这里换成名字.img</span><br></pre></td></tr></table></figure><h2 id="3-恢复"><a href="#3-恢复" class="headerlink" title="3.恢复"></a>3.恢复</h2><p>使用任意一种镜像烧写工具烧录到另外一张空SD卡中，然后执行扩容脚本扩容root分区</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo bash resize.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/categories/ROS/"/>
    
    
    <category term="树莓派" scheme="http://www.fanziqi.site/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派4b安装Ubuntu20.04桌面版并安装ROS1-Noetic和ROS2-Foxy</title>
    <link href="http://www.fanziqi.site/posts/e9a394b1.html"/>
    <id>http://www.fanziqi.site/posts/e9a394b1.html</id>
    <published>2022-01-16T11:40:00.000Z</published>
    <updated>2022-01-16T11:43:44.283Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="树莓派4b安装Ubuntu20-04桌面版并安装ROS1-Noetic和ROS2-Foxy"><a href="#树莓派4b安装Ubuntu20-04桌面版并安装ROS1-Noetic和ROS2-Foxy" class="headerlink" title="树莓派4b安装Ubuntu20.04桌面版并安装ROS1-Noetic和ROS2-Foxy"></a>树莓派4b安装Ubuntu20.04桌面版并安装ROS1-Noetic和ROS2-Foxy</h1><h2 id="1-树莓派4b安装Ubuntu20-04"><a href="#1-树莓派4b安装Ubuntu20-04" class="headerlink" title="1 树莓派4b安装Ubuntu20.04"></a>1 树莓派4b安装Ubuntu20.04</h2><h3 id="1-0-引言"><a href="#1-0-引言" class="headerlink" title="1.0 引言"></a>1.0 引言</h3><p>树莓派4b并未适配1804及2004的桌面版Ubuntu（<a href="https://ubuntu.com/download/raspberry-pi">官方镜像连接</a>），而ROS未免会需要图形界面，故有以下几种方法安装Ubuntu20.04桌面版：</p><ol><li>安装Server版本，这种方法实测无法安装GPU驱动导致界面卡顿，图形显示不正常。</li><li>参照国外大神给出的教程，详见：<a href="https://jamesachambers.com/raspberry-pi-4-ubuntu-20-04-usb-mass-storage-boot-guide/">Raspberry Pi 4 / 400 Ubuntu USB Mass Storage Boot Guide</a>，在他的博客里也可以找到Ubuntu1804的桌面版镜像</li><li>安装官方支持的<strong>Ubuntu Mate</strong>（<a href="https://ubuntu-mate.org/download/arm64/focal/">链接</a>），下文只讲这种方法。</li></ol><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><p>这里需要下载几个工具：<a href="https://www.balena.io/etcher/">balenaEtcher</a>、</p><p>还需要准备一个SD卡，推荐使用32GB</p><h3 id="1-2-镜像烧录"><a href="#1-2-镜像烧录" class="headerlink" title="1.2 镜像烧录"></a>1.2 镜像烧录</h3><p>打开balenaEtcher，选择镜像，选择SD卡，点击flash即可</p><h3 id="1-3-开启树莓派"><a href="#1-3-开启树莓派" class="headerlink" title="1.3 开启树莓派"></a>1.3 开启树莓派</h3><p>将SD卡插到树莓派上，接上显示器，上电开机</p><p>按照提示一步一步操作</p><h3 id="1-4-换清华源"><a href="#1-4-换清华源" class="headerlink" title="1.4 换清华源"></a>1.4 换清华源</h3><p>树莓派安装的是ARM版本的Ubuntu，所以要使用 <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/">ubuntu-ports 镜像</a>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span><br><span class="line"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>然后更新+升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p>下文讲解ROS的安装。本文只讨论二进制安装，源码安装之后单独出一篇文章讲述。</p><h2 id="2-安装ROS1-Noetic"><a href="#2-安装ROS1-Noetic" class="headerlink" title="2 安装ROS1-Noetic"></a>2 安装ROS1-Noetic</h2><p>Ubuntu20.04推荐版本为<a href="https://wiki.ros.org/noetic">Noetic</a>，此版本也为LTS，所以本文安装Noetic版本ROS1。</p><h3 id="2-1-设置sources-list"><a href="#2-1-设置sources-list" class="headerlink" title="2.1 设置sources.list"></a>2.1 设置sources.list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sh -c <span class="string">&#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-设置秘钥"><a href="#2-2-设置秘钥" class="headerlink" title="2.2 设置秘钥"></a>2.2 设置秘钥</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver <span class="string">&#x27;hkp://keyserver.ubuntu.com:80&#x27;</span> --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654</span><br></pre></td></tr></table></figure><p>这里会出现无法连接至密钥服务器，请科学上网。</p><h3 id="2-3-安装完整桌面版"><a href="#2-3-安装完整桌面版" class="headerlink" title="2.3 安装完整桌面版"></a>2.3 安装完整桌面版</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-noetic-desktop-full</span><br></pre></td></tr></table></figure><h3 id="2-4-设置环境"><a href="#2-4-设置环境" class="headerlink" title="2.4 设置环境"></a>2.4 设置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/noetic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="2-5-测试"><a href="#2-5-测试" class="headerlink" title="2.5 测试"></a>2.5 测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure><p>如果成功安装则可以看到ROS版本为Noetic。</p><h3 id="2-6-卸载"><a href="#2-6-卸载" class="headerlink" title="2.6 卸载"></a>2.6 卸载</h3><p><strong>未测试过！！！</strong></p><p>如需卸载，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge ros-* &amp;&amp; sudo apt-get autoremove</span><br></pre></td></tr></table></figure><p>然后自行删除相关的环境变量</p><h2 id="3-安装ROS2-Galactic"><a href="#3-安装ROS2-Galactic" class="headerlink" title="3 安装ROS2-Galactic"></a>3 安装ROS2-Galactic</h2><p><del>ROS2目前官网推荐版本为<a href="https://docs.ros.org/en/galactic/">Galactic</a>，虽然Galactic修复了Foxy的许多bug，但是Foxy的资料比Galactic多一些，所以本文安装<a href="https://docs.ros.org/en/foxy/">Foxy</a>。</del></p><p><a href="https://docs.ros.org/en/foxy/">Foxy</a>正在向Galactic迁移，本文安装最新版本的<a href="https://docs.ros.org/en/galactic/">Galactic</a></p><h3 id="3-1-添加ROS2-apt仓库"><a href="#3-1-添加ROS2-apt仓库" class="headerlink" title="3.1 添加ROS2 apt仓库"></a>3.1 添加ROS2 apt仓库</h3><p>添加仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt install curl gnupg lsb-release</span><br></pre></td></tr></table></figure><p>验证GPG key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg</span><br></pre></td></tr></table></figure><p>将仓库加入软件源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu <span class="subst">$(source /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME)</span> main&quot;</span> | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null</span><br></pre></td></tr></table></figure><h3 id="3-2-安装ROS2包"><a href="#3-2-安装ROS2包" class="headerlink" title="3.2 安装ROS2包"></a>3.2 安装ROS2包</h3><p>上文设置了仓库，需要更新apt缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>桌面版安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ros-galactic-desktop</span><br></pre></td></tr></table></figure><h3 id="3-3-设置环境"><a href="#3-3-设置环境" class="headerlink" title="3.3 设置环境"></a>3.3 设置环境</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/ros/galactic/setup.bash&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>此时应该报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROS_DISTRO was <span class="built_in">set</span> to ‘noetic’ before. Please make sure that the environment does not mix paths from different distributions. </span><br></pre></td></tr></table></figure><p>出现该警告的原因在于环境变量中同时存在ROS1、ROS2。如果要切换使用ROS1和ROS2，则应该修改环境变量。</p><h4 id="3-3-1-更新vim"><a href="#3-3-1-更新vim" class="headerlink" title="3.3.1 更新vim"></a>3.3.1 更新vim</h4><p>预装的vim版本过旧，先更新一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure><p>使用vi打开环境变量文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure><p>滚动到最后，在以下两句前加#注释掉</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /opt/ros/noetic/setup.bash</span><br><span class="line"><span class="built_in">source</span> /opt/ros/galactic/setup.bash</span><br></pre></td></tr></table></figure><p>在后面加入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ros noetic(1) or ros2 galactic(2)?&quot;</span></span><br><span class="line"><span class="built_in">read</span> edition</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$edition</span>&quot;</span> -eq <span class="string">&quot;1&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">source</span> /opt/ros/noetic/setup.bash</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">source</span> /opt/ros/galactic/setup.bash</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>刷新终端<code>source ~/.bashrc</code>，然后输入1或2即可在当前终端内应用对应的环境变量</p><h3 id="3-4-测试"><a href="#3-4-测试" class="headerlink" title="3.4 测试"></a>3.4 测试</h3><p>输入<code>ros2</code>，出现相关command的提示即为安装成功</p><h3 id="3-5-卸载"><a href="#3-5-卸载" class="headerlink" title="3.5 卸载"></a>3.5 卸载</h3><p>如需卸载，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt remove ~nros-galactic-* &amp;&amp; sudo apt autoremove</span><br></pre></td></tr></table></figure><p>然后自行删除相关的环境变量</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeMX重定向printf输出至串口</title>
    <link href="http://www.fanziqi.site/posts/f00798b9.html"/>
    <id>http://www.fanziqi.site/posts/f00798b9.html</id>
    <published>2022-01-13T08:40:00.000Z</published>
    <updated>2022-01-13T08:57:24.828Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="STM32CubeMX重定向printf输出至串口"><a href="#STM32CubeMX重定向printf输出至串口" class="headerlink" title="STM32CubeMX重定向printf输出至串口"></a>STM32CubeMX重定向printf输出至串口</h1><p>第一步,CubeMX配置串口(GPIO配置略)</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/image-20220113161902135.png" alt="image-20220113161902135"></p><p>第二步,包含头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>第三步,勾选Use Microlib</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/image-20220113161451008.png" alt="image-20220113161451008"></p><p>第四步,重定向printf,此处需要将huart2改为上面配置的串口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputc</span><span class="params">(<span class="keyword">int</span> c, FILE *stream)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    HAL_UART_Transmit(&amp;huart2, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)&amp;c, <span class="number">1</span>, <span class="number">1000</span>);   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时即可使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\r\n&quot;</span>,num);</span><br></pre></td></tr></table></figure><p>代替</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf_len = <span class="built_in">sprintf</span>(buf, <span class="string">&quot;%d\r\n&quot;</span>,num);</span><br><span class="line">HAL_UART_Transmit(&amp;huart2, (<span class="keyword">uint8_t</span> *)buf, buf_len, <span class="number">100</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/categories/STM32/"/>
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>CubeMX配置SPI-Flash(W25Q256)</title>
    <link href="http://www.fanziqi.site/posts/7b613e40.html"/>
    <id>http://www.fanziqi.site/posts/7b613e40.html</id>
    <published>2022-01-13T08:30:00.000Z</published>
    <updated>2022-01-13T08:57:24.827Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CubeMX配置SPI-Flash-W25Q256"><a href="#CubeMX配置SPI-Flash-W25Q256" class="headerlink" title="CubeMX配置SPI-Flash(W25Q256)"></a>CubeMX配置SPI-Flash(W25Q256)</h1><p>W25Q256（256Mb）将32M（字节byte）的容量分为512个块（block），每个块大小为64K字节，每个块又分为16个扇区（sector）,每个扇区4K字节。最小擦除单位为一个扇区，也就是4K字节。</p><p>首先应该配置SPI,但是这里有个大坑.</p><p>按照标准的SPI协议，当SPI被配置为主机模式后，通过SPI对从设备进行操作时，其NSS应该自动置低，从而选中（使能）从设备；一旦不对从设备进行操作，NSS立刻置为高。</p><p>但是，我在实际调试过程中发现：STM32 SPI NSS无法自动实现跳变。 一旦SPI初始化完成并使能SPI，NSS立刻置低，然后保持不变。</p><p>这个问题一直无法解决，直到我在ST官方论坛上看到国外有些技术人员也在讨论这个问题，他们得出的结论是：STM32 SPI NSS无法自动跳变。</p><p>ST官方技术人员也证实：STM32 SPI NSS是不会自动置位和复位的。按照官方说法，ST已经将其列入了改进计划。</p><p>对于这个问题，可以采用下面的方法解决：</p><p>在SPI初始化时，采用NSS soft模式，然后使能NSS输出功能。从而将NSS当做GPIO使用，通过软件set和reset来实现NSS的置位和复位。</p><p>具体在CubeMX中应将FLASH的NSS当成GPIO Output配置而不是SPI NSS.配置如图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/image-20220113160700854.png" alt="image-20220113160700854"></p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/image-20220113160802730.png" alt="image-20220113160802730"></p><p>因为需要在flash中存入浮点数,所以需要类型转换,这里使用union联合体实现:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> union_float;</span><br><span class="line">    <span class="keyword">uint8_t</span> union_int8[<span class="number">4</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">test</span> <span class="title">Test_write</span>,<span class="title">Test_read</span>;</span></span><br><span class="line">Test_write.union_float=<span class="number">1.23</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读flash的id</span></span><br><span class="line">BSP_W25Q256_Read_ID(id);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ID = 0x%02X%02X\r\n&quot;</span>, id[<span class="number">0</span>], id[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试flash的擦读写</span></span><br><span class="line">BSP_W25Q256_Erase_Block(<span class="number">0</span>);</span><br><span class="line">BSP_W25Q256_Write(Test_write.union_int8, <span class="number">0</span>, <span class="keyword">sizeof</span>(Test_write.union_int8));</span><br><span class="line">BSP_W25Q256_Read(Test_read.union_int8, <span class="number">0</span>, <span class="keyword">sizeof</span>(Test_read.union_int8));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Ready to write:  float: %f, trans to uint8: 0x%x 0x%x 0x%x 0x%x\r\n&quot;</span>, </span><br><span class="line">       Test_write.union_float, </span><br><span class="line">       Test_write.union_int8[<span class="number">0</span>],</span><br><span class="line">       Test_write.union_int8[<span class="number">1</span>], </span><br><span class="line">       Test_write.union_int8[<span class="number">2</span>],</span><br><span class="line">       Test_write.union_int8[<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Read from Flash: uint8: 0x%x 0x%x 0x%x 0x%x, trans to float: %f\r\n&quot;</span>, </span><br><span class="line">       Test_read.union_int8[<span class="number">0</span>],</span><br><span class="line">       Test_read.union_int8[<span class="number">1</span>],</span><br><span class="line">       Test_read.union_int8[<span class="number">2</span>],</span><br><span class="line">       Test_read.union_int8[<span class="number">3</span>],</span><br><span class="line">       Test_read.union_float);</span><br></pre></td></tr></table></figure><p>参考:</p><p>关于STM32 SPI NSS的讨论 <a href="https://blog.csdn.net/chseangs/article/details/4520733">https://blog.csdn.net/chseangs/article/details/4520733</a></p><p>SPI problem with hardware NSS management <a href="https://community.st.com/s/question/0D50X00009XkbvdSAB/spi-problem-with-hardware-nss-management">https://community.st.com/s/question/0D50X00009XkbvdSAB/spi-problem-with-hardware-nss-management</a></p><p>STM32CbueMX之W25Q256 <a href="https://blog.csdn.net/sudaroot/article/details/93158309">https://blog.csdn.net/sudaroot/article/details/93158309</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/categories/STM32/"/>
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>RT-Thread配置SPI-Flash(W25Q256)</title>
    <link href="http://www.fanziqi.site/posts/358fc8e8.html"/>
    <id>http://www.fanziqi.site/posts/358fc8e8.html</id>
    <published>2021-12-20T06:30:00.000Z</published>
    <updated>2022-01-13T08:57:24.829Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="RT-Thread配置SPI-Flash-W25Q256"><a href="#RT-Thread配置SPI-Flash-W25Q256" class="headerlink" title="RT-Thread配置SPI-Flash(W25Q256)"></a>RT-Thread配置SPI-Flash(W25Q256)</h1><h3 id="1-开启SPI总线"><a href="#1-开启SPI总线" class="headerlink" title="1.开启SPI总线"></a>1.开启SPI总线</h3><p>新建一个空白的RT-Thread项目，本文基于STM32F103芯片。<br>首先在drivers目录下打开board.h文件，找到SPI对应部分。根据指导，一步一步做下去。</p><p><img src="https://img-blog.csdnimg.cn/20201204143331118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-1打开SPI及SFUD"><a href="#1-1打开SPI及SFUD" class="headerlink" title="1.1打开SPI及SFUD"></a>1.1打开SPI及SFUD</h4><p>打开RT-Thread Settings,点击更多配置来到组件一栏，勾选如下。</p><p><img src="https://img-blog.csdnimg.cn/20201204144847310.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-2打开SPI宏定义"><a href="#1-2打开SPI宏定义" class="headerlink" title="1.2打开SPI宏定义"></a>1.2打开SPI宏定义</h4><p>board.h文件中，打开SPI宏定义。</p><p><img src="https://img-blog.csdnimg.cn/20201204145854510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-3产生初始化函数"><a href="#1-3产生初始化函数" class="headerlink" title="1.3产生初始化函数"></a>1.3产生初始化函数</h4><p>使用stm32cubemx产生初始化函数，将其粘贴于board.c文件末尾。</p><p><img src="https://img-blog.csdnimg.cn/20201204152938102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>然后选择芯片型号-&gt;填写项目名称，双击IOC文件后如图操作。</p><p><img src="https://img-blog.csdnimg.cn/20201204153731512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>复制初始化函数到<code>board.c</code>文件。<img src="https://img-blog.csdnimg.cn/20201204154654140.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="1-4打开SPI驱动"><a href="#1-4打开SPI驱动" class="headerlink" title="1.4打开SPI驱动"></a>1.4打开SPI驱动</h4><p>在drivers目录下的stm32f1xx_hal_conf.h文件中打开SPI驱动。</p><p><img src="https://img-blog.csdnimg.cn/20201204160217954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>配置完成，编译下载,使用list_device指令查看设备，可以看到SPI总线已经存在了。</p><p><img src="https://img-blog.csdnimg.cn/2020120416192982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h3 id="2-挂载片外flash"><a href="#2-挂载片外flash" class="headerlink" title="2.挂载片外flash"></a>2.挂载片外flash</h3><p>接下来，我们将片外flash(W25Q256)挂到SPI总线上。</p><p>在application目录下，新增flash.c文件。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rt_hw_spi_flash_init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//此处为片选引脚</span></span><br><span class="line">    rt_hw_spi_device_attach(W25Q_SPI_BUS_NAME, W25Q_SPI_DEVICE_NAME, GPIOA, GPIO_PIN_4);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//flash名称要正确</span></span><br><span class="line">    <span class="keyword">if</span> (RT_NULL == rt_sfud_flash_probe(<span class="string">&quot;W25Q256&quot;</span>, W25Q_SPI_DEVICE_NAME))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> -RT_ERROR;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RT_EOK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 导出到自动初始化 */</span></span><br><span class="line">INIT_COMPONENT_EXPORT(rt_hw_spi_flash_init);</span><br></pre></td></tr></table></figure><p>经过验证，flash已经挂载成功.</p><p><img src="https://img-blog.csdnimg.cn/20201204164850870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p>下面开始搭建FAL。</p><h3 id="3-搭建FAL抽象层"><a href="#3-搭建FAL抽象层" class="headerlink" title="3.搭建FAL抽象层"></a>3.搭建FAL抽象层</h3><p>FAL是RT-Thread的一个软件包，主要是用于Flash 抽象层的实现，负责管理 Flash 设备和 Flash 分区。关于FAL的详细功能，大家可以参考RT-Thread软件包友情链接。文档非常详细，这里也参考了文档中的内容。</p><h4 id="3-1添加FAL"><a href="#3-1添加FAL" class="headerlink" title="3.1添加FAL"></a>3.1添加FAL</h4><p>打开RT-Thread Settings点击立即添加，然后搜索FAL。</p><p><img src="https://img-blog.csdnimg.cn/20201206161335974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201206161344745.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2020120616140293.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20201209201814662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2配置FAL"><a href="#3-2配置FAL" class="headerlink" title="3.2配置FAL"></a>3.2配置FAL</h4><p>因为我们只用到了片外flash，所以可以将fal_cfg.h中关于片外flash的部分删除，并且定义自己的分区表。</p><p>将<code>samples-&gt;porting-&gt;fal_cfg.h</code>复制到<code>inc</code>中并修改为:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FAL_CFG_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _FAL_CFG_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;rtconfig.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;board.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NOR_FLASH_DEV_NAME             <span class="meta-string">&quot;W25Q256&quot;</span>    <span class="comment">/*一定要改为自己的flash名称*/</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ===================== Flash device Configuration ========================= */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="class"><span class="keyword">struct</span> <span class="title">fal_flash_dev</span> <span class="title">nor_flash0</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* flash device table(定义设备表，删掉了片上flash) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAL_FLASH_DEV_TABLE                                          \</span></span><br><span class="line"><span class="meta">&#123;                                                                    \</span></span><br><span class="line"><span class="meta">    &amp;nor_flash0,                                                     \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="comment">/* ====================== Partition Configuration ========================== */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FAL_PART_HAS_TABLE_CFG</span></span><br><span class="line"><span class="comment">/* partition table ps：可根据需要自行分区*/</span> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FAL_PART_TABLE                                                               \</span></span><br><span class="line"><span class="meta">&#123;                                                                                   \</span></span><br><span class="line"><span class="meta">    &#123;FAL_PART_MAGIC_WORD, <span class="meta-string">&quot;easyflash&quot;</span>, NOR_FLASH_DEV_NAME,         0, 1024*1024, 0&#125;, \</span></span><br><span class="line"><span class="meta">    &#123;FAL_PART_MAGIC_WORD,  <span class="meta-string">&quot;download&quot;</span>, NOR_FLASH_DEV_NAME, 1024*1024, 1024*1024, 0&#125;, \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* FAL_PART_HAS_TABLE_CFG */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _FAL_CFG_H_ */</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此处暂时并未做太大改动,可以根据需要自行分区、命名。</p><h4 id="3-3初始化FAL"><a href="#3-3初始化FAL" class="headerlink" title="3.3初始化FAL"></a>3.3初始化FAL</h4><p>在<code>main.c</code>文件中，包含<code>fal.h</code>并调用<code>fal_init()</code>初始化程序。</p><p><img src="https://img-blog.csdnimg.cn/20201204174654126.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h4 id="3-4验证"><a href="#3-4验证" class="headerlink" title="3.4验证"></a>3.4验证</h4><p><img src="https://img-blog.csdnimg.cn/20201204175752858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L28wMDAxXzAwMDA=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/categories/STM32/"/>
    
    
    <category term="STM32" scheme="http://www.fanziqi.site/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>范子琦第二次作业</title>
    <link href="http://www.fanziqi.site/posts/337c96c3.html"/>
    <id>http://www.fanziqi.site/posts/337c96c3.html</id>
    <published>2021-10-14T14:00:00.000Z</published>
    <updated>2021-11-14T14:18:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><p><strong>范子琦 2019330301153 机器人工程(1)班</strong></p><p>下文坐标系定义原则: $\left\{\begin{matrix}<br>x_i\parallel z_{i-1}\\<br>x_i\perp z_{i-1}<br>\end{matrix}\right.$​</p><p>图注:</p><ol><li><p>相同颜色为同一坐标系, 绿色虚线为延长线</p></li><li><p>有尺寸的以数字表示, 无尺寸的参照图中定义</p></li></ol><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>平面三连杆机械臂的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test1.jpeg" alt="test1" style="zoom:50%;"></p><p>由上图坐标系配置可求得平面三连杆机械臂的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*+90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$2$</td><td style="text-align:left">$0$</td><td>$L_1+{d_2}^*$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*$</td><td>$0$</td><td>$L_3$</td><td>$0$​</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 d2 t3 L1 L3</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([<span class="number">0</span>       L1+d2      <span class="number">0</span>        -<span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">1</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3      <span class="number">0</span>          L3        <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Three&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 d2 t3])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix}cos(\theta_1 + \theta_3) & -sin(\theta_1 + \theta_3) & 0 & L_3*cos(\theta_1 + \theta_3) + d_2*sin(\theta_1) \\ sin(\theta_1 + \theta_3) &  cos(\theta_1 + \theta_3) & 0 & L_3*sin(\theta_1 + \theta_3) - d_2*cos(\theta_1) \\            0 &             0 & 1 &                            0 \\            0 &             0 & 0 &                            1 \end{bmatrix}</script><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>PUMA260的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test2.jpeg" alt="test2" style="zoom:50%;"></p><p>由上图坐标系配置可求得PUMA260的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*$</td><td>$13$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$2$</td><td style="text-align:left">${\theta_2}^*$</td><td>$-d_2$</td><td>$8$</td><td>$0$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*+90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$4$</td><td style="text-align:left">${\theta_4}^*$</td><td>$8$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$5$</td><td style="text-align:left">${\theta_5}^*-90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$6$</td><td style="text-align:left">${\theta_6}^*$</td><td>$d_6$</td><td>$0$</td><td>$0$</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 t2 t3 t4 t5 t6 d2 d6</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1      <span class="number">13</span>         <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([t2      -d2        <span class="number">8</span>         <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">4</span>)=Link([t4      <span class="number">8</span>          <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">5</span>)=Link([t5-<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">6</span>)=Link([t6      d6         <span class="number">0</span>         <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;PUMA260&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 t2 t3 t4 t5 t6])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix} - sin(\theta_6)*(cos(\theta_4)*sin(\theta_1) - sin(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) - cos(\theta_6)*(cos(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) + sin(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2)))& sin(\theta_6)*(cos(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) + sin(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2))) - cos(\theta_6)*(cos(\theta_4)*sin(\theta_1) - sin(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3)))& cos(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2)) - sin(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3)))& 8*cos(\theta_1)*cos(\theta_2) + d_2*sin(\theta_1) - d_6*(sin(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) - cos(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2))) + 8*cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + 8*cos(\theta_1)*cos(\theta_3)*sin(\theta_2)\\   sin(\theta_6)*(cos(\theta_1)*cos(\theta_4) + sin(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_6)*(cos(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2)))& cos(\theta_6)*(cos(\theta_1)*cos(\theta_4) + sin(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_6)*(cos(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2)))& sin(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2))& 8*cos(\theta_2)*sin(\theta_1) + d_6*(sin(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2))) - d_2*cos(\theta_1) + 8*cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + 8*cos(\theta_3)*sin(\theta_1)*sin(\theta_2)\\                                                                                                                                                                sin(\theta_2 + \theta_3)*sin(\theta_4)*sin(\theta_6) - cos(\theta_6)*(cos(\theta_2 + \theta_3)*sin(\theta_5) + sin(\theta_2 + \theta_3)*cos(\theta_4)*cos(\theta_5))&                                                                                                                                                              sin(\theta_6)*(cos(\theta_2 + \theta_3)*sin(\theta_5) + sin(\theta_2 + \theta_3)*cos(\theta_4)*cos(\theta_5)) + sin(\theta_2 + \theta_3)*cos(\theta_6)*sin(\theta_4)&                                                                                                   cos(\theta_2 + \theta_3)*cos(\theta_5) - sin(\theta_2 + \theta_3)*cos(\theta_4)*sin(\theta_5)&                                                                                                                     8*cos(\theta_2 + \theta_3) - 8*sin(\theta_2) - (d_6*sin(\theta_2 + \theta_3)*sin(\theta_4 + \theta_5))/2 + d_6*cos(\theta_2 + \theta_3)*cos(\theta_5) + (d_6*sin(\theta_4 - \theta_5)*sin(\theta_2 + \theta_3))/2 + 13\\0&0&0&1\end{bmatrix}</script><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>JAKA ZU3的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test3.jpeg" alt="test3" style="zoom:50%;"></p><p>由上图坐标系配置可求得JAKA ZU3的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*$</td><td>$150.55$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$2$</td><td style="text-align:left">${\theta_2}^*-90$</td><td>$115$</td><td>$246$</td><td>$0$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*$</td><td>$-116.3$</td><td>$190$</td><td>$0$</td></tr><tr><td>$4$</td><td style="text-align:left">${\theta_4}^*+90$</td><td>$117.5$</td><td>$0$</td><td>$90$</td></tr><tr><td>$5$</td><td style="text-align:left">${\theta_5}^*$</td><td>$117.5$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$6$</td><td style="text-align:left">${\theta_6}^*+180$</td><td>$-105$</td><td>$0$</td><td>$180$</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 t2 t3 t4 t5 t6</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1      <span class="number">150.55</span>     <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([t2-<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">115</span>        <span class="number">246</span>       <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3      <span class="number">-116.3</span>     <span class="number">190</span>       <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">4</span>)=Link([t4+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">117.5</span>      <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">5</span>)=Link([t5      <span class="number">117.5</span>      <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">6</span>)=Link([t6+<span class="built_in">pi</span>   <span class="number">-105</span>       <span class="number">0</span>         <span class="number">180</span>         <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;JAKA-ZU3&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 t2 t3 t4 t5 t6])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix} - cos(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_6), cos(180)*sin(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - sin(180)*(cos(\theta_5)*sin(\theta_1) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_1)*cos(\theta_6), sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_1)*cos(\theta_6) - sin(180)*sin(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - cos(180)*(cos(\theta_5)*sin(\theta_1) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5)), 246*cos(\theta_1)*cos(\theta_2) - (581*sin(\theta_1))/5 + 105*cos(\theta_5)*sin(\theta_1) - 190*cos(\theta_1)*sin(\theta_2)*sin(\theta_3) + 105*cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5) + (235*cos(\theta_2 + \theta_3)*cos(\theta_1)*sin(\theta_4))/2 + (235*sin(\theta_2 + \theta_3)*cos(\theta_1)*cos(\theta_4))/2 + 190*cos(\theta_1)*cos(\theta_2)*cos(\theta_3)\\   cos(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) - sin(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_6), sin(180)*(cos(\theta_1)*cos(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5)) - cos(180)*sin(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_6)*sin(\theta_1), cos(180)*(cos(\theta_1)*cos(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5)) + sin(180)*sin(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) + sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_6)*sin(\theta_1), (581*cos(\theta_1))/5 - 105*cos(\theta_1)*cos(\theta_5) + 246*cos(\theta_2)*sin(\theta_1) - 190*sin(\theta_1)*sin(\theta_2)*sin(\theta_3) + 105*cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5) + (235*cos(\theta_2 + \theta_3)*sin(\theta_1)*sin(\theta_4))/2 + (235*sin(\theta_2 + \theta_3)*cos(\theta_4)*sin(\theta_1))/2 + 190*cos(\theta_2)*cos(\theta_3)*sin(\theta_1)\\                                     - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_6) - sin(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*cos(\theta_6),                                                                 sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_6) + sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_5)*sin(\theta_6),                                                                 cos(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_6) + sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*sin(\theta_5) - sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_5)*sin(\theta_6),                                                                        (235*cos(\theta_2 + \theta_3)*cos(\theta_4))/2 - 246*sin(\theta_2) - (235*sin(\theta_2 + \theta_3)*sin(\theta_4))/2 - sin(\theta_5)*(105*cos(\theta_2 + \theta_3)*sin(\theta_4) + 105*sin(\theta_2 + \theta_3)*cos(\theta_4)) - 190*sin(\theta_2 + \theta_3) + 3011/20\\0,0,0,1\end{bmatrix}</script><p>运动学逆解</p><p>建立仿真环境</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">L(<span class="number">1</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">150.55</span>, <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,-<span class="built_in">pi</span>/<span class="number">2</span>, <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">115</span>,    <span class="string">&#x27;a&#x27;</span>,<span class="number">246</span>, <span class="string">&#x27;alpha&#x27;</span>,<span class="number">0</span>,     <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">-116.3</span>, <span class="string">&#x27;a&#x27;</span>,<span class="number">190</span>, <span class="string">&#x27;alpha&#x27;</span>,<span class="number">0</span>,     <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">4</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">117.5</span>,  <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">5</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">117.5</span>,  <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,-<span class="built_in">pi</span>/<span class="number">2</span>, <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">6</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">-105</span>,   <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,<span class="built_in">pi</span>,    <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;JAKA-ZU3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一组数据</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view(<span class="number">3</span>)</span><br><span class="line">robot.teach([<span class="number">0</span>+<span class="number">0</span> <span class="built_in">pi</span>/<span class="number">2</span>-<span class="built_in">pi</span> <span class="number">0</span>+<span class="number">0</span> <span class="built_in">pi</span>/<span class="number">2</span>+<span class="number">0</span> <span class="built_in">pi</span>+<span class="number">0</span> <span class="number">0</span>+<span class="built_in">pi</span>])</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2021-11-14%20%E4%B8%8B%E5%8D%8810.11.06.png" alt="截屏2021-11-14 下午10.11.06" style="zoom:50%;"></p><p>第二组数据</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view(<span class="number">3</span>)</span><br><span class="line">robot.teach([<span class="number">30.906</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">72.993</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)-<span class="built_in">pi</span> <span class="number">-68.722</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">84.098</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">91.007</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">0.051</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="built_in">pi</span>])</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2021-11-14%20%E4%B8%8B%E5%8D%8810.09.30.png" alt="截屏2021-11-14 下午10.09.30" style="zoom:50%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署至云服务器的宝塔面板</title>
    <link href="http://www.fanziqi.site/posts/6b69667c.html"/>
    <id>http://www.fanziqi.site/posts/6b69667c.html</id>
    <published>2021-10-04T10:40:00.000Z</published>
    <updated>2021-10-04T10:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo部署至云服务器的宝塔面板"><a href="#Hexo部署至云服务器的宝塔面板" class="headerlink" title="Hexo部署至云服务器的宝塔面板"></a>Hexo部署至云服务器的宝塔面板</h1><blockquote><p>本文为网络转载, 版权属于：Heson</p><p>原文链接：<a href="https://www.heson10.com/posts/51315.html">https://www.heson10.com/posts/51315.html</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>hexo 博客部署方法有好多种，<code>github pages</code>、<code>gitee pages(pro)</code>、<code>vercel</code>，<code>cloudflare page</code>、<code>阿里云oss</code>、<code>腾讯存储桶</code>等等这些不需要购买服务器的部署方式。一般大部分都用以上方式部署自己的hexo博客，但也有少部分部署在<code>自己服务器</code>的同志。</p><p>新手部署服务器最常见的方法就是：直接把本地生成的<code>public</code>中的文件，直接ftp到服务器<code>www根目录</code>，简单粗暴。</p><p>还有一种更优雅地方式，那就是直接在服务器上搭建<code>git仓库</code>，hexo三连直接<code>deploy</code>上去（跟搭建在github pages上的方式一样）。</p><h2 id="为什么要部署至服务器？"><a href="#为什么要部署至服务器？" class="headerlink" title="为什么要部署至服务器？"></a>为什么要部署至服务器？</h2><p>个人感觉手头有闲置的网速较快的服务器，可以尝试部署至服务器。</p><p>比如我手头有一个<code>腾讯云香港二区 2核 4GB 5M的服务器。</code>对比了一下我放在又拍云cdn上的主站网速，可以看到：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-1.png" alt="hexo-bt-1"></p><p><strong>这速度可谓不相上下。</strong></p><p>相比起github pages的慢、coding pages的抽（移动宽带经常抽），服务器部署还是有一定优势的。</p><p>当然，如果域名<code>备案</code>了，手头没有闲置的<code>服务器</code>，还是建议嫖上国内的CDN（又拍云）。</p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>老样子，简单说下思路：</p><ul><li>服务器安装宝塔面板</li><li>创建git仓库，并配置git钩子，自动同步文件到网站目录</li><li>配置网站访问设置</li><li>本地<code>git deploy</code>设置</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.云服务安装宝塔面板</p><p>2.本地生成ssh秘钥备用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub的邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;GitHub的邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="连接服务器终端"><a href="#连接服务器终端" class="headerlink" title="连接服务器终端"></a>连接服务器终端</h3><p>宝塔面板用户可直接左侧导航栏<code>终端</code>登录（如图）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-2.png" alt="hexo-bt-2"></p><ul><li>切换到 <code>root</code> 账号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>宝塔默认是root账号，注意看图：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-3.png" alt="hexo-bt-3"></p><ul><li>安装 <code>git</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="创建-Git-账户"><a href="#创建-Git-账户" class="headerlink" title="创建 Git 账户"></a>创建 Git 账户</h3><p>创建 Git 账户并赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">chmod 740 /etc/sudoers</span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/sudoers</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>按<code>i</code>键进入编辑模式，找到<code>root ALL=(ALL) ALL</code>，在其下方加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-4.png" alt="hexo-bt-4"></p><p>输入完成后按<code>esc</code>，再输入<code>:wq</code>，保存退出。</p><p>更变<code>/etc/sudoers</code>权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p>设置 git 账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>输入密码，输入的时候是看不到任何显示的，输完回车即可。</p><p>切换至 <code>git 用户</code>，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>同样<code>i</code>进入编辑模式，把之前本地准备的<code>id_rsa.pub</code>文件中的公钥复制进去，按<code>esc</code>后，输入<code>:wq</code>保存。<strong>(注意!!!!!!!!!!! 最后一行要加回车)</strong></p><p>更改权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>本地测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@服务器ip地址或域名</span><br></pre></td></tr></table></figure><p>不用输密码就成了。</p><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>切换为<code>root</code>用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>创建<code>repo</code>作为仓库目录，并加权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br></pre></td></tr></table></figure><p>创建 hexo 目录作为网站根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/hexo</span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure><p>创建一个空白的 git 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>编辑一个 Git 钩子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑模式，添加下面的代码，按<code>esc</code>输入<code>:wq</code> 保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>更改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexo.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="宝塔网站配置"><a href="#宝塔网站配置" class="headerlink" title="宝塔网站配置"></a>宝塔网站配置</h3><p>创建一个网站</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-5.png" alt="hexo-bt-5"></p><h3 id="本地-Git-deploy-设置"><a href="#本地-Git-deploy-设置" class="headerlink" title="本地 Git deploy 设置"></a>本地 Git deploy 设置</h3><p>安装git部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在博客根目录配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@服务器ip或域名:/var/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置完成后，可直接hexo三连到自己的服务器。简单快捷。</p><p>如果报错:<code>error: remote unpack failed: index-pack abnormal exit</code>, 删除<code>/var/hexo</code>下的所有文件. 包括<code>.user.ini</code>, 这个文件作用为防跨站, 添加权限之后可以再添加回来.</p><p>重新给权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line"></span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Git" scheme="http://www.fanziqi.site/tags/Git/"/>
    
    <category term="hexo" scheme="http://www.fanziqi.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——参数的使用</title>
    <link href="http://www.fanziqi.site/posts/7219ca14.html"/>
    <id>http://www.fanziqi.site/posts/7219ca14.html</id>
    <published>2021-10-04T09:30:00.000Z</published>
    <updated>2021-10-04T09:34:17.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——参数的使用"><a href="#ROS2——参数的使用" class="headerlink" title="ROS2——参数的使用"></a>ROS2——参数的使用</h1><p>上回说到, <code>Organization</code>给每个人免费送2个汉堡, 有一天<code>Organization</code>正在营业中, 汉堡突然供不应求了, 领导决定临时改变规则, 之后的每个人只能领取一个汉堡. 但是此时节点已经在运行中, 该如何改变这个值呢? 这就需要用到参数<code>parameters</code></p><h2 id="参数简介"><a href="#参数简介" class="headerlink" title="参数简介"></a>参数简介</h2><p>参数是节点的配置参数值。你可以认为参数是节点配置的一部分。参数为整数，浮点数，布尔值，字符串和列表。在ROS2中，每个节点都有自己的参数。所有参数都是可动态重新配置的，并且是基于ROS2服务构建的。</p><p>在这个案例中, 每个人领取的汉堡数量就可以是<code>Organization</code>节点的一个参数.</p><p>下面, 我们将修改这段服务程序, 通过修改参数来改变人均汉堡数</p><h2 id="修改服务程序"><a href="#修改服务程序" class="headerlink" title="修改服务程序"></a>修改服务程序</h2><p>新建<code>Organization_with_parameter.cpp</code>文件</p><p>代码由<code>Organization.cpp</code>修改而来, 不同的地方均使用<code>// CHANGE:</code>标注出了, 请读者自行与上节代码进行对比.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span> :</span> <span class="keyword">public</span> rclcpp::Node </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Organization</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Organization&quot;</span>), <span class="built_in">NumOfAll</span>(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我们是热心组织, 我们只给poorer发汉堡.&quot;</span>);</span><br><span class="line">        callback_group_organization = <span class="keyword">this</span>-&gt;<span class="built_in">create_callback_group</span>(rclcpp::CallbackGroupType::MutuallyExclusive);</span><br><span class="line">        Organization_Server = <span class="keyword">this</span>-&gt;create_service&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>,</span><br><span class="line">                                    std::<span class="built_in">bind</span>(&amp;Organization::organization_callback,<span class="keyword">this</span>,_1,_2),</span><br><span class="line">                                    rmw_qos_profile_services_default,</span><br><span class="line">                                    callback_group_organization);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// CHANGE: 声明参数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;declare_parameter&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;NumOfEachPerson&quot;</span>, NumOfEachPerson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> NumOfAll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CHANGE: 声明每个人分得的汉堡数, 默认为2</span></span><br><span class="line">    <span class="keyword">int</span> NumOfEachPerson = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    rclcpp::CallbackGroup::SharedPtr callback_group_organization;</span><br><span class="line">    rclcpp::Service&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Organization_Server;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">organization_callback</span><span class="params">(<span class="keyword">const</span> service_interfaces::srv::Calculate::Request::SharedPtr request,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">const</span> service_interfaces::srv::Calculate::Response::SharedPtr response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request-&gt;status == <span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个来自%s的请求，他家有%d个人.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// CHANGE: 更新参数</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">get_parameter</span>(<span class="string">&quot;NumOfEachPerson&quot;</span>, NumOfEachPerson);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// CHANGE: 计算应给汉堡数量，由参数给定</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> NumOfRequired = request-&gt;num_of_people * NumOfEachPerson;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(NumOfRequired &gt; NumOfAll)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;当前汉堡库里只剩%d个汉堡啦! 已经不够分了, 请明日再来.&quot;</span>, NumOfRequired);</span><br><span class="line">                response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                NumOfAll -= NumOfRequired;</span><br><span class="line">                response-&gt;num_of_hamburger = NumOfRequired;</span><br><span class="line">                response-&gt;success = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功送出%d个汉堡~ 还剩余%d个汉堡&quot;</span>, NumOfRequired, NumOfAll);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            response-&gt;num_of_hamburger = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个非法请求，这人是个%s, 不满足送汉堡资格.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Organization&gt;();</span><br><span class="line">    rclcpp::executors::MultiThreadedExecutor exector;</span><br><span class="line">    exector.<span class="built_in">add_node</span>(node);</span><br><span class="line">    exector.<span class="built_in">spin</span>();</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h3><p>添加:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(Organization_with_parameters_node src/Organization_with_parameters.cpp)</span><br><span class="line">ament_target_dependencies(Organization_with_parameters_node rclcpp service_interfaces)</span><br></pre></td></tr></table></figure><p>添加:<code>Organization_with_parameters_node</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  ...</span><br><span class="line">  Organization_with_parameters_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h3><p>不用修改</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select poor_and_organization</span><br></pre></td></tr></table></figure><p>刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>新建一个终端窗口, 运行带参数的Organization服务端节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_with_parameters_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行Poor客户端节点</p><p>一开始每人领取两个汉堡, 直接运行客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 5</span><br></pre></td></tr></table></figure><p>Organization服务端: 成功发出10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-Organization1.png" alt="Parameters-Organization1" style="zoom:67%;"></p><p>Poor客户端: 成功领取10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change-Poor1.png" alt="Parameters-change-Poor1" style="zoom:67%;"></p><p>此时需要修改参数, 另起一个终端, 运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param <span class="built_in">set</span> /Organization NumOfEachPerson 1</span><br></pre></td></tr></table></figure><p>提示如下即为成功</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change.png" alt="Parameters-change" style="zoom:67%;"></p><p>再次运行客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 50</span><br></pre></td></tr></table></figure><p>Poor客户端: 50个人领取了50个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change-Poor2.png" alt="Parameters-change-Poor2" style="zoom:67%;"></p><p>Organization服务端: 成功发出50个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-Organization2.png" alt="Parameters-Organization2" style="zoom:67%;"></p><p>由此可见, 参数成功被修改了, 但此时的参数不会被保留, 参数所在的节点重启后即恢复至初始值. 那如果一个节点的参数特别多, 修改完之后想将当前的参数保存下来供下次调用应该怎么操作呢? 请继续阅读.</p><h2 id="参数常用命令"><a href="#参数常用命令" class="headerlink" title="参数常用命令"></a>参数常用命令</h2><p>使用 <code>ros2 param</code></p><h3 id="查看参数列表"><a href="#查看参数列表" class="headerlink" title="查看参数列表"></a>查看参数列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param list</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-list.png" alt="Parameters-ros2-param-list" style="zoom:67%;"></p><p>也可具体到某个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param list /Organization</span><br></pre></td></tr></table></figure><h3 id="查看参数描述"><a href="#查看参数描述" class="headerlink" title="查看参数描述"></a>查看参数描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param describe /Organization NumOfEachPerson</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-describe-Organization-NumOfEachPerson.png" alt="Parameters-ros2-param-describe-Organization-NumOfEachPerson" style="zoom:67%;"></p><h3 id="获取参数值"><a href="#获取参数值" class="headerlink" title="获取参数值"></a>获取参数值</h3><p><code>ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param get /Organization NumOfEachPerson</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-get-Organization-NumOfEachPerson-2.png" alt="Parameters-ros2-param-get-Organization-NumOfEachPerson-2" style="zoom:67%;"></p><h3 id="设置参数值"><a href="#设置参数值" class="headerlink" title="设置参数值"></a>设置参数值</h3><p><code>ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param <span class="built_in">set</span> /Organization NumOfEachPerson 1</span><br></pre></td></tr></table></figure><p>再次获取参数值, 发生了改变:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-get-Organization-NumOfEachPerson-1.png" alt="Parameters-ros2-param-get-Organization-NumOfEachPerson-1" style="zoom:67%;"></p><h3 id="保存参数"><a href="#保存参数" class="headerlink" title="保存参数"></a>保存参数</h3><p><code>ros2 param dump &lt;node_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param dump /Organization</span><br></pre></td></tr></table></figure><p>在当前终端的根目录下, 可以看到增加了一个<code>Organization.yaml</code>文件, 打开此文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/Organization:</span></span><br><span class="line">  <span class="attr">ros__parameters:</span></span><br><span class="line">    <span class="attr">NumOfEachPerson:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">use_sim_time:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>有了这个参数文件, 就可以通过这个文件设置节点的参数</p><h3 id="加载参数"><a href="#加载参数" class="headerlink" title="加载参数"></a>加载参数</h3><h4 id="节点启动后加载参数"><a href="#节点启动后加载参数" class="headerlink" title="节点启动后加载参数"></a>节点启动后加载参数</h4><p><code>ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param load /Organization ./Organization.yaml</span><br></pre></td></tr></table></figure><p>返回如下表示加载成功:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-load-Organization-Organization-yaml.png" alt="Parameters-ros2-param-load-Organization-Organization-yaml" style="zoom:67%;"></p><h4 id="节点启动前加载参数"><a href="#节点启动前加载参数" class="headerlink" title="节点启动前加载参数"></a>节点启动前加载参数</h4><p><code>ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_with_parameters_node --ros-args --params-file ./Organization.yaml </span><br></pre></td></tr></table></figure><p>请读者尝试自行获取一下当前的<code>NumOfEachPerson</code>值作为练习.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——手把手编写一个服务</title>
    <link href="http://www.fanziqi.site/posts/fa9bc3ba.html"/>
    <id>http://www.fanziqi.site/posts/fa9bc3ba.html</id>
    <published>2021-10-03T07:00:00.000Z</published>
    <updated>2021-10-03T07:00:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——手把手教你编写一个服务"><a href="#ROS2——手把手教你编写一个服务" class="headerlink" title="ROS2——手把手教你编写一个服务"></a>ROS2——手把手教你编写一个服务</h1><h2 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h2><p>上一篇文章讲的话题通信是基于订阅/发布机制的，无论有没有订阅者，发布者都会周期发布数据，这种模式适合持续数据的收发，比如传感器数据。机器人系统中还有另外一些配置性质的数据，并不需要周期处理，此时就要用到另外一种ROS通信方式——服务（Service）。服务是基于客户端/服务器模型的通信机制，服务器端只在接收到客户端请求时才会提供反馈数据。  </p><p>服务有着以下特点:</p><ul><li><p>同一个服务（名称相同）有且只能有一个节点来提供</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Service-SingleServiceClient.gif" alt="Service-SingleServiceClient" style="zoom:67%;"></p></li><li><p>同一个服务可以被多个客户端调用(可以一对一也可一对多)</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Service-MultipleServiceClient.gif" alt="Service-MultipleServiceClient" style="zoom:67%;"></p></li></ul><p>下面, 我们将从一个实例出发, 手把手写一段服务程序</p><h2 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h2><p>来看一个案例: (以下均使用<code>-er</code>表示名词, 虽然没有这个词)</p><ul><li>有一些穷人<code>Poorer</code>和一个发放免费汉堡的爱心机构<code>Organization</code>.</li><li><code>Organization</code>总共有一定数量的汉堡. </li><li><code>Poorer</code>可以为家人代领汉堡, 家里有n个人, 就可以领取2n个汉堡.</li><li>当然, 还有一些有钱人<code>Richer</code>想蹭吃蹭喝, <code>Organization</code>不会给这些人发放食物</li><li>当汉堡发完了, <code>Organization</code>发出通知, 不再发放.</li></ul><p>以上案例实际上就实现了一个服务, <code>Organization</code>为服务端,  <code>Poorer</code>和<code>Richer</code>为客户端</p><h2 id="自定义服务接口"><a href="#自定义服务接口" class="headerlink" title="自定义服务接口"></a>自定义服务接口</h2><p>上一篇文章我们自定义了话题接口, 服务与话题不同, 服务是双向的, 所以要定义来回两个数据类型</p><h3 id="编辑-srv文件"><a href="#编辑-srv文件" class="headerlink" title="编辑.srv文件"></a>编辑.srv文件</h3><p>cd到工作空间的<code>/src</code>文件夹下, 新建接口包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br><span class="line">ros2 pkg create service_interfaces --build-type ament_cmake </span><br></pre></td></tr></table></figure><p>cd进入<code>service_interfaces</code>文件夹, 新建<code>Organization.srv</code>文件(首字母要求大写)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir srv</span><br><span class="line">touch srv/Organization.srv</span><br></pre></td></tr></table></figure><p>编辑<code>Organization.srv</code></p><p>来回两个数据中间用<code>---</code>分隔开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 是穷人还是富人</span><br><span class="line">string status</span><br><span class="line"># 家里的人数</span><br><span class="line">uint32 num_of_people</span><br><span class="line">---</span><br><span class="line"># 是否发出成功</span><br><span class="line"><span class="keyword">bool</span> success</span><br><span class="line"># 发出的汉堡数量</span><br><span class="line">uint32 num_of_hamburger</span><br></pre></td></tr></table></figure><h3 id="修改Cmakelist-txt"><a href="#修改Cmakelist-txt" class="headerlink" title="修改Cmakelist.txt"></a>修改Cmakelist.txt</h3><p>注意:<code>rosidl_generate_interfaces()</code>必须在 <code>ament_package()</code>前</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明srv文件所属的工程名字, 文件位置, 依赖DEPENDENCIES</span></span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;srv/Calculate.srv&quot;</span></span><br><span class="line">  DEPENDENCIES </span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="修改package-xml"><a href="#修改package-xml" class="headerlink" title="修改package.xml"></a>修改package.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rosidl_default_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编译并刷新环境变量"><a href="#编译并刷新环境变量" class="headerlink" title="编译并刷新环境变量"></a>编译并刷新环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select service_interfaces</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="详细查看接口"><a href="#详细查看接口" class="headerlink" title="详细查看接口"></a>详细查看接口</h3><p>要想详细查看接口, 可以使用<code>ros2 interface</code>命令, 前面的博客已经讲过, 不再赘述</p><h2 id="服务程序实现"><a href="#服务程序实现" class="headerlink" title="服务程序实现"></a>服务程序实现</h2><p>下面来编写这段程序</p><h3 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a>新建工作空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ros2_ws/src</span><br><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br></pre></td></tr></table></figure><p><code>mkdir -p</code>: 递归创建目录,即使上级目录不存在,会按目录层级自动创建目录</p><h3 id="新建功能包"><a href="#新建功能包" class="headerlink" title="新建功能包"></a>新建功能包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create poor_and_organization --build-type ament_cmake --dependencies rclcpp service_interfaces</span><br></pre></td></tr></table></figure><p>使用<code>ament_cmake</code>作为编译类型, 并使用依赖<code>rclcpp</code>和前文定义的<code>service_interfaces</code>接口包</p><p>在<code>ros2_ws/src/poor_and_organization/src</code>下创建<code>Poor.cpp</code>和<code>Organization.cpp</code></p><h3 id="编写服务端节点"><a href="#编写服务端节点" class="headerlink" title="编写服务端节点"></a>编写服务端节点</h3><p>直接献出程序, 每句都有注释, 看不懂你打我</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类节点，名字叫做Organization,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span> :</span> <span class="keyword">public</span> rclcpp::Node </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化汉堡总数NumOfAll为100</span></span><br><span class="line">    <span class="built_in">Organization</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Organization&quot;</span>), <span class="built_in">NumOfAll</span>(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 热心组织的自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我们是热心组织, 我们只给poorer发汉堡.&quot;</span>);</span><br><span class="line">        <span class="comment">// 实例化回调组, 作用为避免死锁(请自行百度ROS2死锁)</span></span><br><span class="line">        callback_group_organization = <span class="keyword">this</span>-&gt;<span class="built_in">create_callback_group</span>(rclcpp::CallbackGroupType::MutuallyExclusive);</span><br><span class="line">        <span class="comment">// 实例化发汉堡的的服务</span></span><br><span class="line">        Organization_Server = <span class="keyword">this</span>-&gt;create_service&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>,</span><br><span class="line">                                    std::<span class="built_in">bind</span>(&amp;Organization::organization_callback,<span class="keyword">this</span>,_1,_2),</span><br><span class="line">                                    rmw_qos_profile_services_default,</span><br><span class="line">                                    callback_group_organization);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 剩余汉堡总数</span></span><br><span class="line">    <span class="keyword">size_t</span> NumOfAll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个服务回调组</span></span><br><span class="line">    rclcpp::CallbackGroup::SharedPtr callback_group_organization;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个服务端</span></span><br><span class="line">    rclcpp::Service&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Organization_Server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个回调函数，当收到要汉堡请求时调用该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">organization_callback</span><span class="params">(<span class="keyword">const</span> service_interfaces::srv::Calculate::Request::SharedPtr request,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">const</span> service_interfaces::srv::Calculate::Response::SharedPtr response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 首先判断是不是穷人</span></span><br><span class="line">        <span class="keyword">if</span>(request-&gt;status == <span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印Poorer家的人数</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个来自%s的请求，他家有%d个人.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">            <span class="comment">// 计算应给汉堡数量，每人两个</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> NumOfRequired = request-&gt;num_of_people*<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 检查剩余汉堡够不够分</span></span><br><span class="line">            <span class="keyword">if</span>(NumOfRequired &gt; NumOfAll)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 不够分了, 返回false</span></span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;当前汉堡库里只剩%d个汉堡啦! 已经不够分了, 请明日再来.&quot;</span>, NumOfRequired);</span><br><span class="line">                response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 够分, 更新剩余汉堡数量</span></span><br><span class="line">                NumOfAll -= NumOfRequired;</span><br><span class="line">                <span class="comment">// 返回给几个汉堡</span></span><br><span class="line">                response-&gt;num_of_hamburger = NumOfRequired;</span><br><span class="line">                <span class="comment">// 成功送出, 返回true</span></span><br><span class="line">                response-&gt;success = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功送出%d个汉堡~ 还剩余%d个汉堡&quot;</span>, NumOfRequired, NumOfAll);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 富人不给汉堡, 同样返回false, 同时返回送出汉堡数量为0</span></span><br><span class="line">            response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            response-&gt;num_of_hamburger = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个非法请求，这人是个%s, 不满足送汉堡资格.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Organization&gt;();</span><br><span class="line">    <span class="comment">// 把节点的执行器变成多线程执行器, 避免死锁</span></span><br><span class="line">    rclcpp::executors::MultiThreadedExecutor exector;</span><br><span class="line">    exector.<span class="built_in">add_node</span>(node);</span><br><span class="line">    exector.<span class="built_in">spin</span>();</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写客户端Poor节点"><a href="#编写客户端Poor节点" class="headerlink" title="编写客户端Poor节点"></a>编写客户端Poor节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类节点，名字叫做Poorer,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poorer</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Poorer</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印一句自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我是一个来领汉堡的人.&quot;</span>);</span><br><span class="line">        <span class="comment">// 实例化客户端, 指明客户端的接口类型，同时指定要请求的服务的名称Calculate.</span></span><br><span class="line">        Poorer_Client = <span class="keyword">this</span>-&gt;create_client&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">take_hamburger</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;现在去领取汉堡&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//构造请求</span></span><br><span class="line">        <span class="keyword">auto</span> request = std::make_shared&lt;service_interfaces::srv::Calculate::Request&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待服务端上线</span></span><br><span class="line">        <span class="keyword">while</span> (!Poorer_Client-&gt;<span class="built_in">wait_for_service</span>(<span class="number">1</span>s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等待时检测rclcpp的状态</span></span><br><span class="line">            <span class="keyword">if</span> (!rclcpp::<span class="built_in">ok</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 检测到Ctrl+C直接退出</span></span><br><span class="line">                <span class="built_in">RCLCPP_ERROR</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;等待被打断, 不等了&quot;</span>);</span><br><span class="line">                rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则一直等</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;等待热心组织开门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入参数格式错误的时候报错并退出程序</span></span><br><span class="line">        <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_ERROR</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;输入格式错误, 格式为: 什么人 几口人. 例如: ros2 run poor_and_organization Poor_node Poorer 3&quot;</span>);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 格式正确, 获取参数, 放入request中</span></span><br><span class="line">            request-&gt;status =             argv[<span class="number">1</span>];</span><br><span class="line">            request-&gt;num_of_people = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我是%s, 我家有%d个人&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送异步请求，然后等待返回，返回时调用回调函数</span></span><br><span class="line">        Poorer_Client-&gt;<span class="built_in">async_send_request</span>(request, std::<span class="built_in">bind</span>(&amp;Poorer::poorer_callback, <span class="keyword">this</span>, _1));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 创建一个客户端</span></span><br><span class="line">    rclcpp::Client&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Poorer_Client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建接收到小说的回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">poorer_callback</span><span class="params">(rclcpp::Client&lt;service_interfaces::srv::Calculate&gt;::SharedFuture response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用response的get()获取</span></span><br><span class="line">        <span class="keyword">auto</span> result = response.<span class="built_in">get</span>();</span><br><span class="line">        <span class="comment">// 如果确实是Poorer, 则领取成功</span></span><br><span class="line">        <span class="keyword">if</span>(result-&gt;success == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功领取%d个汉堡&quot;</span>, result-&gt;num_of_hamburger);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是Poorer或者汉堡数量不够, 则领取失败</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;领取汉堡失败, 原因可能为: 1.你不是Poorer 2.汉堡不够了&quot;</span>);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 产生一个Poorer的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Poorer&gt;();</span><br><span class="line">    node-&gt;<span class="built_in">take_hamburger</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 运行节点，并检测rclcpp状态</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(service_interfaces REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Poor_node src/Poor.cpp)</span><br><span class="line">ament_target_dependencies(Poor_node rclcpp service_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Organization_node src/Organization.cpp)</span><br><span class="line">ament_target_dependencies(Organization_node rclcpp service_interfaces)</span><br></pre></td></tr></table></figure><p>将编译好的文件安装到<code>install/poor_and_organization/lib/poor_and_organization</code>下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Poor_node</span><br><span class="line">  Organization_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h3><p>同样地, 新建功能包的时候没有加<code>--dependencies rclcpp service_interfaces</code>等功能包, 则需要手动添加, 放置于<code>&lt;package&gt;</code>标签下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>rclcpp<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>service_interfaces<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可自行修改下面这些声明, 与实现功能无关, 但是最好写全</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;fanziqi@fanziqi.site&quot;</span>&gt;</span>fanziqi<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO: License declaration<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select poor_and_organization</span><br></pre></td></tr></table></figure><p>刷新环境</p><p>前文应该已经echo了环境, 如果没有, 请添加<code>echo &quot;source /ros2_ws/install/setup.zsh&quot; &gt;&gt; ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>新建一个终端窗口, 运行Organization服务端节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行Poor客户端节点</p><p>第一个参数为节点名称<code>Poor_node</code>, 第二个参数为人员类型<code>Poorer</code>, 第三个参数为家里人数<code>5</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 5</span><br></pre></td></tr></table></figure><p>此时应该可以看见: </p><p>Organization服务端: 成功发出10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-1.png" alt="Organization-1" style="zoom:67%;"></p><p>Poor客户端: 成功领取10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-1.png" alt="Poor-1" style="zoom:67%;"></p><p>也可以手动发布客户端一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call /Calculate service_interfaces/srv/Calculate <span class="string">&quot;&#123;num_of_people: 40, status: &#x27;Poorer&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>Poor客户端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-2.png" alt="Poor-2" style="zoom:67%;"></p><p>Organization服务端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-2.png" alt="Organization-2" style="zoom:67%;"></p><p>此时如果再申请20个汉堡, 会发生什么呢?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 10</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示领取失败</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-3.png" alt="Poor-3" style="zoom:67%;"></p><p>Organization服务端: 提示不够分了</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-3.png" alt="Organization-3" style="zoom:67%;"></p><p>这时候有一个Richer来骗汉堡吃</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Richer 1</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示领取失败</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-4.png" alt="Poor-4" style="zoom:67%;"></p><p>Organization服务端: 就算有汉堡也不分给Richer</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-4.png" alt="Organization-4" style="zoom:67%;"></p><p>这时, Organization关门下班了(Ctrl+C关闭Organization_Node节点)</p><p>又来了一个人想要领汉堡:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 2</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示等待开门, 不想等待的话直接按Ctrl+C退出</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-5.png" alt="Poor-5" style="zoom:67%;"></p><p>经验证, 需求全部实现~</p><h2 id="服务常用命令"><a href="#服务常用命令" class="headerlink" title="服务常用命令"></a>服务常用命令</h2><p>使用 <code>ros2 service</code></p><h3 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service list</span><br></pre></td></tr></table></figure><p>具体点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service list -t</span><br></pre></td></tr></table></figure><h3 id="查看服务的接口"><a href="#查看服务的接口" class="headerlink" title="查看服务的接口"></a>查看服务的接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service <span class="built_in">type</span> &lt;service_name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看接口的服务"><a href="#查看接口的服务" class="headerlink" title="查看接口的服务"></a>查看接口的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service find &lt;type_name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看服务接口类型"><a href="#查看服务接口类型" class="headerlink" title="查看服务接口类型"></a>查看服务接口类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show ***/srv/***</span><br></pre></td></tr></table></figure><h3 id="手动调用服务"><a href="#手动调用服务" class="headerlink" title="手动调用服务"></a>手动调用服务</h3><p>前文使用过, 还记得吗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call &lt;service_name&gt; &lt;service_type&gt; &lt;arguments&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——什么是接口</title>
    <link href="http://www.fanziqi.site/posts/333442d9.html"/>
    <id>http://www.fanziqi.site/posts/333442d9.html</id>
    <published>2021-10-02T05:00:00.000Z</published>
    <updated>2021-10-02T13:01:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——什么是接口"><a href="#ROS2——什么是接口" class="headerlink" title="ROS2——什么是接口"></a>ROS2——什么是接口</h1><h2 id="接口简介"><a href="#接口简介" class="headerlink" title="接口简介"></a>接口简介</h2><p>在机器人系统中, 往往有许许多多的硬件, 比如摄像头, 激光雷达, 每一个硬件发送的数据/数据类型是不同的, 那么ROS2是如何使用这些数据的呢?</p><p>前文<code>KFC</code>和<code>Hamburger</code>中我们使用过这些定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line">...</span><br><span class="line">&lt;std_msgs::msg::String&gt;</span><br><span class="line">&lt;std_msgs::msg::UInt32&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>std_msgs</code>是ROS2内置的一个接口功能包. </p><p>查看某一个接口包下所有的接口: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface package std_msgs</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-package-std_msgs.png" alt="ros2-interface-package-std_msgs" style="zoom:67%;"></p><p>当然, 这些内置接口也许不能满足你的需求, 此时就可以自定义接口.</p><h2 id="自定义接口"><a href="#自定义接口" class="headerlink" title="自定义接口"></a>自定义接口</h2><p>针对ROS2的通信方式, 接口可以分为:</p><ul><li><p>话题接口</p><p>文件名: <code>*.msg</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int64 num</span><br></pre></td></tr></table></figure><p>This is your custom message that transfers a single 64-bit integer called <code>num</code>.</p></li><li><p>服务接口</p><p>文件名:<code>*.srv</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int64 a</span><br><span class="line">int64 b</span><br><span class="line">int64 c</span><br><span class="line">---</span><br><span class="line">int64 sum</span><br></pre></td></tr></table></figure><p>This is your custom service that requests three integers named <code>a</code>, <code>b</code>, and <code>c</code>, and responds with an integer called <code>sum</code>.</p></li><li><p>动作接口</p><p>文件名:<code>*.action</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int32 order</span><br><span class="line">---</span><br><span class="line">int32[] sequence</span><br><span class="line">---</span><br><span class="line">int32[] partial_sequence</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义话题接口"><a href="#自定义话题接口" class="headerlink" title="自定义话题接口"></a>自定义话题接口</h3><p>前情提要: 前面的KFC实例中, KFC会定时发送一条广告话题, 如果要发送图片信息怎么办? 这就需要自定义KFC专属消息接口.</p><h4 id="编辑-msg文件"><a href="#编辑-msg文件" class="headerlink" title="编辑.msg文件"></a>编辑.msg文件</h4><p>cd到工作空间的<code>/src</code>文件夹下, 新建接口包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br><span class="line">ros2 pkg create topic_interfaces --build-type ament_cmake</span><br></pre></td></tr></table></figure><p>cd进入<code>topic_interfaces</code>文件夹, 新建<code>KFC.msg</code>文件(首字母要求大写)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir msg</span><br><span class="line">touch msg/KFC.msg</span><br></pre></td></tr></table></figure><p>编辑<code>KFC.msg</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 原始数据类型string</span><br><span class="line">string txt</span><br><span class="line"></span><br><span class="line"># 原始数据类型 uint32</span><br><span class="line">uint32 money</span><br><span class="line"></span><br><span class="line"># 图像消息，调用sensor_msgs下的Image类型</span><br><span class="line">sensor_msgs/Image image</span><br></pre></td></tr></table></figure><h4 id="修改Cmakelist-txt"><a href="#修改Cmakelist-txt" class="headerlink" title="修改Cmakelist.txt"></a>修改Cmakelist.txt</h4><p>注意:<code>rosidl_generate_interfaces()</code>必须在 <code>ament_package()</code>前</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这两句添加依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(sensor_msgs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明msg文件所属的工程名字, 文件位置, 依赖DEPENDENCIES</span></span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;msg/Ad.msg&quot;</span></span><br><span class="line">   DEPENDENCIES sensor_msgs</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h4 id="修改package-xml"><a href="#修改package-xml" class="headerlink" title="修改package.xml"></a>修改package.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>sensor_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rosidl_default_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编译并刷新环境变量"><a href="#编译并刷新环境变量" class="headerlink" title="编译并刷新环境变量"></a>编译并刷新环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select topic_interfaces</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="使用自定义话题接口修改KFC与Customer"><a href="#使用自定义话题接口修改KFC与Customer" class="headerlink" title="使用自定义话题接口修改KFC与Customer"></a>使用自定义话题接口修改KFC与Customer</h4><p>上代码! 请读者自行对比区别, <code>// CHANGE</code>为修改的地方</p><p>新建文件<code>Customer_with_interfaces.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="comment">// 这个头文件是topic_interfaces接口包编译后自动生成的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;topic_interfaces/msg/kfc.hpp&quot;</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CustomerNode</span>(std::string name) : <span class="built_in">Node</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好,我是一个%s.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">        sub_hamburger = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::hamburger_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        sub_advertisement = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::advertisement_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        hungry_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">1000</span>ms, std::<span class="built_in">bind</span>(&amp;CustomerNode::hungry_timer_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        pub_money = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        money.money = <span class="number">10</span>; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我饿了, 我要吃汉堡! 付款 %d 元&quot;</span>, money.money); <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    topic_interfaces::msg::KFC money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::TimerBase::SharedPtr hungry_timer;</span><br><span class="line"></span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_hamburger; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_advertisement; <span class="comment">// CHANGE</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hamburger_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我吃的 %s &quot;</span>, msg-&gt;txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我又饿了, 还想再吃一个! 付款 %d 元&quot;</span>, money.money); <span class="comment">// CHANGE</span></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我收到了一条广告: %s &quot;</span>, msg-&gt;txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;CustomerNode&gt;(<span class="string">&quot;Customer&quot;</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建文件<code>KFC_with_interfaces.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;topic_interfaces/msg/kfc.hpp&quot;</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFCNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KFCNode</span>(std::string name) : <span class="built_in">Node</span>(name), <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我是%s的服务员.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line">        </span><br><span class="line">        pub_hamburger = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        pub_advertisement = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        advertisement_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">5000</span>ms, std::<span class="built_in">bind</span>(&amp;KFCNode::advertisement_timer_callback, <span class="keyword">this</span>));</span><br><span class="line">        </span><br><span class="line">        sub_money = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;KFCNode::money_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line">    rclcpp::TimerBase::SharedPtr advertisement_timer;</span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_hamburger; <span class="comment">// CHANGE</span></span><br><span class="line">    </span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_advertisement; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> str_advertisement = topic_interfaces::msg::<span class="built_in">KFC</span>(); <span class="comment">// CHANGE</span></span><br><span class="line">        str_advertisement.txt = <span class="string">&quot;大鸡腿降价啦&quot;</span>; <span class="comment">// CHANGE</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;KFC发布了一个广告:%s&quot;</span>, str_advertisement.txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">        pub_advertisement-&gt;<span class="built_in">publish</span>(str_advertisement);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">money_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msg-&gt;money == <span class="number">10</span>) <span class="comment">// CHANGE</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收款 %d 元&quot;</span>, msg-&gt;money); <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> str_hamburger_num = topic_interfaces::msg::<span class="built_in">KFC</span>(); <span class="comment">// CHANGE</span></span><br><span class="line">            str_hamburger_num.txt = <span class="string">&quot;第&quot;</span> + std::<span class="built_in">to_string</span>(count++) + <span class="string">&quot;个汉堡&quot;</span>; <span class="comment">// CHANGE</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我卖出的%s&quot;</span>, str_hamburger_num.txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">            </span><br><span class="line">            pub_hamburger-&gt;<span class="built_in">publish</span>(str_hamburger_num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;KFCNode&gt;(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改Cmakelist.txt, 添加/修改: </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(topic_interfaces REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Customer_with_interfaces_node src/Customer_with_interfaces.cpp)</span><br><span class="line">ament_target_dependencies(Customer_with_interfaces_node rclcpp topic_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(KFC_with_interfaces_node src/KFC_with_interfaces.cpp)</span><br><span class="line">ament_target_dependencies(KFC_with_interfaces_node rclcpp topic_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Customer_node</span><br><span class="line">  KFC_node</span><br><span class="line">  Customer_with_interfaces_node</span><br><span class="line">  KFC_with_interfaces_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改package.xml, 添加: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>topic_interfaces<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译并刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select customer_and_kfc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>开启两个终端, 分别运行使用自定义接口的KFC与Customer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc Customer_with_interfaces_node</span><br><span class="line">ros2 run customer_and_kfc KFC_with_interfaces_node</span><br></pre></td></tr></table></figure><p>成功~</p><h4 id="详细查看接口"><a href="#详细查看接口" class="headerlink" title="详细查看接口"></a>详细查看接口</h4><p>要想详细查看接口, 可以使用<code>ros2 interface</code>命令</p><ol><li><p>查看包下所有接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface package topic_interfaces</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-package-topic-interfaces.png" alt="ros2-interface-package-topic-interfaces" style="zoom:67%;"></p></li><li><p>查看内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show topic_interfaces/msg/Ad</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-show-topic-interfaces-msg-Ad.png" alt="ros2-interface-show-topic-interfaces-msg-Ad" style="zoom:67%;"></p></li><li><p>显示属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface proto topic_interfaces/msg/Ad</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-proto-topic-interfaces-msg-Ad.png" alt="ros2-interface-proto-topic-interfaces-msg-Ad" style="zoom:67%;"></p></li></ol><h3 id="自定义服务接口"><a href="#自定义服务接口" class="headerlink" title="自定义服务接口"></a>自定义服务接口</h3><p>自定义服务接口将在下一篇文章讲解服务时一起讲解.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——手把手编写一个话题</title>
    <link href="http://www.fanziqi.site/posts/7d4be8c5.html"/>
    <id>http://www.fanziqi.site/posts/7d4be8c5.html</id>
    <published>2021-10-01T14:00:00.000Z</published>
    <updated>2021-10-01T14:40:59.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——手把手教你编写一个话题"><a href="#ROS2——手把手教你编写一个话题" class="headerlink" title="ROS2——手把手教你编写一个话题"></a>ROS2——手把手教你编写一个话题</h1><h2 id="话题简介"><a href="#话题简介" class="headerlink" title="话题简介"></a>话题简介</h2><p>ROS2将复杂的机器人系统拆解成许多模块节点，而这些节点之间则是通过一个至关重要的通道完成数据交换的，这个通道就是“话题”。</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-1-1.gif" alt="ros2-topic-1-1" style="zoom: 67%;"></p><p>一个节点可以通过多个话题向外发布数据，也可以同时订阅多个其他节点发布的话题，相当于话题是一个多对多的订阅/发布模型。</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-n-n.gif" alt="ros2-topic-n-n" style="zoom: 67%;"></p><p>可见，话题是节点之间实现数据传输的重要途径，也是机器人各个子系统之间交换数据的重要方式。 </p><p>下面, 我们将从一个实例出发, 手把手写一段话题程序</p><h2 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h2><p>来看一个案例: </p><ul><li>有一家<code>KFC</code>和一个饥肠辘辘的<code>Customer</code>.</li><li><code>Customer</code>给<code>KFC</code>10元钱就能买到一个汉堡, 这个<code>Customer</code>饿得很快, 每秒都要吃一个汉堡. </li><li><code>KFC</code>收到<code>Customer</code>发来的10元钱, 向<code>Customer</code>发送汉堡, 为了推销大鸡腿, 每5秒发布一条广告.</li></ul><p>以上案例实际上就实现了一个话题, <code>KFC</code>和<code>Customer</code>是两个节点<code>Node</code>, 付钱/发送汉堡/发送广告即为发布者, 收钱/接收汉堡/收取广告即为订阅者.</p><p>下面来编写这段程序</p><h2 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a>新建工作空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ros2_ws/src</span><br><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br></pre></td></tr></table></figure><p><code>mkdir -p</code>: 递归创建目录,即使上级目录不存在,会按目录层级自动创建目录</p><h2 id="新建功能包"><a href="#新建功能包" class="headerlink" title="新建功能包"></a>新建功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create customer_and_kfc --build-type ament_cmake --dependencies rclcpp std_msgs</span><br></pre></td></tr></table></figure><p>使用<code>ament_cmake</code>作为编译类型, 并使用依赖<code>rclcpp</code>和<code>std_msgs</code></p><p>在<code>ros2_ws/src/customer_and_kfc/src</code>下创建<code>KFC.cpp</code>和<code>Customer.cpp</code></p><h2 id="编写KFC节点"><a href="#编写KFC节点" class="headerlink" title="编写KFC节点"></a>编写KFC节点</h2><p>直接献出程序, 每句都有注释, 看不懂你打我</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rclcpp库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="comment">// 基本消息类型库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样在下文可以使用1000ms这种表示方式</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占位符,下面会详细说</span></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个类节点，起名叫做KFCNode,继承自Node,这样就能使用Node所有的功能了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFCNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数,第一个参数为节点名称, 并初始化count为1</span></span><br><span class="line">    <span class="built_in">KFCNode</span>(std::string name) : <span class="built_in">Node</span>(name), <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印KFC的自我介绍</span></span><br><span class="line">      <span class="comment">// c_str()函数是string类的一个函数，作用是把string类型转化为char类型(%s要求是一个字符串)</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我是%s的服务员.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建发布者, 发布hamburger, 发布的消息类型为&lt;std_msgs::msg::String&gt;</span></span><br><span class="line">      <span class="comment">// 格式: 发布者名字 = this-&gt;create_publisher&lt;要发布的话题类型&gt;(&quot;要发布的话题名称&quot;, 通信Qos);</span></span><br><span class="line">        pub_hamburger = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::String&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建发布者, 发布advertisement</span></span><br><span class="line">        pub_advertisement = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::String&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建定时器,每5000ms发布一个广告</span></span><br><span class="line">      <span class="comment">// 格式: 定时器名字 = his-&gt;create_wall_timer(1000ms, std::bind(&amp;定时器回调函数, this));</span></span><br><span class="line">        advertisement_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">5000</span>ms, std::<span class="built_in">bind</span>(&amp;KFCNode::advertisement_timer_callback, <span class="keyword">this</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订阅者,订阅money</span></span><br><span class="line">      <span class="comment">// 格式: 订阅者名字 = this-&gt;create_subscription&lt;要订阅的话题类型&gt;(&quot;要订阅的话题名称&quot;, 通信Qos, std::bind(&amp;订阅者回调函数, this, _1));</span></span><br><span class="line">      <span class="comment">// std::bind()是干啥的呢? 举个例子: </span></span><br><span class="line">      <span class="comment">// auto f = std::bind(fun, placeholders::_2, placeholders::_1, 80);</span></span><br><span class="line">      <span class="comment">// f(60,70) 等效于 fun(70, 60, 80) </span></span><br><span class="line">      <span class="comment">// 还记得前文提到的占位符吗,placeholders::_1 就是f(60,70) 中的那个参数&quot;1&quot;</span></span><br><span class="line">        sub_money = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::UInt32&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;KFCNode::money_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 定义一个汉堡售出计数器</span></span><br><span class="line">  <span class="comment">// 在32位系统中size_t是4字节的，在64位系统中，size_t是8字节的，这样利用该类型可以增加程序移植性。</span></span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个定时器</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr advertisement_timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于发布汉堡</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr pub_hamburger;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于收钱</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::UInt32&gt;::SharedPtr sub_money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于发布广告</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr pub_advertisement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广告定时器回调函数(无参数)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">// 定义一个String类型的字符串, 其中字符串存在.data中, %s使用时别忘了使用.c_str()转换为char类型.</span></span><br><span class="line">        <span class="keyword">auto</span> str_advertisement = std_msgs::msg::<span class="built_in">String</span>();</span><br><span class="line">        str_advertisement.data = <span class="string">&quot;大鸡腿降价啦&quot;</span>;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;KFC发布了一个广告:%s&quot;</span>, str_advertisement.data.<span class="built_in">c_str</span>());</span><br><span class="line">        pub_advertisement-&gt;<span class="built_in">publish</span>(str_advertisement);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收钱订阅者回调函数(有参数, 参数类型跟上面订阅者订阅的参数类型相同, 注意要加上::SharedPtr, 因为传进来的是一个指针)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">money_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::UInt32::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 如果收到了十元钱,才发布汉堡. 订阅的信息在msg-&gt;data中</span></span><br><span class="line">        <span class="keyword">if</span>(msg-&gt;data == <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收款 %d 元&quot;</span>, msg-&gt;data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符串流</span></span><br><span class="line">            <span class="keyword">auto</span> str_hamburger_num = std_msgs::msg::<span class="built_in">String</span>();</span><br><span class="line">            str_hamburger_num.data = <span class="string">&quot;第&quot;</span> + std::<span class="built_in">to_string</span>(count++) + <span class="string">&quot;个汉堡&quot;</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我卖出的%s&quot;</span>, str_hamburger_num.data.<span class="built_in">c_str</span>());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发布字符串流</span></span><br><span class="line">          <span class="comment">// 发布就这么写 &quot;发布器-&gt;publish(要发布的);&quot;, 简单吧</span></span><br><span class="line">            pub_hamburger-&gt;<span class="built_in">publish</span>(str_hamburger_num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化rclcpp</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 产生一个KFC的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;KFCNode&gt;(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">  <span class="comment">// spin函数: 一旦进入spin函数，相当于它在自己的函数里面死循环了。只要回调函数队列里面有callback函数在，它就会马上去执行callback函数。如果没有的话，它就会阻塞，不会占用CPU。注意不要再spin后面放其他东西, 他们都不会执行的</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">  <span class="comment">// 检测退出信号(ctrl+c)</span></span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写Customer节点"><a href="#编写Customer节点" class="headerlink" title="编写Customer节点"></a>编写Customer节点</h2><p>此段程序与上面相同的语句不再解释, 请读者自行类比</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样就能使用1000ms这种表示方式</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符</span></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个类节点，名字叫做CustomerNode,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数,第一个参数为节点名称</span></span><br><span class="line">    <span class="built_in">CustomerNode</span>(std::string name) : <span class="built_in">Node</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印Customer的自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好,我是一个%s.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建订阅者,订阅hamburger</span></span><br><span class="line">        <span class="comment">// 占位符还记得吗? 复习一下, 此处的_1 表示const std_msgs::msg::String::SharedPtr msg</span></span><br><span class="line">        sub_hamburger = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::String&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::hamburger_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订阅者,订阅advertisement</span></span><br><span class="line">        sub_advertisement = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::String&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::advertisement_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建定时器,每1000ms饿一次</span></span><br><span class="line">        hungry_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">1000</span>ms, std::<span class="built_in">bind</span>(&amp;CustomerNode::hungry_timer_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建发布者,发布money</span></span><br><span class="line">        pub_money = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::UInt32&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 给money赋值</span></span><br><span class="line">        money.data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次给钱</span></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我饿了, 我要吃汉堡! 付款 %d 元&quot;</span>, money.data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 新建一张钱</span></span><br><span class="line">    std_msgs::msg::UInt32 money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个定时器</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr hungry_timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于订阅发出的汉堡</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr sub_hamburger;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于给KFC钱</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::UInt32&gt;::SharedPtr pub_money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于订阅广告</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr sub_advertisement;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 汉堡订阅者回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hamburger_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::String::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我吃的 %s &quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 饥饿定时器回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我又饿了, 还想再吃一个! 付款 %d 元&quot;</span>, money.data);</span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广告订阅者回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::String::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我收到了一条广告: %s &quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化rclcpp</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">//产生一个Customer的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;CustomerNode&gt;(<span class="string">&quot;Customer&quot;</span>);</span><br><span class="line">    <span class="comment">//运行节点，并检测退出信号</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h2><p>如果新建功能包的时候没有加<code>--dependencies rclcpp std_msgs</code>等功能包, 则需要手动添加: (任意位置均可)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(std_msgs REQUIRED)</span><br></pre></td></tr></table></figure><p>下面两对代码的作用是: </p><p><code>add_executable()</code> 让编译器编译<code>Customer.cpp</code>和<code>KFC.cpp</code>这两个文件. 并生成可执行文件<code>Customer_node</code>和<code>KFC_node</code></p><p><code>ament_target_dependencies</code> 添加编译的依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(Customer_node src/Customer.cpp)</span><br><span class="line">ament_target_dependencies(Customer_node rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(KFC_node src/KFC.cpp)</span><br><span class="line">ament_target_dependencies(KFC_node rclcpp std_msgs)</span><br></pre></td></tr></table></figure><p>将编译好的文件安装到<code>install/customer_and_kfc/lib/customer_and_kfc</code>下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Customer_node</span><br><span class="line">  KFC_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h2><p>同样地, 新建功能包的时候没有加<code>--dependencies rclcpp std_msgs</code>等功能包, 则需要手动添加, 放置于<code>&lt;package&gt;</code>标签下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>rclcpp<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可自行修改下面这些声明, 与实现功能无关, 但是最好写全</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;fanziqi@fanziqi.site&quot;</span>&gt;</span>fanziqi<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO: License declaration<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select customer_and_kfc </span><br></pre></td></tr></table></figure><p>刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /ros2_ws/install/setup.zsh&quot;</span> &gt;&gt; ~/.bashrc  </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>新建一个终端窗口, 运行Customer节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc Customer_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行KFC节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc KFC_node</span><br></pre></td></tr></table></figure><p>此时应该可以看见: </p><p>Customer端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-Customer.png" alt="ROS2-Customer"></p><p>KFC端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-KFC.png" alt="ROS2-KFC"></p><p>经验证, 需求全部实现~</p><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="rqt-graph"><a href="#rqt-graph" class="headerlink" title="rqt_graph"></a>rqt_graph</h3><p>使用<code>rqt_graph</code>这个工具可以可视化显示节点和话题的连接关系</p><p>另起一个终端, 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-rqt_graph.png" alt="ROS2-rqt_graph" style="zoom:67%;"></p><p>上图清晰地展示了ROS计算图的网络形态, 可以清楚地看出一个节点的输入和输出是什么.</p><h3 id="ros2-topic"><a href="#ros2-topic" class="headerlink" title="ros2 topic"></a>ros2 topic</h3><h4 id="查看系统中所有话题"><a href="#查看系统中所有话题" class="headerlink" title="查看系统中所有话题"></a>查看系统中所有话题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-list.png" alt="ros2-topic-list" style="zoom:67%;"></p><p>想具体查看每个话题传输的数据类型, 则添加<code>-t</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list -t</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-list-t.png" alt="ros2-topic-list-t" style="zoom:67%;"></p><h4 id="输出实时话题内容"><a href="#输出实时话题内容" class="headerlink" title="输出实时话题内容"></a>输出实时话题内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic <span class="built_in">echo</span> /hamburger </span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-echo-hamburger.png" alt="ros2-topic-echo-hamburger" style="zoom:67%;"></p><h4 id="查看主题信息"><a href="#查看主题信息" class="headerlink" title="查看主题信息"></a>查看主题信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic info /hamburger</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-info-hamburger.png" alt="ros2-topic-info-hamburger" style="zoom:67%;"></p><h4 id="查看话题的数据类型"><a href="#查看话题的数据类型" class="headerlink" title="查看话题的数据类型"></a>查看话题的数据类型</h4><p>节点之间要想成功建立数据传输，必须发布和订阅同样数据类型的消息，发布者发布的是速度指令，订阅者想订阅位置信息可是行不通的。</p><p>上文用<code>ros2 topic list -t</code>查看得知, <code>/advertisement</code>的类型为<code>std_msgs/msg/String</code></p><p>通过如下指令查看这个数据类型的具体数据结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show std_msgs/msg/String</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-show.png" alt="ros2-interface-show" style="zoom:67%;"></p><p>可以看到, <code>std_msgs/msg/String</code>中包含了<code>string data</code></p><h4 id="发布一个话题消息"><a href="#发布一个话题消息" class="headerlink" title="发布一个话题消息"></a>发布一个话题消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /test_topic std_msgs/msg/String <span class="string">&#x27;data: &quot;123&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-pub-test-topic.png" alt="ros2-topic-pub-test-topic" style="zoom:67%;"></p><h4 id="查看某一个话题的发布频率"><a href="#查看某一个话题的发布频率" class="headerlink" title="查看某一个话题的发布频率"></a>查看某一个话题的发布频率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic hz /hamburger</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-hz-hamburger.png" alt="ros2-topic-hz-hamburger" style="zoom:67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>固定Ubuntu下的端口号</title>
    <link href="http://www.fanziqi.site/posts/408ef5ae.html"/>
    <id>http://www.fanziqi.site/posts/408ef5ae.html</id>
    <published>2021-09-07T08:00:00.000Z</published>
    <updated>2021-09-07T06:41:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="固定Ubuntu下的端口号"><a href="#固定Ubuntu下的端口号" class="headerlink" title="固定Ubuntu下的端口号"></a>固定Ubuntu下的端口号</h1><p>Ubuntu下ttyUSB0和ttyUSB1经常不固定,序号取决于插入顺序,先插上的序号小</p><p>固定步骤如下:</p><ol><li><p>查看已插入的USB设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure><p>找到对应的USB设备,记下该设备的设备ID,如<code>10c4:ea60</code>,如果不确定是哪个的话,就拔下usb设备运行一次<code>lsusb</code>,再插上,多出来的就是需要设置的设备.</p></li><li><p>修改<code>rules.d</code>下的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/udev/rules.d</span><br><span class="line"><span class="comment">#新建.rules文件,名称任意</span></span><br><span class="line">touch usb.rules</span><br><span class="line"><span class="comment">#或直接编辑后保存</span></span><br><span class="line">sudo vi usb.rules</span><br></pre></td></tr></table></figure></li><li><p>打开刚刚新建的文件,添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==<span class="string">&quot;ttyUSB*&quot;</span>, ATTRS&#123;idVendor&#125;==<span class="string">&quot;10c4&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;ea60&quot;</span>, MODE:=<span class="string">&quot;0777&quot;</span>, SYMLINK+=<span class="string">&quot;YOUR_NAME&quot;</span></span><br></pre></td></tr></table></figure><p>其中,SYMLINK任意起名</p><p>退出vi编辑器,<code>wq</code>保存退出</p></li><li><p>重启udev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service udev reload</span><br><span class="line">service udev restart</span><br></pre></td></tr></table></figure></li><li><p>重新插拔USB设备,查看端口号绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev |grep ttyUSB</span><br></pre></td></tr></table></figure><p>显示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx  1 root   root           7 Nov 29 14:03 YOUR_NAME -&gt; ttyUSB0</span><br></pre></td></tr></table></figure><p>打开设备时，用（/dev/YOUR_NAME）即可。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
    <category term="Ubuntu" scheme="http://www.fanziqi.site/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人学习——TF坐标变换</title>
    <link href="http://www.fanziqi.site/posts/5b37128a.html"/>
    <id>http://www.fanziqi.site/posts/5b37128a.html</id>
    <published>2021-09-04T08:00:00.000Z</published>
    <updated>2021-09-07T06:42:55.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS机器人学习——TF坐标变换"><a href="#ROS机器人学习——TF坐标变换" class="headerlink" title="ROS机器人学习——TF坐标变换"></a>ROS机器人学习——TF坐标变换</h1><h2 id="什么是TF"><a href="#什么是TF" class="headerlink" title="什么是TF"></a>什么是TF</h2><p><a href="http://wiki.ros.org/tf">tf-wiki</a></p><blockquote><p>tf is a package that lets the user keep track of multiple coordinate frames over time. tf maintains the relationship between coordinate frames in a tree structure buffered in time, and lets the user transform points, vectors, etc between any two coordinate frames at any desired point in time.</p></blockquote><p>将多个坐标系联系起来,使用tf树定义不同坐标系之间的平移与旋转变换关系，并且持续追踪多个坐标系内的变化情况。</p><h2 id="为什么需要坐标变换"><a href="#为什么需要坐标变换" class="headerlink" title="为什么需要坐标变换?"></a>为什么需要坐标变换?</h2><p>在ROS中定义了许多坐标系，有机器人坐标系(base_link)，有雷达坐标系(base_laser)，地图坐标系(map)，里程计坐标系(odom)等。以机器人中心为原点的坐标系，称为base_link坐标系，以激光雷达中心为原点的坐标系，称为base_laser坐标系。以下图机器人与激光雷达为例</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros-tf-1.png" alt="ros-tf-1"></p><p>机器人在运行过程中，激光雷达可以采集到周围障碍物的数据，这些数据是以激光雷达为原点(base_laser参考系)下的测量值。如果我们想使用这些数据帮助机器人完成避障功能，由于激光雷达并不在机器人的中心(base_link)之上，会始终存在一个雷达与机器人中心的偏差值。这个时候，如果我们采用一种坐标变换，将激光数据从base_laser参考系变换到base_link参考下，问题就解决了。所以我们需要定义这两个坐标系之间的变换关系,也就是<strong>TF坐标变换</strong></p><h2 id="TF变换实例"><a href="#TF变换实例" class="headerlink" title="TF变换实例"></a>TF变换实例</h2><p>在 <a href="https://www.fanziqi.site/posts/b6e9d4e.html">麦克纳姆轮运动学解算</a> 一文中,我提到了ROS的坐标系统与单位制,这里不再累述,请读者自行阅读</p><p>以机器人四轮与地面的接触面为X-Y平面，四轮轴心连线的点做垂线，与x-y平面的交点为base_link坐标系原点，车头朝向方向为X轴，正左方向为Y轴，向上为Z轴。如图所示:</p><p><strong>TODO:添加图片</strong></p><p>以思岚激光雷达为例，我们一般在安装时都习惯将雷达不带线的一端朝车头方向，雷达USB端的朝车尾方向,如图所示:</p><p><strong>TODO:添加图片</strong></p><p>雷达正中心为坐标原点，USB端的方向为X轴正方向，正左方向为Y轴，向上为Z轴。</p><p>测量雷达中心相对机器人坐标原点(0,0,0)的距离，得到雷达在机器人坐标系中(x:0.1,y:0.0,z:0.2)。前面我们提到，思岚雷达的X轴正方向与机器人的X轴正方向为相反方向，雷达坐标系需要绕Z轴顺时针旋转180度才能与机器人base_link坐标系重合 ，旋转(yaw:3.14,roll:0,pitch:0)。</p><p>根据这些数据，当我们获取激光数据后，采用(x: 0.1m, y: 0.0m, z: 0.2m, yaw:3.14, roll:0, pitch:0)的坐标变换，就可以将数据从base_laser参考系变换到base_link参考系，这就定义出了两个参考系之间的变换关系。</p><p>为了定义和存储base_link和base_laser两个参考系之间的关系，我们需要将他们添加到tf树中。从树的概念上来讲，tf树中的每个节点都对应一个参考系，而节点之间的边对应于参考系之间的变换关系。tf就是使用这样的树结构，保证每两个参考系之间只有一种遍历方式，而且所有变换关系，都是母节点到子节点的变换。</p><p>为了定义参考系，我们需要定义两个节点，一个对应于base_link参考系，一个对应于base_laser参考系。为了创建两个节点之间的边，我们首先需要决定哪一个节点作为母节点，哪一个节点作为子节点，这一点在tf树中是非常重要的。这里我们选择base_link作为母节点，这样会方便后边为机器人添加更多的传感器作为子节点.</p><h2 id="发布TF变换"><a href="#发布TF变换" class="headerlink" title="发布TF变换"></a>发布TF变换</h2><p>我们最常使用的是tf包中的static_transform_publisher，它即可在命令行直接运行，也可写在launch文件中配置坐标转换关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;node pkg=<span class="string">&quot;tf&quot;</span> type=<span class="string">&quot;static_transform_publisher&quot;</span> name=<span class="string">&quot;base_link_to_laser&quot;</span> args=<span class="string">&quot;0.065 0.0 0.245 1.57 0.0 0.0 /base_link /lidar 50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>pkg：包名，tf</li><li>type：类型，static_transform_publisher</li><li>name：名称，自定，便于理解</li><li>arg：tf参数， x y z yaw pitch roll frame_id child_frame_id period_in_ms<ul><li>x y z 分别代表着相应轴的平移，单位是 米。</li><li>yaw pitch roll 分别代表着绕z y x 三个轴的转动，单位是 弧度。</li><li>frame_id 为坐标系变换中的父坐标系， child_frame_id为坐标系变换中的子坐标系。(传感器的frame_id的名称根据厂商或有不同，一般在驱动启动launch可查看，思岚激光雷达的frame_id为/lidar)</li><li>period_in_ms 为发布频率，单位为 毫秒。通常取100。一毫秒为一秒的千分之一，100毫秒即为0.1秒，也就是10Hz。</li></ul></li></ul><h2 id="TF常用工具"><a href="#TF常用工具" class="headerlink" title="TF常用工具"></a>TF常用工具</h2><ul><li><p>tf_monitor 打印tf树中所有参考系信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf_monitor &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure></li><li><p>tf_echo 查看指定作消息之间的变换关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf_echo &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure></li><li><p>static_transform_publisher 发布两个参考系之间的的静态坐标关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static_transform_publisher x y z yaw pitch roll frame id child frame id period</span><br></pre></td></tr></table></figure></li><li><p>view_frame 可视化的调试工具,可以生成pdf文件显示tf树信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun tf view_frames</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/autolabor/article/details/86492895">https://blog.csdn.net/autolabor/article/details/86492895</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>麦克纳姆轮运动学解算</title>
    <link href="http://www.fanziqi.site/posts/b6e9d4e.html"/>
    <id>http://www.fanziqi.site/posts/b6e9d4e.html</id>
    <published>2021-09-01T15:00:00.000Z</published>
    <updated>2021-09-02T02:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="麦克纳姆轮运动学解算"><a href="#麦克纳姆轮运动学解算" class="headerlink" title="麦克纳姆轮运动学解算"></a>麦克纳姆轮运动学解算</h1><h2 id="一、麦克纳姆轮介绍"><a href="#一、麦克纳姆轮介绍" class="headerlink" title="一、麦克纳姆轮介绍"></a>一、麦克纳姆轮介绍</h2><p>了解过Robomaster的同学都知道，RM战车所用的轮子均为麦克纳姆轮，这种轮子安装方式与普通轮子无异，可安装于平行轴上，但是麦克纳姆轮可以实现全向移动，即<strong>前后运动</strong>、<strong>水平移动</strong>、<strong>绕中心自转</strong>。正因为以上优点，许多工业上的全向移动平台都会应用这种轮子。缺点也有，就是不耐磨，需要定期更换。</p><p>麦克纳姆轮由两部分组成：<strong>轮毂</strong>和<strong>辊子</strong>，轮毂为轮子的主体，辊子为轮毂周围的类似椭球体的小轮子，轮毂和辊子都有自己的轴，且轮毂轴与辊子轴夹角为45°（可以为其他角度但45°角最为常见）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-1.png" alt="ML-1" style="zoom: 25%;"></p><p>麦轮的安装方式也有讲究，虽然都是同轴安装，但与普通轮子不同，麦轮分为左旋和右旋两种，在一个四轮底盘上需要用两个左旋和两个右旋。安装方式为O型，如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-2.png" alt="ML-2"></p><p>左图为安装后你看到的样子，右图为四个轮子与地面接触的辊子围成的形状，也就是“O形”</p><p><strong>这里的O形指的是与地面接触的辊子围成的形状噢，不要再问为什么左图看起来是个X了</strong></p><h2 id="二、麦克纳姆轮运动学模型"><a href="#二、麦克纳姆轮运动学模型" class="headerlink" title="二、麦克纳姆轮运动学模型"></a>二、麦克纳姆轮运动学模型</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h3><h4 id="1-1-坐标系统"><a href="#1-1-坐标系统" class="headerlink" title="1.1 坐标系统"></a>1.1 坐标系统</h4><p>在ROS机器人中，坐标系统使用右手定义</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-3.png" alt="ML-3"></p><p>对于ROS机器人，如果以它为坐标系的原点，那么</p><ul><li>x轴：前方</li><li>y轴：左方</li><li>z轴：上方</li></ul><p>如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-4.png" alt="ML-4"></p><p>除此之外，对于旋转运动，也使用右手定义：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-5.png" alt="ML-5" style="zoom:150%;"></p><p>根据<strong>右手定义</strong>，围绕 <strong>z轴正旋转</strong> 是 <strong>逆时针旋转</strong></p><h4 id="1-2-测量单位"><a href="#1-2-测量单位" class="headerlink" title="1.2 测量单位"></a>1.2 测量单位</h4><p>ROS使用公制 ：</p><ul><li>线速度：<code>m/s</code></li><li>角速度：<code>rad/s</code></li></ul><h4 id="1-3-轮子序号定义"><a href="#1-3-轮子序号定义" class="headerlink" title="1.3 轮子序号定义"></a>1.3 轮子序号定义</h4><p>左前<strong>1</strong> 右前<strong>2</strong></p><p>左后<strong>3</strong> 右后<strong>4</strong></p><h3 id="2-逆运动学解析"><a href="#2-逆运动学解析" class="headerlink" title="2. 逆运动学解析"></a>2. 逆运动学解析</h3><p>逆运动学模型（inverse kinematic model）得到的公式可以根据底盘的运动状态解算出四个轮子的速度。</p><h4 id="2-1-底盘运动的分解"><a href="#2-1-底盘运动的分解" class="headerlink" title="2.1 底盘运动的分解"></a>2.1 底盘运动的分解</h4><p>刚体在平面内的运动可以分解为三个独立分量：X轴平动、Y轴平动、yaw 轴自转。底盘的运动也可以分解为三个量：</p><p>如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-6.PNG" alt="ML-6"></p><ul><li>$v_{tx}$ 表示 X 轴运动的速度，即前后方向，定义向前为正；</li><li>$v_{ty}$ 表示 Y 轴运动的速度，即左右方向，定义向左为正；</li><li>$\overrightarrow{\omega}$ 表示 yaw 轴自转的角速度，定义逆时针为正。</li></ul><h4 id="2-2-计算轮子轴心位置的速度"><a href="#2-2-计算轮子轴心位置的速度" class="headerlink" title="2.2 计算轮子轴心位置的速度"></a>2.2 计算轮子轴心位置的速度</h4><p>如下图所示，以右前轮为例，蓝色的方框代表轮子，定义以下变量：</p><ul><li>$\overrightarrow{r}$为从底盘中心指向轮子轴心的矢量；</li><li>$\overrightarrow{v}$为轮子轴心的速度矢量；</li><li>$\overrightarrow{v_r}$为轮子轴心沿垂直于$\overrightarrow{r}$的方向（即切线方向）的速度分量；</li></ul><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-7.PNG" alt="ML-7" style="zoom: 67%;"></p><p>可以计算出：</p><script type="math/tex; mode=display">\begin{align*}\overrightarrow{v} &= \overrightarrow{v_t}+\overrightarrow{v_r} \\ &= \overrightarrow{v_t}+\overrightarrow{\omega}\times\overrightarrow{r}\end{align*}</script><p>将$\overrightarrow{r}$分解为$r_x$和$r_y$，分别计算轮子轴心在X、Y轴的速度分量：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_x=v_{tx}+\omega\cdot{r_y} \\ v_y=v_{ty}+\omega\cdot{r_x}\end{matrix}\right.</script><p>其他三个轮子同理</p><h4 id="2-3计算与地面接触的辊子速度"><a href="#2-3计算与地面接触的辊子速度" class="headerlink" title="2.3计算与地面接触的辊子速度"></a>2.3计算与地面接触的辊子速度</h4><p>由2.2算得的轮子轴心速度，可以分解为沿辊子轴方向的$\overrightarrow{v_\parallel}$ 和垂直辊子轴方向的 $\overrightarrow{v_\perp}$ ，如图所示</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-8.PNG" alt="ML-8" style="zoom:50%;"></p><p>其中$\overrightarrow{v_\perp}$用于让辊子空转，可以忽略</p><p>定义一个沿辊子方向的单位矢量$\hat{e}$，对于右前轮来说，$\hat{e}=\frac{1}{\sqrt{2}}\cdot\hat{i}+\frac{1}{\sqrt{2}}\cdot\hat{j}$</p><p>则沿轴线的速度为$\overrightarrow{v}$在$\hat{e}$方向的投影：</p><script type="math/tex; mode=display">\begin{align*} \overrightarrow{v_\parallel}&=\overrightarrow{v}\cdot\hat{e} \\  &=(v_x\cdot\hat{i}+v_y\cdot\hat{j})\cdot(\frac{1}{\sqrt{2}}\cdot\hat{i}+\frac{1}{\sqrt{2}}\cdot\hat{j}) \\  &= \frac{1}{\sqrt{2}}v_x+\frac{1}{\sqrt{2}}v_y\end{align*}</script><h4 id="2-4-计算轮子的转速（和地面接触点的线速度）"><a href="#2-4-计算轮子的转速（和地面接触点的线速度）" class="headerlink" title="2.4 计算轮子的转速（和地面接触点的线速度）"></a>2.4 计算轮子的转速（和地面接触点的线速度）</h4><p>如图所示，轮子转速为$v_w$</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-9.PNG" alt="ML-9" style="zoom:50%;"></p><p>由于辊子与轮轴呈45°角，则$v_\omega$可求得：</p><script type="math/tex; mode=display">\begin{align*} v_w&=\frac{v_\parallel}{cos45^{\circ}} \\  &=\sqrt{2}(\frac{1}{\sqrt{2}}v_x+\frac{1}{\sqrt{2}}v_y) \\  &= v_x+v_y\end{align*}</script><p>将2.2求出的$\left\{\begin{matrix}<br>v_x=v_{tx}+\omega\cdot{r_y} \\<br>v_y=v_{ty}+\omega\cdot{r_x}<br>\end{matrix}\right.$带入上式，可求出此轮的转速：</p><script type="math/tex; mode=display">v_w=v_{tx}+v_{ty}+\omega(r_x+r_y)</script><p>结合以上四个步骤，可以根据底盘运动状态解算出四个轮子的转速：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_{w1}=v_{tx}-v_{ty}-\omega(r_x+r_y)\\ v_{w2}=v_{tx}+v_{ty}+\omega(r_x+r_y)\\ v_{w3}=v_{tx}+v_{ty}-\omega(r_x+r_y)\\ v_{w4}=v_{tx}-v_{ty}+\omega(r_x+r_y)\end{matrix}\right.</script><p>以上方程组就是O形麦轮底盘的逆运动学模型。</p><h4 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_RESOLUTION      1440.0   <span class="comment">//编码器分辨率, 轮子转一圈，编码器产生的脉冲数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHEEL_DIAMETER          0.058    <span class="comment">//轮子直径,单位：米</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D_X                     0.18     <span class="comment">//底盘Y轴上两轮中心的间距</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D_Y                     0.25     <span class="comment">//底盘X轴上两轮中心的间距</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PID_RATE                50       <span class="comment">//PID调节PWM值的频率</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> pulse_per_meter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> rx_plus_ry_cali = <span class="number">0.3</span>;</span><br><span class="line"><span class="keyword">double</span> angular_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">double</span> linear_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">double</span> angular_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数作用：运动学解析参数初始化</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//轮子转动一圈，移动的距离为轮子的周长WHEEL_DIAMETER*3.1415926，编码器产生的脉冲信号为ENCODER_RESOLUTION。则电机编码器转一圈产生的脉冲信号除以轮子周长可得轮子前进1m的距离所对应编码器计数的变化</span></span><br><span class="line">    pulse_per_meter = (<span class="keyword">float</span>)(ENCODER_RESOLUTION/(WHEEL_DIAMETER*<span class="number">3.1415926</span>))/linear_correction_factor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> r_x = D_X/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">float</span> r_y = D_Y/<span class="number">2</span>;</span><br><span class="line">    rx_plus_ry_cali = (r_x + r_y)/angular_correction_factor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数作用：逆向运动学解析，底盘三轴速度--&gt;轮子速度</span></span><br><span class="line"><span class="comment">  * @输入：机器人三轴速度 m/s</span></span><br><span class="line"><span class="comment">  * @输出：电机应达到的目标速度（一个PID控制周期内，电机编码器计数值的变化）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Inverse</span><span class="params">(<span class="keyword">int16_t</span>* input, <span class="keyword">int16_t</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> v_tx   = (<span class="keyword">float</span>)input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">float</span> v_ty   = (<span class="keyword">float</span>)input[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">float</span> omega = (<span class="keyword">float</span>)input[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> v_w[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">v_w[<span class="number">0</span>] = v_tx - v_ty - (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">1</span>] = v_tx + v_ty + (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">2</span>] = v_tx + v_ty - (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">3</span>] = v_tx - v_ty + (r_x + r_y)*omega;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算一个PID控制周期内，电机编码器计数值的变化</span></span><br><span class="line">output[<span class="number">0</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">0</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">1</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">1</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">2</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">2</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">3</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-正运动学解析"><a href="#3-正运动学解析" class="headerlink" title="3. 正运动学解析"></a>3. 正运动学解析</h3><h4 id="3-1-正运动学模型"><a href="#3-1-正运动学模型" class="headerlink" title="3.1 正运动学模型"></a>3.1 正运动学模型</h4><p>正运动学模型（forward kinematic model）让我们可以通过四个轮子的速度，计算出底盘的运动状态。可以直接根据逆运动学模型中的三个方程解出来，比如：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_{tx}=\frac{v_4+v_3}{2}\\ v_{ty}=\frac{v_3-v_1}{2}\\ \omega=\frac{v_2-v_3}{2(r_x+r_y)}\end{matrix}\right.</script><p>转换为底盘坐标系下对时间求积分即为里程计变化量</p><h4 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_MAX 32767        </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_MIN -32768 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_LOW_WRAP  ((ENCODER_MAX - ENCODER_MIN)*0.3+ENCODER_MIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_HIGH_WRAP ((ENCODER_MAX - ENCODER_MIN)*0.7+ENCODER_MIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量定义</span></span><br><span class="line"><span class="keyword">int32_t</span>  wheel_turns[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int32_t</span>  encoder_sum_current[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数功能：正向运动学解析，轮子编码值-&gt;底盘三轴里程计坐标</span></span><br><span class="line"><span class="comment">  * @输入：编码器累加值</span></span><br><span class="line"><span class="comment">  * @输出：三轴里程计 x y yaw</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Forward</span><span class="params">(<span class="keyword">int16_t</span>* input, <span class="keyword">int16_t</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> dv_w_times_dt[<span class="number">4</span>]; <span class="comment">//轮子瞬时变化量dxw=dvw*dt</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> dv_t_times_dt[<span class="number">3</span>]; <span class="comment">//底盘瞬时变化量dxt=dvt*dt</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int16_t</span> encoder_sum[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将左面轮子编码器累加值乘以-1，以计算前进的距离</span></span><br><span class="line">encoder_sum[<span class="number">0</span>] = -input[<span class="number">0</span>];</span><br><span class="line">encoder_sum[<span class="number">1</span>] = input[<span class="number">1</span>];</span><br><span class="line">encoder_sum[<span class="number">2</span>] = -input[<span class="number">2</span>];</span><br><span class="line">encoder_sum[<span class="number">3</span>] = input[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码器计数溢出处理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(encoder_sum[i] &lt; ENCODER_LOW_WRAP &amp;&amp; encoder_sum_current[i] &gt; ENCODER_HIGH_WRAP)</span><br><span class="line">wheel_turns[i]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(encoder_sum[i] &gt; ENCODER_HIGH_WRAP &amp;&amp; encoder_sum_current[i] &lt; ENCODER_LOW_WRAP)</span><br><span class="line">wheel_turns[i]--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">wheel_turns[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将编码器数值转化为前进的距离，单位m</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dv_w_times_dt[i] = <span class="number">1.0</span>*(encoder_sum[i] + wheel_turns[i]*(ENCODER_MAX-ENCODER_MIN)-encoder_sum_current[i])/pulse_per_meter;</span><br><span class="line">encoder_sum_current[i] = encoder_sum[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要计算坐标所以变回来</span></span><br><span class="line">dv_w_times_dt[<span class="number">0</span>] = -dv_w_times_dt[<span class="number">0</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">1</span>] =  dv_w_times_dt[<span class="number">1</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">2</span>] = -dv_w_times_dt[<span class="number">2</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">3</span>] =  dv_w_times_dt[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算底盘坐标系(base_link)下x轴、y轴变化距离m与Yaw轴朝向变化rad 一段时间内的变化量</span></span><br><span class="line">dv_t_times_dt[<span class="number">0</span>] = ( dv_w_times_dt[<span class="number">3</span>] + dv_w_times_dt[<span class="number">2</span>])/<span class="number">2.0</span>;</span><br><span class="line">dv_t_times_dt[<span class="number">1</span>] = ( dv_w_times_dt[<span class="number">2</span>] - dv_w_times_dt[<span class="number">0</span>])/<span class="number">2.0</span>;</span><br><span class="line">dv_t_times_dt[<span class="number">2</span>] = ( dv_w_times_dt[<span class="number">1</span>] - dv_w_times_dt[<span class="number">2</span>])/(<span class="number">2</span>*wheel_track_cali);</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分计算里程计坐标系(odom_frame)下的机器人X,Y,Yaw轴坐标</span></span><br><span class="line"><span class="comment">//dx = ( vx*cos(theta) - vy*sin(theta) )*dt</span></span><br><span class="line"><span class="comment">//dy = ( vx*sin(theta) + vy*cos(theta) )*dt</span></span><br><span class="line">output[<span class="number">0</span>] += (<span class="keyword">int16_t</span>)(<span class="built_in">cos</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">0</span>] - <span class="built_in">sin</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">1</span>] += (<span class="keyword">int16_t</span>)(<span class="built_in">sin</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">0</span>] + <span class="built_in">cos</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">2</span>] += (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">2</span>]*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Yaw轴坐标变化范围控制-2Π -&gt; 2Π</span></span><br><span class="line"><span class="keyword">if</span>(output[<span class="number">2</span>] &gt; PI)</span><br><span class="line">output[<span class="number">2</span>] -= <span class="number">2</span>*PI;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(output[<span class="number">2</span>] &lt; -PI)</span><br><span class="line">output[<span class="number">2</span>] += <span class="number">2</span>*PI;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送机器人X轴y轴Yaw轴瞬时变化量，在ROS端除以时间</span></span><br><span class="line">output[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">0</span>]);</span><br><span class="line">output[<span class="number">4</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">5</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>【1】<a href="https://zhuanlan.zhihu.com/p/20282234">https://zhuanlan.zhihu.com/p/20282234</a></p><p>【2】<a href="https://blog.csdn.net/shixiaolu63/article/details/78496457">https://blog.csdn.net/shixiaolu63/article/details/78496457</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Chrome多设备书签同步方案</title>
    <link href="http://www.fanziqi.site/posts/a53da602.html"/>
    <id>http://www.fanziqi.site/posts/a53da602.html</id>
    <published>2021-08-30T15:15:00.000Z</published>
    <updated>2021-09-01T14:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chrome多设备书签同步方案"><a href="#Chrome多设备书签同步方案" class="headerlink" title="Chrome多设备书签同步方案"></a>Chrome多设备书签同步方案</h1><p>众所周知因为某些原因Chrome无法与它的服务器正常通讯,这就影响到了我们书签的同步,这里介绍一个插件,将书签同步到GitHub或GItee上.</p><p>项目地址: ↓ </p><p><a href="https://github.com/CLDeveloping/chrome-bookmark">Github项目</a> | <a href="https://gitee.com/CLCoding/chrome-bookmark">Gitee项目</a></p><ul><li>将项目整个下载下来,解压缩,在浏览器地址栏输入：<code>chrome://extensions/</code>，进入扩展程序管理界面</li><li>点击【加载已解压的扩展程序】-&gt; 选择项目根目录，导入源码文件夹</li><li>这里只介绍GitHub操作.进入自己的GitHub创建一个私有项目,随便命名</li><li>获取Github项目<a href="https://github.com/settings/tokens">私有访问Token</a>（如何获取：Github -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token）选择repo,时间选无限,将生成的token拷贝下来,这个只会出现一次,最好拿小本本记下来</li><li>点击书签工具配置,将仓库地址和token填入,选择保存配置</li><li>重新点击书签图标工具，就可以选择上传或者下载书签了</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Chrome" scheme="http://www.fanziqi.site/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>MPU6050-DMP读不出数据</title>
    <link href="http://www.fanziqi.site/posts/bfa5a820.html"/>
    <id>http://www.fanziqi.site/posts/bfa5a820.html</id>
    <published>2021-08-30T04:00:00.000Z</published>
    <updated>2021-08-30T04:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MPU6050-DMP读不出数据"><a href="#MPU6050-DMP读不出数据" class="headerlink" title="MPU6050-DMP读不出数据"></a>MPU6050-DMP读不出数据</h1><p>遇上一个很头疼的问题，MPU6050可以正常读取三个轴的数据，但是使用DMP方式读取数据时，会卡在这一句上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Get a packet. */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mpu_read_fifo_stream</span>(dmp.packet_length, fifo_data, more))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>进入此函数，通过逐句debug，发现卡在这一句上了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!st.chip_cfg.dmp_on)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>问题来了，这说的是dmp没有打开啊？？可是前面命名已经使能了DMP</p><p>于是打开百度，同样问题的解答有以下几点</p><ul><li>MPU6050供电问题，经检查确实为3.3V，故排除</li><li>FIFO没有使能，经检查也有使能，排除</li></ul><p>嘶 那问题出在哪呢</p><p><strong>MPU6050不讲武德，它坏了</strong></p><p><strong>换一个芯片就好了</strong></p><p><strong>RNM退钱！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/tags/stm32/"/>
    
  </entry>
  
</feed>
