<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>范子琦的博客</title>
  
  
  <link href="http://www.fanziqi.site/atom.xml" rel="self"/>
  
  <link href="http://www.fanziqi.site/"/>
  <updated>2021-11-14T14:18:57.049Z</updated>
  <id>http://www.fanziqi.site/</id>
  
  <author>
    <name>Fan Ziqi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>范子琦第二次作业</title>
    <link href="http://www.fanziqi.site/posts/337c96c3.html"/>
    <id>http://www.fanziqi.site/posts/337c96c3.html</id>
    <published>2021-10-14T14:00:00.000Z</published>
    <updated>2021-11-14T14:18:57.049Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第二次作业"><a href="#第二次作业" class="headerlink" title="第二次作业"></a>第二次作业</h1><p><strong>范子琦 2019330301153 机器人工程(1)班</strong></p><p>下文坐标系定义原则: $\left\{\begin{matrix}<br>x_i\parallel z_{i-1}\\<br>x_i\perp z_{i-1}<br>\end{matrix}\right.$​</p><p>图注:</p><ol><li><p>相同颜色为同一坐标系, 绿色虚线为延长线</p></li><li><p>有尺寸的以数字表示, 无尺寸的参照图中定义</p></li></ol><h2 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h2><p>平面三连杆机械臂的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test1.jpeg" alt="test1" style="zoom:50%;"></p><p>由上图坐标系配置可求得平面三连杆机械臂的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*+90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$2$</td><td style="text-align:left">$0$</td><td>$L_1+{d_2}^*$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*$</td><td>$0$</td><td>$L_3$</td><td>$0$​</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 d2 t3 L1 L3</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([<span class="number">0</span>       L1+d2      <span class="number">0</span>        -<span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">1</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3      <span class="number">0</span>          L3        <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;Three&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 d2 t3])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix}cos(\theta_1 + \theta_3) & -sin(\theta_1 + \theta_3) & 0 & L_3*cos(\theta_1 + \theta_3) + d_2*sin(\theta_1) \\ sin(\theta_1 + \theta_3) &  cos(\theta_1 + \theta_3) & 0 & L_3*sin(\theta_1 + \theta_3) - d_2*cos(\theta_1) \\            0 &             0 & 1 &                            0 \\            0 &             0 & 0 &                            1 \end{bmatrix}</script><h2 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h2><p>PUMA260的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test2.jpeg" alt="test2" style="zoom:50%;"></p><p>由上图坐标系配置可求得PUMA260的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*$</td><td>$13$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$2$</td><td style="text-align:left">${\theta_2}^*$</td><td>$-d_2$</td><td>$8$</td><td>$0$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*+90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$4$</td><td style="text-align:left">${\theta_4}^*$</td><td>$8$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$5$</td><td style="text-align:left">${\theta_5}^*-90$</td><td>$0$</td><td>$0$</td><td>$90$</td></tr><tr><td>$6$</td><td style="text-align:left">${\theta_6}^*$</td><td>$d_6$</td><td>$0$</td><td>$0$</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 t2 t3 t4 t5 t6 d2 d6</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1      <span class="number">13</span>         <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([t2      -d2        <span class="number">8</span>         <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">4</span>)=Link([t4      <span class="number">8</span>          <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">5</span>)=Link([t5-<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">0</span>          <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">6</span>)=Link([t6      d6         <span class="number">0</span>         <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;PUMA260&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 t2 t3 t4 t5 t6])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix} - sin(\theta_6)*(cos(\theta_4)*sin(\theta_1) - sin(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) - cos(\theta_6)*(cos(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) + sin(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2)))& sin(\theta_6)*(cos(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) + sin(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2))) - cos(\theta_6)*(cos(\theta_4)*sin(\theta_1) - sin(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3)))& cos(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2)) - sin(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3)))& 8*cos(\theta_1)*cos(\theta_2) + d_2*sin(\theta_1) - d_6*(sin(\theta_5)*(sin(\theta_1)*sin(\theta_4) + cos(\theta_4)*(cos(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_1)*cos(\theta_2)*cos(\theta_3))) - cos(\theta_5)*(cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + cos(\theta_1)*cos(\theta_3)*sin(\theta_2))) + 8*cos(\theta_1)*cos(\theta_2)*sin(\theta_3) + 8*cos(\theta_1)*cos(\theta_3)*sin(\theta_2)\\   sin(\theta_6)*(cos(\theta_1)*cos(\theta_4) + sin(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_6)*(cos(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2)))& cos(\theta_6)*(cos(\theta_1)*cos(\theta_4) + sin(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_6)*(cos(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) - sin(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2)))& sin(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2))& 8*cos(\theta_2)*sin(\theta_1) + d_6*(sin(\theta_5)*(cos(\theta_1)*sin(\theta_4) - cos(\theta_4)*(sin(\theta_1)*sin(\theta_2)*sin(\theta_3) - cos(\theta_2)*cos(\theta_3)*sin(\theta_1))) + cos(\theta_5)*(cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + cos(\theta_3)*sin(\theta_1)*sin(\theta_2))) - d_2*cos(\theta_1) + 8*cos(\theta_2)*sin(\theta_1)*sin(\theta_3) + 8*cos(\theta_3)*sin(\theta_1)*sin(\theta_2)\\                                                                                                                                                                sin(\theta_2 + \theta_3)*sin(\theta_4)*sin(\theta_6) - cos(\theta_6)*(cos(\theta_2 + \theta_3)*sin(\theta_5) + sin(\theta_2 + \theta_3)*cos(\theta_4)*cos(\theta_5))&                                                                                                                                                              sin(\theta_6)*(cos(\theta_2 + \theta_3)*sin(\theta_5) + sin(\theta_2 + \theta_3)*cos(\theta_4)*cos(\theta_5)) + sin(\theta_2 + \theta_3)*cos(\theta_6)*sin(\theta_4)&                                                                                                   cos(\theta_2 + \theta_3)*cos(\theta_5) - sin(\theta_2 + \theta_3)*cos(\theta_4)*sin(\theta_5)&                                                                                                                     8*cos(\theta_2 + \theta_3) - 8*sin(\theta_2) - (d_6*sin(\theta_2 + \theta_3)*sin(\theta_4 + \theta_5))/2 + d_6*cos(\theta_2 + \theta_3)*cos(\theta_5) + (d_6*sin(\theta_4 - \theta_5)*sin(\theta_2 + \theta_3))/2 + 13\\0&0&0&1\end{bmatrix}</script><h2 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h2><p>JAKA ZU3的坐标系定义如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/test3.jpeg" alt="test3" style="zoom:50%;"></p><p>由上图坐标系配置可求得JAKA ZU3的DH参数:</p><div class="table-container"><table><thead><tr><th>$i$</th><th style="text-align:left">$\theta_i$</th><th>$d_i$</th><th>$a_i$</th><th>$\alpha_i$</th></tr></thead><tbody><tr><td>$1$</td><td style="text-align:left">${\theta_1}^*$</td><td>$150.55$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$2$</td><td style="text-align:left">${\theta_2}^*-90$</td><td>$115$</td><td>$246$</td><td>$0$</td></tr><tr><td>$3$</td><td style="text-align:left">${\theta_3}^*$</td><td>$-116.3$</td><td>$190$</td><td>$0$</td></tr><tr><td>$4$</td><td style="text-align:left">${\theta_4}^*+90$</td><td>$117.5$</td><td>$0$</td><td>$90$</td></tr><tr><td>$5$</td><td style="text-align:left">${\theta_5}^*$</td><td>$117.5$</td><td>$0$</td><td>$-90$</td></tr><tr><td>$6$</td><td style="text-align:left">${\theta_6}^*+180$</td><td>$-105$</td><td>$0$</td><td>$180$</td></tr></tbody></table></div><p>MATLAB代码:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">syms t1 t2 t3 t4 t5 t6</span><br><span class="line"><span class="comment">%          theta   d          a         alpha     sigma</span></span><br><span class="line">L(<span class="number">1</span>)=Link([t1      <span class="number">150.55</span>     <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">2</span>)=Link([t2-<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">115</span>        <span class="number">246</span>       <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">3</span>)=Link([t3      <span class="number">-116.3</span>     <span class="number">190</span>       <span class="number">0</span>           <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">4</span>)=Link([t4+<span class="built_in">pi</span>/<span class="number">2</span> <span class="number">117.5</span>      <span class="number">0</span>         <span class="built_in">pi</span>/<span class="number">2</span>        <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">5</span>)=Link([t5      <span class="number">117.5</span>      <span class="number">0</span>         -<span class="built_in">pi</span>/<span class="number">2</span>       <span class="number">0</span>     ]);</span><br><span class="line">L(<span class="number">6</span>)=Link([t6+<span class="built_in">pi</span>   <span class="number">-105</span>       <span class="number">0</span>         <span class="number">180</span>         <span class="number">0</span>     ]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;JAKA-ZU3&#x27;</span>)</span><br><span class="line">T=robot.fkine([t1 t2 t3 t4 t5 t6])</span><br></pre></td></tr></table></figure><p>运动学正解矩阵:</p><script type="math/tex; mode=display">^0T_3=\begin{bmatrix} - cos(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_6), cos(180)*sin(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - sin(180)*(cos(\theta_5)*sin(\theta_1) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_1)*cos(\theta_6), sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_1)*cos(\theta_6) - sin(180)*sin(\theta_6)*(sin(\theta_1)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*cos(\theta_5)) - cos(180)*(cos(\theta_5)*sin(\theta_1) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5)), 246*cos(\theta_1)*cos(\theta_2) - (581*sin(\theta_1))/5 + 105*cos(\theta_5)*sin(\theta_1) - 190*cos(\theta_1)*sin(\theta_2)*sin(\theta_3) + 105*cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_1)*sin(\theta_5) + (235*cos(\theta_2 + \theta_3)*cos(\theta_1)*sin(\theta_4))/2 + (235*sin(\theta_2 + \theta_3)*cos(\theta_1)*cos(\theta_4))/2 + 190*cos(\theta_1)*cos(\theta_2)*cos(\theta_3)\\   cos(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) - sin(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_6), sin(180)*(cos(\theta_1)*cos(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5)) - cos(180)*sin(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) - sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_6)*sin(\theta_1), cos(180)*(cos(\theta_1)*cos(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5)) + sin(180)*sin(\theta_6)*(cos(\theta_1)*sin(\theta_5) + cos(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*sin(\theta_1)) + sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_6)*sin(\theta_1), (581*cos(\theta_1))/5 - 105*cos(\theta_1)*cos(\theta_5) + 246*cos(\theta_2)*sin(\theta_1) - 190*sin(\theta_1)*sin(\theta_2)*sin(\theta_3) + 105*cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_1)*sin(\theta_5) + (235*cos(\theta_2 + \theta_3)*sin(\theta_1)*sin(\theta_4))/2 + (235*sin(\theta_2 + \theta_3)*cos(\theta_4)*sin(\theta_1))/2 + 190*cos(\theta_2)*cos(\theta_3)*sin(\theta_1)\\                                     - cos(\theta_2 + \theta_3 + \theta_4)*sin(\theta_6) - sin(\theta_2 + \theta_3 + \theta_4)*cos(\theta_5)*cos(\theta_6),                                                                 sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*sin(\theta_5) - cos(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_6) + sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*cos(\theta_5)*sin(\theta_6),                                                                 cos(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_6) + sin(\theta_2 + \theta_3 + \theta_4)*cos(180)*sin(\theta_5) - sin(\theta_2 + \theta_3 + \theta_4)*sin(180)*cos(\theta_5)*sin(\theta_6),                                                                        (235*cos(\theta_2 + \theta_3)*cos(\theta_4))/2 - 246*sin(\theta_2) - (235*sin(\theta_2 + \theta_3)*sin(\theta_4))/2 - sin(\theta_5)*(105*cos(\theta_2 + \theta_3)*sin(\theta_4) + 105*sin(\theta_2 + \theta_3)*cos(\theta_4)) - 190*sin(\theta_2 + \theta_3) + 3011/20\\0,0,0,1\end{bmatrix}</script><p>运动学逆解</p><p>建立仿真环境</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">clear;clc;</span><br><span class="line">L(<span class="number">1</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">150.55</span>, <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,-<span class="built_in">pi</span>/<span class="number">2</span>, <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">115</span>,    <span class="string">&#x27;a&#x27;</span>,<span class="number">246</span>, <span class="string">&#x27;alpha&#x27;</span>,<span class="number">0</span>,     <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">-116.3</span>, <span class="string">&#x27;a&#x27;</span>,<span class="number">190</span>, <span class="string">&#x27;alpha&#x27;</span>,<span class="number">0</span>,     <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">4</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">117.5</span>,  <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,<span class="built_in">pi</span>/<span class="number">2</span>,  <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">5</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">117.5</span>,  <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,-<span class="built_in">pi</span>/<span class="number">2</span>, <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">L(<span class="number">6</span>)=Link(<span class="string">&#x27;d&#x27;</span>,<span class="number">-105</span>,   <span class="string">&#x27;a&#x27;</span>,<span class="number">0</span>,   <span class="string">&#x27;alpha&#x27;</span>,<span class="built_in">pi</span>,    <span class="string">&#x27;qlim&#x27;</span>,[-<span class="built_in">pi</span>,<span class="built_in">pi</span>]);</span><br><span class="line">robot=SerialLink(L,<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;JAKA-ZU3&#x27;</span>)</span><br></pre></td></tr></table></figure><p>第一组数据</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view(<span class="number">3</span>)</span><br><span class="line">robot.teach([<span class="number">0</span>+<span class="number">0</span> <span class="built_in">pi</span>/<span class="number">2</span>-<span class="built_in">pi</span> <span class="number">0</span>+<span class="number">0</span> <span class="built_in">pi</span>/<span class="number">2</span>+<span class="number">0</span> <span class="built_in">pi</span>+<span class="number">0</span> <span class="number">0</span>+<span class="built_in">pi</span>])</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2021-11-14%20%E4%B8%8B%E5%8D%8810.11.06.png" alt="截屏2021-11-14 下午10.11.06" style="zoom:50%;"></p><p>第二组数据</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">view(<span class="number">3</span>)</span><br><span class="line">robot.teach([<span class="number">30.906</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">72.993</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)-<span class="built_in">pi</span> <span class="number">-68.722</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">84.098</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">91.007</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="number">0</span> <span class="number">0.051</span>*(<span class="built_in">pi</span>/<span class="number">180</span>)+<span class="built_in">pi</span>])</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2021-11-14%20%E4%B8%8B%E5%8D%8810.09.30.png" alt="截屏2021-11-14 下午10.09.30" style="zoom:50%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Hexo部署至云服务器的宝塔面板</title>
    <link href="http://www.fanziqi.site/posts/6b69667c.html"/>
    <id>http://www.fanziqi.site/posts/6b69667c.html</id>
    <published>2021-10-04T10:40:00.000Z</published>
    <updated>2021-10-04T10:53:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Hexo部署至云服务器的宝塔面板"><a href="#Hexo部署至云服务器的宝塔面板" class="headerlink" title="Hexo部署至云服务器的宝塔面板"></a>Hexo部署至云服务器的宝塔面板</h1><blockquote><p>本文为网络转载, 版权属于：Heson</p><p>原文链接：<a href="https://www.heson10.com/posts/51315.html">https://www.heson10.com/posts/51315.html</a></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>hexo 博客部署方法有好多种，<code>github pages</code>、<code>gitee pages(pro)</code>、<code>vercel</code>，<code>cloudflare page</code>、<code>阿里云oss</code>、<code>腾讯存储桶</code>等等这些不需要购买服务器的部署方式。一般大部分都用以上方式部署自己的hexo博客，但也有少部分部署在<code>自己服务器</code>的同志。</p><p>新手部署服务器最常见的方法就是：直接把本地生成的<code>public</code>中的文件，直接ftp到服务器<code>www根目录</code>，简单粗暴。</p><p>还有一种更优雅地方式，那就是直接在服务器上搭建<code>git仓库</code>，hexo三连直接<code>deploy</code>上去（跟搭建在github pages上的方式一样）。</p><h2 id="为什么要部署至服务器？"><a href="#为什么要部署至服务器？" class="headerlink" title="为什么要部署至服务器？"></a>为什么要部署至服务器？</h2><p>个人感觉手头有闲置的网速较快的服务器，可以尝试部署至服务器。</p><p>比如我手头有一个<code>腾讯云香港二区 2核 4GB 5M的服务器。</code>对比了一下我放在又拍云cdn上的主站网速，可以看到：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-1.png" alt="hexo-bt-1"></p><p><strong>这速度可谓不相上下。</strong></p><p>相比起github pages的慢、coding pages的抽（移动宽带经常抽），服务器部署还是有一定优势的。</p><p>当然，如果域名<code>备案</code>了，手头没有闲置的<code>服务器</code>，还是建议嫖上国内的CDN（又拍云）。</p><h2 id="部署教程"><a href="#部署教程" class="headerlink" title="部署教程"></a>部署教程</h2><p>老样子，简单说下思路：</p><ul><li>服务器安装宝塔面板</li><li>创建git仓库，并配置git钩子，自动同步文件到网站目录</li><li>配置网站访问设置</li><li>本地<code>git deploy</code>设置</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.云服务安装宝塔面板</p><p>2.本地生成ssh秘钥备用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub的邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;GitHub的邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="连接服务器终端"><a href="#连接服务器终端" class="headerlink" title="连接服务器终端"></a>连接服务器终端</h3><p>宝塔面板用户可直接左侧导航栏<code>终端</code>登录（如图）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-2.png" alt="hexo-bt-2"></p><ul><li>切换到 <code>root</code> 账号</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>宝塔默认是root账号，注意看图：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-3.png" alt="hexo-bt-3"></p><ul><li>安装 <code>git</code></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="创建-Git-账户"><a href="#创建-Git-账户" class="headerlink" title="创建 Git 账户"></a>创建 Git 账户</h3><p>创建 Git 账户并赋予权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br><span class="line">chmod 740 /etc/sudoers</span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/sudoers</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>按<code>i</code>键进入编辑模式，找到<code>root ALL=(ALL) ALL</code>，在其下方加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git     ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-4.png" alt="hexo-bt-4"></p><p>输入完成后按<code>esc</code>，再输入<code>:wq</code>，保存退出。</p><p>更变<code>/etc/sudoers</code>权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p>设置 git 账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>输入密码，输入的时候是看不到任何显示的，输完回车即可。</p><p>切换至 <code>git 用户</code>，创建 <code>~/.ssh</code> 文件夹和 <code>~/.ssh/authorized_keys</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>同样<code>i</code>进入编辑模式，把之前本地准备的<code>id_rsa.pub</code>文件中的公钥复制进去，按<code>esc</code>后，输入<code>:wq</code>保存。<strong>(注意!!!!!!!!!!! 最后一行要加回车)</strong></p><p>更改权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>本地测试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@服务器ip地址或域名</span><br></pre></td></tr></table></figure><p>不用输密码就成了。</p><h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>切换为<code>root</code>用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su root</span><br></pre></td></tr></table></figure><p>创建<code>repo</code>作为仓库目录，并加权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br></pre></td></tr></table></figure><p>创建 hexo 目录作为网站根目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/hexo</span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure><p>创建一个空白的 git 仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexo.git</span><br></pre></td></tr></table></figure><p>编辑一个 Git 钩子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按<code>i</code>进入编辑模式，添加下面的代码，按<code>esc</code>输入<code>:wq</code> 保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/hexo --git-dir=/var/repo/hexo.git checkout -f</span><br></pre></td></tr></table></figure><p>更改权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexo.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexo.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h3 id="宝塔网站配置"><a href="#宝塔网站配置" class="headerlink" title="宝塔网站配置"></a>宝塔网站配置</h3><p>创建一个网站</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/hexo-bt-5.png" alt="hexo-bt-5"></p><h3 id="本地-Git-deploy-设置"><a href="#本地-Git-deploy-设置" class="headerlink" title="本地 Git deploy 设置"></a>本地 Git deploy 设置</h3><p>安装git部署插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>在博客根目录配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@服务器ip或域名:/var/repo/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>配置完成后，可直接hexo三连到自己的服务器。简单快捷。</p><p>如果报错:<code>error: remote unpack failed: index-pack abnormal exit</code>, 删除<code>/var/hexo</code>下的所有文件. 包括<code>.user.ini</code>, 这个文件作用为防跨站, 添加权限之后可以再添加回来.</p><p>重新给权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line"></span><br><span class="line">chown -R git:git /var/hexo</span><br><span class="line">chmod -R 755 /var/hexo</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Git" scheme="http://www.fanziqi.site/tags/Git/"/>
    
    <category term="hexo" scheme="http://www.fanziqi.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——参数的使用</title>
    <link href="http://www.fanziqi.site/posts/7219ca14.html"/>
    <id>http://www.fanziqi.site/posts/7219ca14.html</id>
    <published>2021-10-04T09:30:00.000Z</published>
    <updated>2021-10-04T09:34:17.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——参数的使用"><a href="#ROS2——参数的使用" class="headerlink" title="ROS2——参数的使用"></a>ROS2——参数的使用</h1><p>上回说到, <code>Organization</code>给每个人免费送2个汉堡, 有一天<code>Organization</code>正在营业中, 汉堡突然供不应求了, 领导决定临时改变规则, 之后的每个人只能领取一个汉堡. 但是此时节点已经在运行中, 该如何改变这个值呢? 这就需要用到参数<code>parameters</code></p><h2 id="参数简介"><a href="#参数简介" class="headerlink" title="参数简介"></a>参数简介</h2><p>参数是节点的配置参数值。你可以认为参数是节点配置的一部分。参数为整数，浮点数，布尔值，字符串和列表。在ROS2中，每个节点都有自己的参数。所有参数都是可动态重新配置的，并且是基于ROS2服务构建的。</p><p>在这个案例中, 每个人领取的汉堡数量就可以是<code>Organization</code>节点的一个参数.</p><p>下面, 我们将修改这段服务程序, 通过修改参数来改变人均汉堡数</p><h2 id="修改服务程序"><a href="#修改服务程序" class="headerlink" title="修改服务程序"></a>修改服务程序</h2><p>新建<code>Organization_with_parameter.cpp</code>文件</p><p>代码由<code>Organization.cpp</code>修改而来, 不同的地方均使用<code>// CHANGE:</code>标注出了, 请读者自行与上节代码进行对比.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span> :</span> <span class="keyword">public</span> rclcpp::Node </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Organization</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Organization&quot;</span>), <span class="built_in">NumOfAll</span>(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我们是热心组织, 我们只给poorer发汉堡.&quot;</span>);</span><br><span class="line">        callback_group_organization = <span class="keyword">this</span>-&gt;<span class="built_in">create_callback_group</span>(rclcpp::CallbackGroupType::MutuallyExclusive);</span><br><span class="line">        Organization_Server = <span class="keyword">this</span>-&gt;create_service&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>,</span><br><span class="line">                                    std::<span class="built_in">bind</span>(&amp;Organization::organization_callback,<span class="keyword">this</span>,_1,_2),</span><br><span class="line">                                    rmw_qos_profile_services_default,</span><br><span class="line">                                    callback_group_organization);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// CHANGE: 声明参数</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;declare_parameter&lt;<span class="keyword">int</span>&gt;(<span class="string">&quot;NumOfEachPerson&quot;</span>, NumOfEachPerson);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> NumOfAll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CHANGE: 声明每个人分得的汉堡数, 默认为2</span></span><br><span class="line">    <span class="keyword">int</span> NumOfEachPerson = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    rclcpp::CallbackGroup::SharedPtr callback_group_organization;</span><br><span class="line">    rclcpp::Service&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Organization_Server;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">organization_callback</span><span class="params">(<span class="keyword">const</span> service_interfaces::srv::Calculate::Request::SharedPtr request,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">const</span> service_interfaces::srv::Calculate::Response::SharedPtr response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request-&gt;status == <span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个来自%s的请求，他家有%d个人.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// CHANGE: 更新参数</span></span><br><span class="line">            <span class="keyword">this</span>-&gt;<span class="built_in">get_parameter</span>(<span class="string">&quot;NumOfEachPerson&quot;</span>, NumOfEachPerson);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// CHANGE: 计算应给汉堡数量，由参数给定</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> NumOfRequired = request-&gt;num_of_people * NumOfEachPerson;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(NumOfRequired &gt; NumOfAll)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;当前汉堡库里只剩%d个汉堡啦! 已经不够分了, 请明日再来.&quot;</span>, NumOfRequired);</span><br><span class="line">                response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                NumOfAll -= NumOfRequired;</span><br><span class="line">                response-&gt;num_of_hamburger = NumOfRequired;</span><br><span class="line">                response-&gt;success = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功送出%d个汉堡~ 还剩余%d个汉堡&quot;</span>, NumOfRequired, NumOfAll);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            response-&gt;num_of_hamburger = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个非法请求，这人是个%s, 不满足送汉堡资格.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Organization&gt;();</span><br><span class="line">    rclcpp::executors::MultiThreadedExecutor exector;</span><br><span class="line">    exector.<span class="built_in">add_node</span>(node);</span><br><span class="line">    exector.<span class="built_in">spin</span>();</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h3><p>添加:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(Organization_with_parameters_node src/Organization_with_parameters.cpp)</span><br><span class="line">ament_target_dependencies(Organization_with_parameters_node rclcpp service_interfaces)</span><br></pre></td></tr></table></figure><p>添加:<code>Organization_with_parameters_node</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  ...</span><br><span class="line">  Organization_with_parameters_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h3><p>不用修改</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select poor_and_organization</span><br></pre></td></tr></table></figure><p>刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>新建一个终端窗口, 运行带参数的Organization服务端节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_with_parameters_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行Poor客户端节点</p><p>一开始每人领取两个汉堡, 直接运行客户端:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 5</span><br></pre></td></tr></table></figure><p>Organization服务端: 成功发出10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-Organization1.png" alt="Parameters-Organization1" style="zoom:67%;"></p><p>Poor客户端: 成功领取10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change-Poor1.png" alt="Parameters-change-Poor1" style="zoom:67%;"></p><p>此时需要修改参数, 另起一个终端, 运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param <span class="built_in">set</span> /Organization NumOfEachPerson 1</span><br></pre></td></tr></table></figure><p>提示如下即为成功</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change.png" alt="Parameters-change" style="zoom:67%;"></p><p>再次运行客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 50</span><br></pre></td></tr></table></figure><p>Poor客户端: 50个人领取了50个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-change-Poor2.png" alt="Parameters-change-Poor2" style="zoom:67%;"></p><p>Organization服务端: 成功发出50个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-Organization2.png" alt="Parameters-Organization2" style="zoom:67%;"></p><p>由此可见, 参数成功被修改了, 但此时的参数不会被保留, 参数所在的节点重启后即恢复至初始值. 那如果一个节点的参数特别多, 修改完之后想将当前的参数保存下来供下次调用应该怎么操作呢? 请继续阅读.</p><h2 id="参数常用命令"><a href="#参数常用命令" class="headerlink" title="参数常用命令"></a>参数常用命令</h2><p>使用 <code>ros2 param</code></p><h3 id="查看参数列表"><a href="#查看参数列表" class="headerlink" title="查看参数列表"></a>查看参数列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param list</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-list.png" alt="Parameters-ros2-param-list" style="zoom:67%;"></p><p>也可具体到某个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param list /Organization</span><br></pre></td></tr></table></figure><h3 id="查看参数描述"><a href="#查看参数描述" class="headerlink" title="查看参数描述"></a>查看参数描述</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param describe /Organization NumOfEachPerson</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-describe-Organization-NumOfEachPerson.png" alt="Parameters-ros2-param-describe-Organization-NumOfEachPerson" style="zoom:67%;"></p><h3 id="获取参数值"><a href="#获取参数值" class="headerlink" title="获取参数值"></a>获取参数值</h3><p><code>ros2 param get &lt;node_name&gt; &lt;parameter_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param get /Organization NumOfEachPerson</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-get-Organization-NumOfEachPerson-2.png" alt="Parameters-ros2-param-get-Organization-NumOfEachPerson-2" style="zoom:67%;"></p><h3 id="设置参数值"><a href="#设置参数值" class="headerlink" title="设置参数值"></a>设置参数值</h3><p><code>ros2 param set &lt;node_name&gt; &lt;parameter_name&gt; &lt;value&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param <span class="built_in">set</span> /Organization NumOfEachPerson 1</span><br></pre></td></tr></table></figure><p>再次获取参数值, 发生了改变:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-get-Organization-NumOfEachPerson-1.png" alt="Parameters-ros2-param-get-Organization-NumOfEachPerson-1" style="zoom:67%;"></p><h3 id="保存参数"><a href="#保存参数" class="headerlink" title="保存参数"></a>保存参数</h3><p><code>ros2 param dump &lt;node_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param dump /Organization</span><br></pre></td></tr></table></figure><p>在当前终端的根目录下, 可以看到增加了一个<code>Organization.yaml</code>文件, 打开此文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/Organization:</span></span><br><span class="line">  <span class="attr">ros__parameters:</span></span><br><span class="line">    <span class="attr">NumOfEachPerson:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">use_sim_time:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>有了这个参数文件, 就可以通过这个文件设置节点的参数</p><h3 id="加载参数"><a href="#加载参数" class="headerlink" title="加载参数"></a>加载参数</h3><h4 id="节点启动后加载参数"><a href="#节点启动后加载参数" class="headerlink" title="节点启动后加载参数"></a>节点启动后加载参数</h4><p><code>ros2 param load &lt;node_name&gt; &lt;parameter_file&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 param load /Organization ./Organization.yaml</span><br></pre></td></tr></table></figure><p>返回如下表示加载成功:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Parameters-ros2-param-load-Organization-Organization-yaml.png" alt="Parameters-ros2-param-load-Organization-Organization-yaml" style="zoom:67%;"></p><h4 id="节点启动前加载参数"><a href="#节点启动前加载参数" class="headerlink" title="节点启动前加载参数"></a>节点启动前加载参数</h4><p><code>ros2 run &lt;package_name&gt; &lt;executable_name&gt; --ros-args --params-file &lt;file_name&gt;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_with_parameters_node --ros-args --params-file ./Organization.yaml </span><br></pre></td></tr></table></figure><p>请读者尝试自行获取一下当前的<code>NumOfEachPerson</code>值作为练习.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——手把手编写一个服务</title>
    <link href="http://www.fanziqi.site/posts/fa9bc3ba.html"/>
    <id>http://www.fanziqi.site/posts/fa9bc3ba.html</id>
    <published>2021-10-03T07:00:00.000Z</published>
    <updated>2021-10-03T07:00:03.027Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——手把手教你编写一个服务"><a href="#ROS2——手把手教你编写一个服务" class="headerlink" title="ROS2——手把手教你编写一个服务"></a>ROS2——手把手教你编写一个服务</h1><h2 id="服务简介"><a href="#服务简介" class="headerlink" title="服务简介"></a>服务简介</h2><p>上一篇文章讲的话题通信是基于订阅/发布机制的，无论有没有订阅者，发布者都会周期发布数据，这种模式适合持续数据的收发，比如传感器数据。机器人系统中还有另外一些配置性质的数据，并不需要周期处理，此时就要用到另外一种ROS通信方式——服务（Service）。服务是基于客户端/服务器模型的通信机制，服务器端只在接收到客户端请求时才会提供反馈数据。  </p><p>服务有着以下特点:</p><ul><li><p>同一个服务（名称相同）有且只能有一个节点来提供</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Service-SingleServiceClient.gif" alt="Service-SingleServiceClient" style="zoom:67%;"></p></li><li><p>同一个服务可以被多个客户端调用(可以一对一也可一对多)</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Service-MultipleServiceClient.gif" alt="Service-MultipleServiceClient" style="zoom:67%;"></p></li></ul><p>下面, 我们将从一个实例出发, 手把手写一段服务程序</p><h2 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h2><p>来看一个案例: (以下均使用<code>-er</code>表示名词, 虽然没有这个词)</p><ul><li>有一些穷人<code>Poorer</code>和一个发放免费汉堡的爱心机构<code>Organization</code>.</li><li><code>Organization</code>总共有一定数量的汉堡. </li><li><code>Poorer</code>可以为家人代领汉堡, 家里有n个人, 就可以领取2n个汉堡.</li><li>当然, 还有一些有钱人<code>Richer</code>想蹭吃蹭喝, <code>Organization</code>不会给这些人发放食物</li><li>当汉堡发完了, <code>Organization</code>发出通知, 不再发放.</li></ul><p>以上案例实际上就实现了一个服务, <code>Organization</code>为服务端,  <code>Poorer</code>和<code>Richer</code>为客户端</p><h2 id="自定义服务接口"><a href="#自定义服务接口" class="headerlink" title="自定义服务接口"></a>自定义服务接口</h2><p>上一篇文章我们自定义了话题接口, 服务与话题不同, 服务是双向的, 所以要定义来回两个数据类型</p><h3 id="编辑-srv文件"><a href="#编辑-srv文件" class="headerlink" title="编辑.srv文件"></a>编辑.srv文件</h3><p>cd到工作空间的<code>/src</code>文件夹下, 新建接口包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br><span class="line">ros2 pkg create service_interfaces --build-type ament_cmake </span><br></pre></td></tr></table></figure><p>cd进入<code>service_interfaces</code>文件夹, 新建<code>Organization.srv</code>文件(首字母要求大写)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir srv</span><br><span class="line">touch srv/Organization.srv</span><br></pre></td></tr></table></figure><p>编辑<code>Organization.srv</code></p><p>来回两个数据中间用<code>---</code>分隔开</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 是穷人还是富人</span><br><span class="line">string status</span><br><span class="line"># 家里的人数</span><br><span class="line">uint32 num_of_people</span><br><span class="line">---</span><br><span class="line"># 是否发出成功</span><br><span class="line"><span class="keyword">bool</span> success</span><br><span class="line"># 发出的汉堡数量</span><br><span class="line">uint32 num_of_hamburger</span><br></pre></td></tr></table></figure><h3 id="修改Cmakelist-txt"><a href="#修改Cmakelist-txt" class="headerlink" title="修改Cmakelist.txt"></a>修改Cmakelist.txt</h3><p>注意:<code>rosidl_generate_interfaces()</code>必须在 <code>ament_package()</code>前</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明srv文件所属的工程名字, 文件位置, 依赖DEPENDENCIES</span></span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;srv/Calculate.srv&quot;</span></span><br><span class="line">  DEPENDENCIES </span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="修改package-xml"><a href="#修改package-xml" class="headerlink" title="修改package.xml"></a>修改package.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rosidl_default_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编译并刷新环境变量"><a href="#编译并刷新环境变量" class="headerlink" title="编译并刷新环境变量"></a>编译并刷新环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select service_interfaces</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="详细查看接口"><a href="#详细查看接口" class="headerlink" title="详细查看接口"></a>详细查看接口</h3><p>要想详细查看接口, 可以使用<code>ros2 interface</code>命令, 前面的博客已经讲过, 不再赘述</p><h2 id="服务程序实现"><a href="#服务程序实现" class="headerlink" title="服务程序实现"></a>服务程序实现</h2><p>下面来编写这段程序</p><h3 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a>新建工作空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ros2_ws/src</span><br><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br></pre></td></tr></table></figure><p><code>mkdir -p</code>: 递归创建目录,即使上级目录不存在,会按目录层级自动创建目录</p><h3 id="新建功能包"><a href="#新建功能包" class="headerlink" title="新建功能包"></a>新建功能包</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create poor_and_organization --build-type ament_cmake --dependencies rclcpp service_interfaces</span><br></pre></td></tr></table></figure><p>使用<code>ament_cmake</code>作为编译类型, 并使用依赖<code>rclcpp</code>和前文定义的<code>service_interfaces</code>接口包</p><p>在<code>ros2_ws/src/poor_and_organization/src</code>下创建<code>Poor.cpp</code>和<code>Organization.cpp</code></p><h3 id="编写服务端节点"><a href="#编写服务端节点" class="headerlink" title="编写服务端节点"></a>编写服务端节点</h3><p>直接献出程序, 每句都有注释, 看不懂你打我</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类节点，名字叫做Organization,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Organization</span> :</span> <span class="keyword">public</span> rclcpp::Node </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 初始化汉堡总数NumOfAll为100</span></span><br><span class="line">    <span class="built_in">Organization</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Organization&quot;</span>), <span class="built_in">NumOfAll</span>(<span class="number">100</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 热心组织的自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我们是热心组织, 我们只给poorer发汉堡.&quot;</span>);</span><br><span class="line">        <span class="comment">// 实例化回调组, 作用为避免死锁(请自行百度ROS2死锁)</span></span><br><span class="line">        callback_group_organization = <span class="keyword">this</span>-&gt;<span class="built_in">create_callback_group</span>(rclcpp::CallbackGroupType::MutuallyExclusive);</span><br><span class="line">        <span class="comment">// 实例化发汉堡的的服务</span></span><br><span class="line">        Organization_Server = <span class="keyword">this</span>-&gt;create_service&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>,</span><br><span class="line">                                    std::<span class="built_in">bind</span>(&amp;Organization::organization_callback,<span class="keyword">this</span>,_1,_2),</span><br><span class="line">                                    rmw_qos_profile_services_default,</span><br><span class="line">                                    callback_group_organization);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 剩余汉堡总数</span></span><br><span class="line">    <span class="keyword">size_t</span> NumOfAll;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个服务回调组</span></span><br><span class="line">    rclcpp::CallbackGroup::SharedPtr callback_group_organization;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个服务端</span></span><br><span class="line">    rclcpp::Service&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Organization_Server;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个回调函数，当收到要汉堡请求时调用该函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">organization_callback</span><span class="params">(<span class="keyword">const</span> service_interfaces::srv::Calculate::Request::SharedPtr request,</span></span></span><br><span class="line"><span class="params"><span class="function">                               <span class="keyword">const</span> service_interfaces::srv::Calculate::Response::SharedPtr response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 首先判断是不是穷人</span></span><br><span class="line">        <span class="keyword">if</span>(request-&gt;status == <span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 打印Poorer家的人数</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个来自%s的请求，他家有%d个人.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">            <span class="comment">// 计算应给汉堡数量，每人两个</span></span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">int</span> NumOfRequired = request-&gt;num_of_people*<span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 检查剩余汉堡够不够分</span></span><br><span class="line">            <span class="keyword">if</span>(NumOfRequired &gt; NumOfAll)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 不够分了, 返回false</span></span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;当前汉堡库里只剩%d个汉堡啦! 已经不够分了, 请明日再来.&quot;</span>, NumOfRequired);</span><br><span class="line">                response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 够分, 更新剩余汉堡数量</span></span><br><span class="line">                NumOfAll -= NumOfRequired;</span><br><span class="line">                <span class="comment">// 返回给几个汉堡</span></span><br><span class="line">                response-&gt;num_of_hamburger = NumOfRequired;</span><br><span class="line">                <span class="comment">// 成功送出, 返回true</span></span><br><span class="line">                response-&gt;success = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功送出%d个汉堡~ 还剩余%d个汉堡&quot;</span>, NumOfRequired, NumOfAll);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 富人不给汉堡, 同样返回false, 同时返回送出汉堡数量为0</span></span><br><span class="line">            response-&gt;success = <span class="literal">false</span>;</span><br><span class="line">            response-&gt;num_of_hamburger = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收到一个非法请求，这人是个%s, 不满足送汉堡资格.&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Organization&gt;();</span><br><span class="line">    <span class="comment">// 把节点的执行器变成多线程执行器, 避免死锁</span></span><br><span class="line">    rclcpp::executors::MultiThreadedExecutor exector;</span><br><span class="line">    exector.<span class="built_in">add_node</span>(node);</span><br><span class="line">    exector.<span class="built_in">spin</span>();</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写客户端Poor节点"><a href="#编写客户端Poor节点" class="headerlink" title="编写客户端Poor节点"></a>编写客户端Poor节点</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;service_interfaces/srv/calculate.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个类节点，名字叫做Poorer,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Poorer</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="built_in">Poorer</span>() : <span class="built_in">Node</span>(<span class="string">&quot;Poorer&quot;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印一句自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我是一个来领汉堡的人.&quot;</span>);</span><br><span class="line">        <span class="comment">// 实例化客户端, 指明客户端的接口类型，同时指定要请求的服务的名称Calculate.</span></span><br><span class="line">        Poorer_Client = <span class="keyword">this</span>-&gt;create_client&lt;service_interfaces::srv::Calculate&gt;(<span class="string">&quot;Calculate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">take_hamburger</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;现在去领取汉堡&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//构造请求</span></span><br><span class="line">        <span class="keyword">auto</span> request = std::make_shared&lt;service_interfaces::srv::Calculate::Request&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待服务端上线</span></span><br><span class="line">        <span class="keyword">while</span> (!Poorer_Client-&gt;<span class="built_in">wait_for_service</span>(<span class="number">1</span>s))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//等待时检测rclcpp的状态</span></span><br><span class="line">            <span class="keyword">if</span> (!rclcpp::<span class="built_in">ok</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 检测到Ctrl+C直接退出</span></span><br><span class="line">                <span class="built_in">RCLCPP_ERROR</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;等待被打断, 不等了&quot;</span>);</span><br><span class="line">                rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 否则一直等</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;等待热心组织开门&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输入参数格式错误的时候报错并退出程序</span></span><br><span class="line">        <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_ERROR</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;输入格式错误, 格式为: 什么人 几口人. 例如: ros2 run poor_and_organization Poor_node Poorer 3&quot;</span>);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 格式正确, 获取参数, 放入request中</span></span><br><span class="line">            request-&gt;status =             argv[<span class="number">1</span>];</span><br><span class="line">            request-&gt;num_of_people = <span class="built_in">atoi</span>(argv[<span class="number">2</span>]);</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我是%s, 我家有%d个人&quot;</span>, request-&gt;status.<span class="built_in">c_str</span>(), request-&gt;num_of_people);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送异步请求，然后等待返回，返回时调用回调函数</span></span><br><span class="line">        Poorer_Client-&gt;<span class="built_in">async_send_request</span>(request, std::<span class="built_in">bind</span>(&amp;Poorer::poorer_callback, <span class="keyword">this</span>, _1));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 创建一个客户端</span></span><br><span class="line">    rclcpp::Client&lt;service_interfaces::srv::Calculate&gt;::SharedPtr Poorer_Client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建接收到小说的回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">poorer_callback</span><span class="params">(rclcpp::Client&lt;service_interfaces::srv::Calculate&gt;::SharedFuture response)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 使用response的get()获取</span></span><br><span class="line">        <span class="keyword">auto</span> result = response.<span class="built_in">get</span>();</span><br><span class="line">        <span class="comment">// 如果确实是Poorer, 则领取成功</span></span><br><span class="line">        <span class="keyword">if</span>(result-&gt;success == <span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;成功领取%d个汉堡&quot;</span>, result-&gt;num_of_hamburger);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不是Poorer或者汉堡数量不够, 则领取失败</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;领取汉堡失败, 原因可能为: 1.你不是Poorer 2.汉堡不够了&quot;</span>);</span><br><span class="line">            rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 产生一个Poorer的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;Poorer&gt;();</span><br><span class="line">    node-&gt;<span class="built_in">take_hamburger</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 运行节点，并检测rclcpp状态</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(service_interfaces REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Poor_node src/Poor.cpp)</span><br><span class="line">ament_target_dependencies(Poor_node rclcpp service_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Organization_node src/Organization.cpp)</span><br><span class="line">ament_target_dependencies(Organization_node rclcpp service_interfaces)</span><br></pre></td></tr></table></figure><p>将编译好的文件安装到<code>install/poor_and_organization/lib/poor_and_organization</code>下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Poor_node</span><br><span class="line">  Organization_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h3><p>同样地, 新建功能包的时候没有加<code>--dependencies rclcpp service_interfaces</code>等功能包, 则需要手动添加, 放置于<code>&lt;package&gt;</code>标签下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>rclcpp<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>service_interfaces<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可自行修改下面这些声明, 与实现功能无关, 但是最好写全</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;fanziqi@fanziqi.site&quot;</span>&gt;</span>fanziqi<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO: License declaration<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select poor_and_organization</span><br></pre></td></tr></table></figure><p>刷新环境</p><p>前文应该已经echo了环境, 如果没有, 请添加<code>echo &quot;source /ros2_ws/install/setup.zsh&quot; &gt;&gt; ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>新建一个终端窗口, 运行Organization服务端节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Organization_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行Poor客户端节点</p><p>第一个参数为节点名称<code>Poor_node</code>, 第二个参数为人员类型<code>Poorer</code>, 第三个参数为家里人数<code>5</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 5</span><br></pre></td></tr></table></figure><p>此时应该可以看见: </p><p>Organization服务端: 成功发出10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-1.png" alt="Organization-1" style="zoom:67%;"></p><p>Poor客户端: 成功领取10个汉堡</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-1.png" alt="Poor-1" style="zoom:67%;"></p><p>也可以手动发布客户端一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call /Calculate service_interfaces/srv/Calculate <span class="string">&quot;&#123;num_of_people: 40, status: &#x27;Poorer&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>Poor客户端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-2.png" alt="Poor-2" style="zoom:67%;"></p><p>Organization服务端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-2.png" alt="Organization-2" style="zoom:67%;"></p><p>此时如果再申请20个汉堡, 会发生什么呢?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 10</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示领取失败</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-3.png" alt="Poor-3" style="zoom:67%;"></p><p>Organization服务端: 提示不够分了</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-3.png" alt="Organization-3" style="zoom:67%;"></p><p>这时候有一个Richer来骗汉堡吃</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Richer 1</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示领取失败</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-4.png" alt="Poor-4" style="zoom:67%;"></p><p>Organization服务端: 就算有汉堡也不分给Richer</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Organization-4.png" alt="Organization-4" style="zoom:67%;"></p><p>这时, Organization关门下班了(Ctrl+C关闭Organization_Node节点)</p><p>又来了一个人想要领汉堡:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run poor_and_organization Poor_node Poorer 2</span><br></pre></td></tr></table></figure><p>Poor客户端: 提示等待开门, 不想等待的话直接按Ctrl+C退出</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/Poor-5.png" alt="Poor-5" style="zoom:67%;"></p><p>经验证, 需求全部实现~</p><h2 id="服务常用命令"><a href="#服务常用命令" class="headerlink" title="服务常用命令"></a>服务常用命令</h2><p>使用 <code>ros2 service</code></p><h3 id="查看服务列表"><a href="#查看服务列表" class="headerlink" title="查看服务列表"></a>查看服务列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service list</span><br></pre></td></tr></table></figure><p>具体点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service list -t</span><br></pre></td></tr></table></figure><h3 id="查看服务的接口"><a href="#查看服务的接口" class="headerlink" title="查看服务的接口"></a>查看服务的接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service <span class="built_in">type</span> &lt;service_name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看接口的服务"><a href="#查看接口的服务" class="headerlink" title="查看接口的服务"></a>查看接口的服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service find &lt;type_name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看服务接口类型"><a href="#查看服务接口类型" class="headerlink" title="查看服务接口类型"></a>查看服务接口类型</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show ***/srv/***</span><br></pre></td></tr></table></figure><h3 id="手动调用服务"><a href="#手动调用服务" class="headerlink" title="手动调用服务"></a>手动调用服务</h3><p>前文使用过, 还记得吗</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 service call &lt;service_name&gt; &lt;service_type&gt; &lt;arguments&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——什么是接口</title>
    <link href="http://www.fanziqi.site/posts/333442d9.html"/>
    <id>http://www.fanziqi.site/posts/333442d9.html</id>
    <published>2021-10-02T05:00:00.000Z</published>
    <updated>2021-10-02T13:01:23.354Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——什么是接口"><a href="#ROS2——什么是接口" class="headerlink" title="ROS2——什么是接口"></a>ROS2——什么是接口</h1><h2 id="接口简介"><a href="#接口简介" class="headerlink" title="接口简介"></a>接口简介</h2><p>在机器人系统中, 往往有许许多多的硬件, 比如摄像头, 激光雷达, 每一个硬件发送的数据/数据类型是不同的, 那么ROS2是如何使用这些数据的呢?</p><p>前文<code>KFC</code>和<code>Hamburger</code>中我们使用过这些定义:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line">...</span><br><span class="line">&lt;std_msgs::msg::String&gt;</span><br><span class="line">&lt;std_msgs::msg::UInt32&gt;</span><br></pre></td></tr></table></figure><p>这里的<code>std_msgs</code>是ROS2内置的一个接口功能包. </p><p>查看某一个接口包下所有的接口: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface package std_msgs</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-package-std_msgs.png" alt="ros2-interface-package-std_msgs" style="zoom:67%;"></p><p>当然, 这些内置接口也许不能满足你的需求, 此时就可以自定义接口.</p><h2 id="自定义接口"><a href="#自定义接口" class="headerlink" title="自定义接口"></a>自定义接口</h2><p>针对ROS2的通信方式, 接口可以分为:</p><ul><li><p>话题接口</p><p>文件名: <code>*.msg</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int64 num</span><br></pre></td></tr></table></figure><p>This is your custom message that transfers a single 64-bit integer called <code>num</code>.</p></li><li><p>服务接口</p><p>文件名:<code>*.srv</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int64 a</span><br><span class="line">int64 b</span><br><span class="line">int64 c</span><br><span class="line">---</span><br><span class="line">int64 sum</span><br></pre></td></tr></table></figure><p>This is your custom service that requests three integers named <code>a</code>, <code>b</code>, and <code>c</code>, and responds with an integer called <code>sum</code>.</p></li><li><p>动作接口</p><p>文件名:<code>*.action</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int32 order</span><br><span class="line">---</span><br><span class="line">int32[] sequence</span><br><span class="line">---</span><br><span class="line">int32[] partial_sequence</span><br></pre></td></tr></table></figure></li></ul><h3 id="自定义话题接口"><a href="#自定义话题接口" class="headerlink" title="自定义话题接口"></a>自定义话题接口</h3><p>前情提要: 前面的KFC实例中, KFC会定时发送一条广告话题, 如果要发送图片信息怎么办? 这就需要自定义KFC专属消息接口.</p><h4 id="编辑-msg文件"><a href="#编辑-msg文件" class="headerlink" title="编辑.msg文件"></a>编辑.msg文件</h4><p>cd到工作空间的<code>/src</code>文件夹下, 新建接口包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br><span class="line">ros2 pkg create topic_interfaces --build-type ament_cmake</span><br></pre></td></tr></table></figure><p>cd进入<code>topic_interfaces</code>文件夹, 新建<code>KFC.msg</code>文件(首字母要求大写)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir msg</span><br><span class="line">touch msg/KFC.msg</span><br></pre></td></tr></table></figure><p>编辑<code>KFC.msg</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 原始数据类型string</span><br><span class="line">string txt</span><br><span class="line"></span><br><span class="line"># 原始数据类型 uint32</span><br><span class="line">uint32 money</span><br><span class="line"></span><br><span class="line"># 图像消息，调用sensor_msgs下的Image类型</span><br><span class="line">sensor_msgs/Image image</span><br></pre></td></tr></table></figure><h4 id="修改Cmakelist-txt"><a href="#修改Cmakelist-txt" class="headerlink" title="修改Cmakelist.txt"></a>修改Cmakelist.txt</h4><p>注意:<code>rosidl_generate_interfaces()</code>必须在 <code>ament_package()</code>前</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这两句添加依赖</span></span><br><span class="line"><span class="keyword">find_package</span>(sensor_msgs REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(rosidl_default_generators REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明msg文件所属的工程名字, 文件位置, 依赖DEPENDENCIES</span></span><br><span class="line">rosidl_generate_interfaces(<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">  <span class="string">&quot;msg/Ad.msg&quot;</span></span><br><span class="line">   DEPENDENCIES sensor_msgs</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h4 id="修改package-xml"><a href="#修改package-xml" class="headerlink" title="修改package.xml"></a>修改package.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 添加如下内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>sensor_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>rosidl_default_generators<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>rosidl_default_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">member_of_group</span>&gt;</span>rosidl_interface_packages<span class="tag">&lt;/<span class="name">member_of_group</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编译并刷新环境变量"><a href="#编译并刷新环境变量" class="headerlink" title="编译并刷新环境变量"></a>编译并刷新环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select topic_interfaces</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h4 id="使用自定义话题接口修改KFC与Customer"><a href="#使用自定义话题接口修改KFC与Customer" class="headerlink" title="使用自定义话题接口修改KFC与Customer"></a>使用自定义话题接口修改KFC与Customer</h4><p>上代码! 请读者自行对比区别, <code>// CHANGE</code>为修改的地方</p><p>新建文件<code>Customer_with_interfaces.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="comment">// 这个头文件是topic_interfaces接口包编译后自动生成的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;topic_interfaces/msg/kfc.hpp&quot;</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">CustomerNode</span>(std::string name) : <span class="built_in">Node</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好,我是一个%s.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">        sub_hamburger = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::hamburger_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        sub_advertisement = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::advertisement_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        hungry_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">1000</span>ms, std::<span class="built_in">bind</span>(&amp;CustomerNode::hungry_timer_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        pub_money = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        money.money = <span class="number">10</span>; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我饿了, 我要吃汉堡! 付款 %d 元&quot;</span>, money.money); <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    topic_interfaces::msg::KFC money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::TimerBase::SharedPtr hungry_timer;</span><br><span class="line"></span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_hamburger; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_advertisement; <span class="comment">// CHANGE</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hamburger_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我吃的 %s &quot;</span>, msg-&gt;txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我又饿了, 还想再吃一个! 付款 %d 元&quot;</span>, money.money); <span class="comment">// CHANGE</span></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我收到了一条广告: %s &quot;</span>, msg-&gt;txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;CustomerNode&gt;(<span class="string">&quot;Customer&quot;</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建文件<code>KFC_with_interfaces.cpp</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;topic_interfaces/msg/kfc.hpp&quot;</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFCNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">KFCNode</span>(std::string name) : <span class="built_in">Node</span>(name), <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我是%s的服务员.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line">        </span><br><span class="line">        pub_hamburger = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        pub_advertisement = <span class="keyword">this</span>-&gt;create_publisher&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>); <span class="comment">// CHANGE</span></span><br><span class="line">        </span><br><span class="line">        advertisement_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">5000</span>ms, std::<span class="built_in">bind</span>(&amp;KFCNode::advertisement_timer_callback, <span class="keyword">this</span>));</span><br><span class="line">        </span><br><span class="line">        sub_money = <span class="keyword">this</span>-&gt;create_subscription&lt;topic_interfaces::msg::KFC&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;KFCNode::money_callback, <span class="keyword">this</span>, _1)); <span class="comment">// CHANGE</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line">    rclcpp::TimerBase::SharedPtr advertisement_timer;</span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_hamburger; <span class="comment">// CHANGE</span></span><br><span class="line">    </span><br><span class="line">    rclcpp::Subscription&lt;topic_interfaces::msg::KFC&gt;::SharedPtr sub_money; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    rclcpp::Publisher&lt;topic_interfaces::msg::KFC&gt;::SharedPtr pub_advertisement; <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">auto</span> str_advertisement = topic_interfaces::msg::<span class="built_in">KFC</span>(); <span class="comment">// CHANGE</span></span><br><span class="line">        str_advertisement.txt = <span class="string">&quot;大鸡腿降价啦&quot;</span>; <span class="comment">// CHANGE</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;KFC发布了一个广告:%s&quot;</span>, str_advertisement.txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">        pub_advertisement-&gt;<span class="built_in">publish</span>(str_advertisement);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">money_callback</span><span class="params">(<span class="keyword">const</span> topic_interfaces::msg::KFC::SharedPtr msg)</span> <span class="comment">// CHANGE</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msg-&gt;money == <span class="number">10</span>) <span class="comment">// CHANGE</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收款 %d 元&quot;</span>, msg-&gt;money); <span class="comment">// CHANGE</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">auto</span> str_hamburger_num = topic_interfaces::msg::<span class="built_in">KFC</span>(); <span class="comment">// CHANGE</span></span><br><span class="line">            str_hamburger_num.txt = <span class="string">&quot;第&quot;</span> + std::<span class="built_in">to_string</span>(count++) + <span class="string">&quot;个汉堡&quot;</span>; <span class="comment">// CHANGE</span></span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我卖出的%s&quot;</span>, str_hamburger_num.txt.<span class="built_in">c_str</span>()); <span class="comment">// CHANGE</span></span><br><span class="line">            </span><br><span class="line">            pub_hamburger-&gt;<span class="built_in">publish</span>(str_hamburger_num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;KFCNode&gt;(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改Cmakelist.txt, 添加/修改: </p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(topic_interfaces REQUIRED)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(Customer_with_interfaces_node src/Customer_with_interfaces.cpp)</span><br><span class="line">ament_target_dependencies(Customer_with_interfaces_node rclcpp topic_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(KFC_with_interfaces_node src/KFC_with_interfaces.cpp)</span><br><span class="line">ament_target_dependencies(KFC_with_interfaces_node rclcpp topic_interfaces)</span><br><span class="line"></span><br><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Customer_node</span><br><span class="line">  KFC_node</span><br><span class="line">  Customer_with_interfaces_node</span><br><span class="line">  KFC_with_interfaces_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改package.xml, 添加: </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>topic_interfaces<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编译并刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select customer_and_kfc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><p>开启两个终端, 分别运行使用自定义接口的KFC与Customer</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc Customer_with_interfaces_node</span><br><span class="line">ros2 run customer_and_kfc KFC_with_interfaces_node</span><br></pre></td></tr></table></figure><p>成功~</p><h4 id="详细查看接口"><a href="#详细查看接口" class="headerlink" title="详细查看接口"></a>详细查看接口</h4><p>要想详细查看接口, 可以使用<code>ros2 interface</code>命令</p><ol><li><p>查看包下所有接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface package topic_interfaces</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-package-topic-interfaces.png" alt="ros2-interface-package-topic-interfaces" style="zoom:67%;"></p></li><li><p>查看内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show topic_interfaces/msg/Ad</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-show-topic-interfaces-msg-Ad.png" alt="ros2-interface-show-topic-interfaces-msg-Ad" style="zoom:67%;"></p></li><li><p>显示属性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface proto topic_interfaces/msg/Ad</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-proto-topic-interfaces-msg-Ad.png" alt="ros2-interface-proto-topic-interfaces-msg-Ad" style="zoom:67%;"></p></li></ol><h3 id="自定义服务接口"><a href="#自定义服务接口" class="headerlink" title="自定义服务接口"></a>自定义服务接口</h3><p>自定义服务接口将在下一篇文章讲解服务时一起讲解.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>ROS2——手把手编写一个话题</title>
    <link href="http://www.fanziqi.site/posts/7d4be8c5.html"/>
    <id>http://www.fanziqi.site/posts/7d4be8c5.html</id>
    <published>2021-10-01T14:00:00.000Z</published>
    <updated>2021-10-01T14:40:59.088Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS2——手把手教你编写一个话题"><a href="#ROS2——手把手教你编写一个话题" class="headerlink" title="ROS2——手把手教你编写一个话题"></a>ROS2——手把手教你编写一个话题</h1><h2 id="话题简介"><a href="#话题简介" class="headerlink" title="话题简介"></a>话题简介</h2><p>ROS2将复杂的机器人系统拆解成许多模块节点，而这些节点之间则是通过一个至关重要的通道完成数据交换的，这个通道就是“话题”。</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-1-1.gif" alt="ros2-topic-1-1" style="zoom: 67%;"></p><p>一个节点可以通过多个话题向外发布数据，也可以同时订阅多个其他节点发布的话题，相当于话题是一个多对多的订阅/发布模型。</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-n-n.gif" alt="ros2-topic-n-n" style="zoom: 67%;"></p><p>可见，话题是节点之间实现数据传输的重要途径，也是机器人各个子系统之间交换数据的重要方式。 </p><p>下面, 我们将从一个实例出发, 手把手写一段话题程序</p><h2 id="案例描述"><a href="#案例描述" class="headerlink" title="案例描述"></a>案例描述</h2><p>来看一个案例: </p><ul><li>有一家<code>KFC</code>和一个饥肠辘辘的<code>Customer</code>.</li><li><code>Customer</code>给<code>KFC</code>10元钱就能买到一个汉堡, 这个<code>Customer</code>饿得很快, 每秒都要吃一个汉堡. </li><li><code>KFC</code>收到<code>Customer</code>发来的10元钱, 向<code>Customer</code>发送汉堡, 为了推销大鸡腿, 每5秒发布一条广告.</li></ul><p>以上案例实际上就实现了一个话题, <code>KFC</code>和<code>Customer</code>是两个节点<code>Node</code>, 付钱/发送汉堡/发送广告即为发布者, 收钱/接收汉堡/收取广告即为订阅者.</p><p>下面来编写这段程序</p><h2 id="新建工作空间"><a href="#新建工作空间" class="headerlink" title="新建工作空间"></a>新建工作空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ros2_ws/src</span><br><span class="line"><span class="built_in">cd</span> ros2_ws/src</span><br></pre></td></tr></table></figure><p><code>mkdir -p</code>: 递归创建目录,即使上级目录不存在,会按目录层级自动创建目录</p><h2 id="新建功能包"><a href="#新建功能包" class="headerlink" title="新建功能包"></a>新建功能包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 pkg create customer_and_kfc --build-type ament_cmake --dependencies rclcpp std_msgs</span><br></pre></td></tr></table></figure><p>使用<code>ament_cmake</code>作为编译类型, 并使用依赖<code>rclcpp</code>和<code>std_msgs</code></p><p>在<code>ros2_ws/src/customer_and_kfc/src</code>下创建<code>KFC.cpp</code>和<code>Customer.cpp</code></p><h2 id="编写KFC节点"><a href="#编写KFC节点" class="headerlink" title="编写KFC节点"></a>编写KFC节点</h2><p>直接献出程序, 每句都有注释, 看不懂你打我</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rclcpp库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="comment">// 基本消息类型库</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样在下文可以使用1000ms这种表示方式</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 占位符,下面会详细说</span></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个类节点，起名叫做KFCNode,继承自Node,这样就能使用Node所有的功能了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KFCNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数,第一个参数为节点名称, 并初始化count为1</span></span><br><span class="line">    <span class="built_in">KFCNode</span>(std::string name) : <span class="built_in">Node</span>(name), <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印KFC的自我介绍</span></span><br><span class="line">      <span class="comment">// c_str()函数是string类的一个函数，作用是把string类型转化为char类型(%s要求是一个字符串)</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好, 我是%s的服务员.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建发布者, 发布hamburger, 发布的消息类型为&lt;std_msgs::msg::String&gt;</span></span><br><span class="line">      <span class="comment">// 格式: 发布者名字 = this-&gt;create_publisher&lt;要发布的话题类型&gt;(&quot;要发布的话题名称&quot;, 通信Qos);</span></span><br><span class="line">        pub_hamburger = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::String&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建发布者, 发布advertisement</span></span><br><span class="line">        pub_advertisement = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::String&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建定时器,每5000ms发布一个广告</span></span><br><span class="line">      <span class="comment">// 格式: 定时器名字 = his-&gt;create_wall_timer(1000ms, std::bind(&amp;定时器回调函数, this));</span></span><br><span class="line">        advertisement_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">5000</span>ms, std::<span class="built_in">bind</span>(&amp;KFCNode::advertisement_timer_callback, <span class="keyword">this</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订阅者,订阅money</span></span><br><span class="line">      <span class="comment">// 格式: 订阅者名字 = this-&gt;create_subscription&lt;要订阅的话题类型&gt;(&quot;要订阅的话题名称&quot;, 通信Qos, std::bind(&amp;订阅者回调函数, this, _1));</span></span><br><span class="line">      <span class="comment">// std::bind()是干啥的呢? 举个例子: </span></span><br><span class="line">      <span class="comment">// auto f = std::bind(fun, placeholders::_2, placeholders::_1, 80);</span></span><br><span class="line">      <span class="comment">// f(60,70) 等效于 fun(70, 60, 80) </span></span><br><span class="line">      <span class="comment">// 还记得前文提到的占位符吗,placeholders::_1 就是f(60,70) 中的那个参数&quot;1&quot;</span></span><br><span class="line">        sub_money = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::UInt32&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;KFCNode::money_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 定义一个汉堡售出计数器</span></span><br><span class="line">  <span class="comment">// 在32位系统中size_t是4字节的，在64位系统中，size_t是8字节的，这样利用该类型可以增加程序移植性。</span></span><br><span class="line">    <span class="keyword">size_t</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个定时器</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr advertisement_timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于发布汉堡</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr pub_hamburger;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于收钱</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::UInt32&gt;::SharedPtr sub_money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于发布广告</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::String&gt;::SharedPtr pub_advertisement;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广告定时器回调函数(无参数)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="comment">// 定义一个String类型的字符串, 其中字符串存在.data中, %s使用时别忘了使用.c_str()转换为char类型.</span></span><br><span class="line">        <span class="keyword">auto</span> str_advertisement = std_msgs::msg::<span class="built_in">String</span>();</span><br><span class="line">        str_advertisement.data = <span class="string">&quot;大鸡腿降价啦&quot;</span>;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;KFC发布了一个广告:%s&quot;</span>, str_advertisement.data.<span class="built_in">c_str</span>());</span><br><span class="line">        pub_advertisement-&gt;<span class="built_in">publish</span>(str_advertisement);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 收钱订阅者回调函数(有参数, 参数类型跟上面订阅者订阅的参数类型相同, 注意要加上::SharedPtr, 因为传进来的是一个指针)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">money_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::UInt32::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 如果收到了十元钱,才发布汉堡. 订阅的信息在msg-&gt;data中</span></span><br><span class="line">        <span class="keyword">if</span>(msg-&gt;data == <span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;收款 %d 元&quot;</span>, msg-&gt;data);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 字符串流</span></span><br><span class="line">            <span class="keyword">auto</span> str_hamburger_num = std_msgs::msg::<span class="built_in">String</span>();</span><br><span class="line">            str_hamburger_num.data = <span class="string">&quot;第&quot;</span> + std::<span class="built_in">to_string</span>(count++) + <span class="string">&quot;个汉堡&quot;</span>;</span><br><span class="line">            <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我卖出的%s&quot;</span>, str_hamburger_num.data.<span class="built_in">c_str</span>());</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 发布字符串流</span></span><br><span class="line">          <span class="comment">// 发布就这么写 &quot;发布器-&gt;publish(要发布的);&quot;, 简单吧</span></span><br><span class="line">            pub_hamburger-&gt;<span class="built_in">publish</span>(str_hamburger_num);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化rclcpp</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">// 产生一个KFC的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;KFCNode&gt;(<span class="string">&quot;KFC&quot;</span>);</span><br><span class="line">  <span class="comment">// spin函数: 一旦进入spin函数，相当于它在自己的函数里面死循环了。只要回调函数队列里面有callback函数在，它就会马上去执行callback函数。如果没有的话，它就会阻塞，不会占用CPU。注意不要再spin后面放其他东西, 他们都不会执行的</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">  <span class="comment">// 检测退出信号(ctrl+c)</span></span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="编写Customer节点"><a href="#编写Customer节点" class="headerlink" title="编写Customer节点"></a>编写Customer节点</h2><p>此段程序与上面相同的语句不再解释, 请读者自行类比</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;rclcpp/rclcpp.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/string.hpp&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/msg/u_int32.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样就能使用1000ms这种表示方式</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::chrono_literals;</span><br><span class="line"></span><br><span class="line"><span class="comment">//占位符</span></span><br><span class="line"><span class="keyword">using</span> std::placeholders::_1;</span><br><span class="line"><span class="keyword">using</span> std::placeholders::_2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个类节点，名字叫做CustomerNode,继承自Node.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomerNode</span> :</span> <span class="keyword">public</span> rclcpp::Node</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数,第一个参数为节点名称</span></span><br><span class="line">    <span class="built_in">CustomerNode</span>(std::string name) : <span class="built_in">Node</span>(name)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 打印Customer的自我介绍</span></span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;大家好,我是一个%s.&quot;</span>,name.<span class="built_in">c_str</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建订阅者,订阅hamburger</span></span><br><span class="line">        <span class="comment">// 占位符还记得吗? 复习一下, 此处的_1 表示const std_msgs::msg::String::SharedPtr msg</span></span><br><span class="line">        sub_hamburger = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::String&gt;(<span class="string">&quot;hamburger&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::hamburger_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建订阅者,订阅advertisement</span></span><br><span class="line">        sub_advertisement = <span class="keyword">this</span>-&gt;create_subscription&lt;std_msgs::msg::String&gt;(<span class="string">&quot;advertisement&quot;</span>, <span class="number">10</span>, std::<span class="built_in">bind</span>(&amp;CustomerNode::advertisement_callback, <span class="keyword">this</span>, _1));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建定时器,每1000ms饿一次</span></span><br><span class="line">        hungry_timer = <span class="keyword">this</span>-&gt;<span class="built_in">create_wall_timer</span>(<span class="number">1000</span>ms, std::<span class="built_in">bind</span>(&amp;CustomerNode::hungry_timer_callback, <span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建发布者,发布money</span></span><br><span class="line">        pub_money = <span class="keyword">this</span>-&gt;create_publisher&lt;std_msgs::msg::UInt32&gt;(<span class="string">&quot;money_of_hamburger&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 给money赋值</span></span><br><span class="line">        money.data = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次给钱</span></span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我饿了, 我要吃汉堡! 付款 %d 元&quot;</span>, money.data);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 新建一张钱</span></span><br><span class="line">    std_msgs::msg::UInt32 money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个定时器</span></span><br><span class="line">    rclcpp::TimerBase::SharedPtr hungry_timer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于订阅发出的汉堡</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr sub_hamburger;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个发布者,用于给KFC钱</span></span><br><span class="line">    rclcpp::Publisher&lt;std_msgs::msg::UInt32&gt;::SharedPtr pub_money;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个订阅者,用于订阅广告</span></span><br><span class="line">    rclcpp::Subscription&lt;std_msgs::msg::String&gt;::SharedPtr sub_advertisement;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 汉堡订阅者回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hamburger_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::String::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;这是我吃的 %s &quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 饥饿定时器回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hungry_timer_callback</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我又饿了, 还想再吃一个! 付款 %d 元&quot;</span>, money.data);</span><br><span class="line">        pub_money-&gt;<span class="built_in">publish</span>(money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 广告订阅者回调函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advertisement_callback</span><span class="params">(<span class="keyword">const</span> std_msgs::msg::String::SharedPtr msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">RCLCPP_INFO</span>(<span class="keyword">this</span>-&gt;<span class="built_in">get_logger</span>(), <span class="string">&quot;我收到了一条广告: %s &quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化rclcpp</span></span><br><span class="line">    rclcpp::<span class="built_in">init</span>(argc, argv);</span><br><span class="line">    <span class="comment">//产生一个Customer的节点</span></span><br><span class="line">    <span class="keyword">auto</span> node = std::make_shared&lt;CustomerNode&gt;(<span class="string">&quot;Customer&quot;</span>);</span><br><span class="line">    <span class="comment">//运行节点，并检测退出信号</span></span><br><span class="line">    rclcpp::<span class="built_in">spin</span>(node);</span><br><span class="line">    rclcpp::<span class="built_in">shutdown</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Cmakelist-txt"><a href="#Cmakelist-txt" class="headerlink" title="Cmakelist.txt"></a>Cmakelist.txt</h2><p>如果新建功能包的时候没有加<code>--dependencies rclcpp std_msgs</code>等功能包, 则需要手动添加: (任意位置均可)</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">find_package</span>(rclcpp REQUIRED)</span><br><span class="line"><span class="keyword">find_package</span>(std_msgs REQUIRED)</span><br></pre></td></tr></table></figure><p>下面两对代码的作用是: </p><p><code>add_executable()</code> 让编译器编译<code>Customer.cpp</code>和<code>KFC.cpp</code>这两个文件. 并生成可执行文件<code>Customer_node</code>和<code>KFC_node</code></p><p><code>ament_target_dependencies</code> 添加编译的依赖</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">add_executable</span>(Customer_node src/Customer.cpp)</span><br><span class="line">ament_target_dependencies(Customer_node rclcpp std_msgs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(KFC_node src/KFC.cpp)</span><br><span class="line">ament_target_dependencies(KFC_node rclcpp std_msgs)</span><br></pre></td></tr></table></figure><p>将编译好的文件安装到<code>install/customer_and_kfc/lib/customer_and_kfc</code>下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">install</span>(TARGETS</span><br><span class="line">  Customer_node</span><br><span class="line">  KFC_node</span><br><span class="line">  DESTINATION lib/<span class="variable">$&#123;PROJECT_NAME&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h2><p>同样地, 新建功能包的时候没有加<code>--dependencies rclcpp std_msgs</code>等功能包, 则需要手动添加, 放置于<code>&lt;package&gt;</code>标签下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>rclcpp<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">depend</span>&gt;</span>std_msgs<span class="tag">&lt;/<span class="name">depend</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可自行修改下面这些声明, 与实现功能无关, 但是最好写全</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>TODO: Package description<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maintainer</span> <span class="attr">email</span>=<span class="string">&quot;fanziqi@fanziqi.site&quot;</span>&gt;</span>fanziqi<span class="tag">&lt;/<span class="name">maintainer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">license</span>&gt;</span>TODO: License declaration<span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><code>--packages-select</code>指定编译<code>customer_and_kfc</code>功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">colcon build --packages-select customer_and_kfc </span><br></pre></td></tr></table></figure><p>刷新环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /ros2_ws/install/setup.zsh&quot;</span> &gt;&gt; ~/.bashrc  </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>新建一个终端窗口, 运行Customer节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc Customer_node</span><br></pre></td></tr></table></figure><p>再另新建一个终端, 运行KFC节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 run customer_and_kfc KFC_node</span><br></pre></td></tr></table></figure><p>此时应该可以看见: </p><p>Customer端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-Customer.png" alt="ROS2-Customer"></p><p>KFC端:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-KFC.png" alt="ROS2-KFC"></p><p>经验证, 需求全部实现~</p><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><h3 id="rqt-graph"><a href="#rqt-graph" class="headerlink" title="rqt_graph"></a>rqt_graph</h3><p>使用<code>rqt_graph</code>这个工具可以可视化显示节点和话题的连接关系</p><p>另起一个终端, 输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rqt_graph</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS2-rqt_graph.png" alt="ROS2-rqt_graph" style="zoom:67%;"></p><p>上图清晰地展示了ROS计算图的网络形态, 可以清楚地看出一个节点的输入和输出是什么.</p><h3 id="ros2-topic"><a href="#ros2-topic" class="headerlink" title="ros2 topic"></a>ros2 topic</h3><h4 id="查看系统中所有话题"><a href="#查看系统中所有话题" class="headerlink" title="查看系统中所有话题"></a>查看系统中所有话题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-list.png" alt="ros2-topic-list" style="zoom:67%;"></p><p>想具体查看每个话题传输的数据类型, 则添加<code>-t</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic list -t</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-list-t.png" alt="ros2-topic-list-t" style="zoom:67%;"></p><h4 id="输出实时话题内容"><a href="#输出实时话题内容" class="headerlink" title="输出实时话题内容"></a>输出实时话题内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic <span class="built_in">echo</span> /hamburger </span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-echo-hamburger.png" alt="ros2-topic-echo-hamburger" style="zoom:67%;"></p><h4 id="查看主题信息"><a href="#查看主题信息" class="headerlink" title="查看主题信息"></a>查看主题信息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic info /hamburger</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-info-hamburger.png" alt="ros2-topic-info-hamburger" style="zoom:67%;"></p><h4 id="查看话题的数据类型"><a href="#查看话题的数据类型" class="headerlink" title="查看话题的数据类型"></a>查看话题的数据类型</h4><p>节点之间要想成功建立数据传输，必须发布和订阅同样数据类型的消息，发布者发布的是速度指令，订阅者想订阅位置信息可是行不通的。</p><p>上文用<code>ros2 topic list -t</code>查看得知, <code>/advertisement</code>的类型为<code>std_msgs/msg/String</code></p><p>通过如下指令查看这个数据类型的具体数据结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 interface show std_msgs/msg/String</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-interface-show.png" alt="ros2-interface-show" style="zoom:67%;"></p><p>可以看到, <code>std_msgs/msg/String</code>中包含了<code>string data</code></p><h4 id="发布一个话题消息"><a href="#发布一个话题消息" class="headerlink" title="发布一个话题消息"></a>发布一个话题消息</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic pub /test_topic std_msgs/msg/String <span class="string">&#x27;data: &quot;123&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-pub-test-topic.png" alt="ros2-topic-pub-test-topic" style="zoom:67%;"></p><h4 id="查看某一个话题的发布频率"><a href="#查看某一个话题的发布频率" class="headerlink" title="查看某一个话题的发布频率"></a>查看某一个话题的发布频率</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ros2 topic hz /hamburger</span><br></pre></td></tr></table></figure><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros2-topic-hz-hamburger.png" alt="ros2-topic-hz-hamburger" style="zoom:67%;"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>固定Ubuntu下的端口号</title>
    <link href="http://www.fanziqi.site/posts/408ef5ae.html"/>
    <id>http://www.fanziqi.site/posts/408ef5ae.html</id>
    <published>2021-09-07T08:00:00.000Z</published>
    <updated>2021-09-07T06:41:35.882Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="固定Ubuntu下的端口号"><a href="#固定Ubuntu下的端口号" class="headerlink" title="固定Ubuntu下的端口号"></a>固定Ubuntu下的端口号</h1><p>Ubuntu下ttyUSB0和ttyUSB1经常不固定,序号取决于插入顺序,先插上的序号小</p><p>固定步骤如下:</p><ol><li><p>查看已插入的USB设备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsusb</span><br></pre></td></tr></table></figure><p>找到对应的USB设备,记下该设备的设备ID,如<code>10c4:ea60</code>,如果不确定是哪个的话,就拔下usb设备运行一次<code>lsusb</code>,再插上,多出来的就是需要设置的设备.</p></li><li><p>修改<code>rules.d</code>下的配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入目录</span></span><br><span class="line"><span class="built_in">cd</span> /etc/udev/rules.d</span><br><span class="line"><span class="comment">#新建.rules文件,名称任意</span></span><br><span class="line">touch usb.rules</span><br><span class="line"><span class="comment">#或直接编辑后保存</span></span><br><span class="line">sudo vi usb.rules</span><br></pre></td></tr></table></figure></li><li><p>打开刚刚新建的文件,添加如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KERNEL==<span class="string">&quot;ttyUSB*&quot;</span>, ATTRS&#123;idVendor&#125;==<span class="string">&quot;10c4&quot;</span>, ATTRS&#123;idProduct&#125;==<span class="string">&quot;ea60&quot;</span>, MODE:=<span class="string">&quot;0777&quot;</span>, SYMLINK+=<span class="string">&quot;YOUR_NAME&quot;</span></span><br></pre></td></tr></table></figure><p>其中,SYMLINK任意起名</p><p>退出vi编辑器,<code>wq</code>保存退出</p></li><li><p>重启udev</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service udev reload</span><br><span class="line">service udev restart</span><br></pre></td></tr></table></figure></li><li><p>重新插拔USB设备,查看端口号绑定</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /dev |grep ttyUSB</span><br></pre></td></tr></table></figure><p>显示:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx  1 root   root           7 Nov 29 14:03 YOUR_NAME -&gt; ttyUSB0</span><br></pre></td></tr></table></figure><p>打开设备时，用（/dev/YOUR_NAME）即可。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
    <category term="Ubuntu" scheme="http://www.fanziqi.site/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人学习——TF坐标变换</title>
    <link href="http://www.fanziqi.site/posts/5b37128a.html"/>
    <id>http://www.fanziqi.site/posts/5b37128a.html</id>
    <published>2021-09-04T08:00:00.000Z</published>
    <updated>2021-09-07T06:42:55.006Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS机器人学习——TF坐标变换"><a href="#ROS机器人学习——TF坐标变换" class="headerlink" title="ROS机器人学习——TF坐标变换"></a>ROS机器人学习——TF坐标变换</h1><h2 id="什么是TF"><a href="#什么是TF" class="headerlink" title="什么是TF"></a>什么是TF</h2><p><a href="http://wiki.ros.org/tf">tf-wiki</a></p><blockquote><p>tf is a package that lets the user keep track of multiple coordinate frames over time. tf maintains the relationship between coordinate frames in a tree structure buffered in time, and lets the user transform points, vectors, etc between any two coordinate frames at any desired point in time.</p></blockquote><p>将多个坐标系联系起来,使用tf树定义不同坐标系之间的平移与旋转变换关系，并且持续追踪多个坐标系内的变化情况。</p><h2 id="为什么需要坐标变换"><a href="#为什么需要坐标变换" class="headerlink" title="为什么需要坐标变换?"></a>为什么需要坐标变换?</h2><p>在ROS中定义了许多坐标系，有机器人坐标系(base_link)，有雷达坐标系(base_laser)，地图坐标系(map)，里程计坐标系(odom)等。以机器人中心为原点的坐标系，称为base_link坐标系，以激光雷达中心为原点的坐标系，称为base_laser坐标系。以下图机器人与激光雷达为例</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros-tf-1.png" alt="ros-tf-1"></p><p>机器人在运行过程中，激光雷达可以采集到周围障碍物的数据，这些数据是以激光雷达为原点(base_laser参考系)下的测量值。如果我们想使用这些数据帮助机器人完成避障功能，由于激光雷达并不在机器人的中心(base_link)之上，会始终存在一个雷达与机器人中心的偏差值。这个时候，如果我们采用一种坐标变换，将激光数据从base_laser参考系变换到base_link参考下，问题就解决了。所以我们需要定义这两个坐标系之间的变换关系,也就是<strong>TF坐标变换</strong></p><h2 id="TF变换实例"><a href="#TF变换实例" class="headerlink" title="TF变换实例"></a>TF变换实例</h2><p>在 <a href="https://www.fanziqi.site/posts/b6e9d4e.html">麦克纳姆轮运动学解算</a> 一文中,我提到了ROS的坐标系统与单位制,这里不再累述,请读者自行阅读</p><p>以机器人四轮与地面的接触面为X-Y平面，四轮轴心连线的点做垂线，与x-y平面的交点为base_link坐标系原点，车头朝向方向为X轴，正左方向为Y轴，向上为Z轴。如图所示:</p><p><strong>TODO:添加图片</strong></p><p>以思岚激光雷达为例，我们一般在安装时都习惯将雷达不带线的一端朝车头方向，雷达USB端的朝车尾方向,如图所示:</p><p><strong>TODO:添加图片</strong></p><p>雷达正中心为坐标原点，USB端的方向为X轴正方向，正左方向为Y轴，向上为Z轴。</p><p>测量雷达中心相对机器人坐标原点(0,0,0)的距离，得到雷达在机器人坐标系中(x:0.1,y:0.0,z:0.2)。前面我们提到，思岚雷达的X轴正方向与机器人的X轴正方向为相反方向，雷达坐标系需要绕Z轴顺时针旋转180度才能与机器人base_link坐标系重合 ，旋转(yaw:3.14,roll:0,pitch:0)。</p><p>根据这些数据，当我们获取激光数据后，采用(x: 0.1m, y: 0.0m, z: 0.2m, yaw:3.14, roll:0, pitch:0)的坐标变换，就可以将数据从base_laser参考系变换到base_link参考系，这就定义出了两个参考系之间的变换关系。</p><p>为了定义和存储base_link和base_laser两个参考系之间的关系，我们需要将他们添加到tf树中。从树的概念上来讲，tf树中的每个节点都对应一个参考系，而节点之间的边对应于参考系之间的变换关系。tf就是使用这样的树结构，保证每两个参考系之间只有一种遍历方式，而且所有变换关系，都是母节点到子节点的变换。</p><p>为了定义参考系，我们需要定义两个节点，一个对应于base_link参考系，一个对应于base_laser参考系。为了创建两个节点之间的边，我们首先需要决定哪一个节点作为母节点，哪一个节点作为子节点，这一点在tf树中是非常重要的。这里我们选择base_link作为母节点，这样会方便后边为机器人添加更多的传感器作为子节点.</p><h2 id="发布TF变换"><a href="#发布TF变换" class="headerlink" title="发布TF变换"></a>发布TF变换</h2><p>我们最常使用的是tf包中的static_transform_publisher，它即可在命令行直接运行，也可写在launch文件中配置坐标转换关系。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;node pkg=<span class="string">&quot;tf&quot;</span> type=<span class="string">&quot;static_transform_publisher&quot;</span> name=<span class="string">&quot;base_link_to_laser&quot;</span> args=<span class="string">&quot;0.065 0.0 0.245 1.57 0.0 0.0 /base_link /lidar 50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>pkg：包名，tf</li><li>type：类型，static_transform_publisher</li><li>name：名称，自定，便于理解</li><li>arg：tf参数， x y z yaw pitch roll frame_id child_frame_id period_in_ms<ul><li>x y z 分别代表着相应轴的平移，单位是 米。</li><li>yaw pitch roll 分别代表着绕z y x 三个轴的转动，单位是 弧度。</li><li>frame_id 为坐标系变换中的父坐标系， child_frame_id为坐标系变换中的子坐标系。(传感器的frame_id的名称根据厂商或有不同，一般在驱动启动launch可查看，思岚激光雷达的frame_id为/lidar)</li><li>period_in_ms 为发布频率，单位为 毫秒。通常取100。一毫秒为一秒的千分之一，100毫秒即为0.1秒，也就是10Hz。</li></ul></li></ul><h2 id="TF常用工具"><a href="#TF常用工具" class="headerlink" title="TF常用工具"></a>TF常用工具</h2><ul><li><p>tf_monitor 打印tf树中所有参考系信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf_monitor &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure></li><li><p>tf_echo 查看指定作消息之间的变换关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf_echo &lt;source_frame&gt; &lt;target_frame&gt;</span><br></pre></td></tr></table></figure></li><li><p>static_transform_publisher 发布两个参考系之间的的静态坐标关系</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static_transform_publisher x y z yaw pitch roll frame id child frame id period</span><br></pre></td></tr></table></figure></li><li><p>view_frame 可视化的调试工具,可以生成pdf文件显示tf树信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun tf view_frames</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/autolabor/article/details/86492895">https://blog.csdn.net/autolabor/article/details/86492895</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>麦克纳姆轮运动学解算</title>
    <link href="http://www.fanziqi.site/posts/b6e9d4e.html"/>
    <id>http://www.fanziqi.site/posts/b6e9d4e.html</id>
    <published>2021-09-01T15:00:00.000Z</published>
    <updated>2021-09-02T02:28:42.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="麦克纳姆轮运动学解算"><a href="#麦克纳姆轮运动学解算" class="headerlink" title="麦克纳姆轮运动学解算"></a>麦克纳姆轮运动学解算</h1><h2 id="一、麦克纳姆轮介绍"><a href="#一、麦克纳姆轮介绍" class="headerlink" title="一、麦克纳姆轮介绍"></a>一、麦克纳姆轮介绍</h2><p>了解过Robomaster的同学都知道，RM战车所用的轮子均为麦克纳姆轮，这种轮子安装方式与普通轮子无异，可安装于平行轴上，但是麦克纳姆轮可以实现全向移动，即<strong>前后运动</strong>、<strong>水平移动</strong>、<strong>绕中心自转</strong>。正因为以上优点，许多工业上的全向移动平台都会应用这种轮子。缺点也有，就是不耐磨，需要定期更换。</p><p>麦克纳姆轮由两部分组成：<strong>轮毂</strong>和<strong>辊子</strong>，轮毂为轮子的主体，辊子为轮毂周围的类似椭球体的小轮子，轮毂和辊子都有自己的轴，且轮毂轴与辊子轴夹角为45°（可以为其他角度但45°角最为常见）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-1.png" alt="ML-1" style="zoom: 25%;"></p><p>麦轮的安装方式也有讲究，虽然都是同轴安装，但与普通轮子不同，麦轮分为左旋和右旋两种，在一个四轮底盘上需要用两个左旋和两个右旋。安装方式为O型，如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-2.png" alt="ML-2"></p><p>左图为安装后你看到的样子，右图为四个轮子与地面接触的辊子围成的形状，也就是“O形”</p><p><strong>这里的O形指的是与地面接触的辊子围成的形状噢，不要再问为什么左图看起来是个X了</strong></p><h2 id="二、麦克纳姆轮运动学模型"><a href="#二、麦克纳姆轮运动学模型" class="headerlink" title="二、麦克纳姆轮运动学模型"></a>二、麦克纳姆轮运动学模型</h2><h3 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1. 基础知识"></a>1. 基础知识</h3><h4 id="1-1-坐标系统"><a href="#1-1-坐标系统" class="headerlink" title="1.1 坐标系统"></a>1.1 坐标系统</h4><p>在ROS机器人中，坐标系统使用右手定义</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-3.png" alt="ML-3"></p><p>对于ROS机器人，如果以它为坐标系的原点，那么</p><ul><li>x轴：前方</li><li>y轴：左方</li><li>z轴：上方</li></ul><p>如图所示：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-4.png" alt="ML-4"></p><p>除此之外，对于旋转运动，也使用右手定义：</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-5.png" alt="ML-5" style="zoom:150%;"></p><p>根据<strong>右手定义</strong>，围绕 <strong>z轴正旋转</strong> 是 <strong>逆时针旋转</strong></p><h4 id="1-2-测量单位"><a href="#1-2-测量单位" class="headerlink" title="1.2 测量单位"></a>1.2 测量单位</h4><p>ROS使用公制 ：</p><ul><li>线速度：<code>m/s</code></li><li>角速度：<code>rad/s</code></li></ul><h4 id="1-3-轮子序号定义"><a href="#1-3-轮子序号定义" class="headerlink" title="1.3 轮子序号定义"></a>1.3 轮子序号定义</h4><p>左前<strong>1</strong> 右前<strong>2</strong></p><p>左后<strong>3</strong> 右后<strong>4</strong></p><h3 id="2-逆运动学解析"><a href="#2-逆运动学解析" class="headerlink" title="2. 逆运动学解析"></a>2. 逆运动学解析</h3><p>逆运动学模型（inverse kinematic model）得到的公式可以根据底盘的运动状态解算出四个轮子的速度。</p><h4 id="2-1-底盘运动的分解"><a href="#2-1-底盘运动的分解" class="headerlink" title="2.1 底盘运动的分解"></a>2.1 底盘运动的分解</h4><p>刚体在平面内的运动可以分解为三个独立分量：X轴平动、Y轴平动、yaw 轴自转。底盘的运动也可以分解为三个量：</p><p>如下图所示:</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-6.PNG" alt="ML-6"></p><ul><li>$v_{tx}$ 表示 X 轴运动的速度，即前后方向，定义向前为正；</li><li>$v_{ty}$ 表示 Y 轴运动的速度，即左右方向，定义向左为正；</li><li>$\overrightarrow{\omega}$ 表示 yaw 轴自转的角速度，定义逆时针为正。</li></ul><h4 id="2-2-计算轮子轴心位置的速度"><a href="#2-2-计算轮子轴心位置的速度" class="headerlink" title="2.2 计算轮子轴心位置的速度"></a>2.2 计算轮子轴心位置的速度</h4><p>如下图所示，以右前轮为例，蓝色的方框代表轮子，定义以下变量：</p><ul><li>$\overrightarrow{r}$为从底盘中心指向轮子轴心的矢量；</li><li>$\overrightarrow{v}$为轮子轴心的速度矢量；</li><li>$\overrightarrow{v_r}$为轮子轴心沿垂直于$\overrightarrow{r}$的方向（即切线方向）的速度分量；</li></ul><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-7.PNG" alt="ML-7" style="zoom: 67%;"></p><p>可以计算出：</p><script type="math/tex; mode=display">\begin{align*}\overrightarrow{v} &= \overrightarrow{v_t}+\overrightarrow{v_r} \\ &= \overrightarrow{v_t}+\overrightarrow{\omega}\times\overrightarrow{r}\end{align*}</script><p>将$\overrightarrow{r}$分解为$r_x$和$r_y$，分别计算轮子轴心在X、Y轴的速度分量：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_x=v_{tx}+\omega\cdot{r_y} \\ v_y=v_{ty}+\omega\cdot{r_x}\end{matrix}\right.</script><p>其他三个轮子同理</p><h4 id="2-3计算与地面接触的辊子速度"><a href="#2-3计算与地面接触的辊子速度" class="headerlink" title="2.3计算与地面接触的辊子速度"></a>2.3计算与地面接触的辊子速度</h4><p>由2.2算得的轮子轴心速度，可以分解为沿辊子轴方向的$\overrightarrow{v_\parallel}$ 和垂直辊子轴方向的 $\overrightarrow{v_\perp}$ ，如图所示</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-8.PNG" alt="ML-8" style="zoom:50%;"></p><p>其中$\overrightarrow{v_\perp}$用于让辊子空转，可以忽略</p><p>定义一个沿辊子方向的单位矢量$\hat{e}$，对于右前轮来说，$\hat{e}=\frac{1}{\sqrt{2}}\cdot\hat{i}+\frac{1}{\sqrt{2}}\cdot\hat{j}$</p><p>则沿轴线的速度为$\overrightarrow{v}$在$\hat{e}$方向的投影：</p><script type="math/tex; mode=display">\begin{align*} \overrightarrow{v_\parallel}&=\overrightarrow{v}\cdot\hat{e} \\  &=(v_x\cdot\hat{i}+v_y\cdot\hat{j})\cdot(\frac{1}{\sqrt{2}}\cdot\hat{i}+\frac{1}{\sqrt{2}}\cdot\hat{j}) \\  &= \frac{1}{\sqrt{2}}v_x+\frac{1}{\sqrt{2}}v_y\end{align*}</script><h4 id="2-4-计算轮子的转速（和地面接触点的线速度）"><a href="#2-4-计算轮子的转速（和地面接触点的线速度）" class="headerlink" title="2.4 计算轮子的转速（和地面接触点的线速度）"></a>2.4 计算轮子的转速（和地面接触点的线速度）</h4><p>如图所示，轮子转速为$v_w$</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ML-9.PNG" alt="ML-9" style="zoom:50%;"></p><p>由于辊子与轮轴呈45°角，则$v_\omega$可求得：</p><script type="math/tex; mode=display">\begin{align*} v_w&=\frac{v_\parallel}{cos45^{\circ}} \\  &=\sqrt{2}(\frac{1}{\sqrt{2}}v_x+\frac{1}{\sqrt{2}}v_y) \\  &= v_x+v_y\end{align*}</script><p>将2.2求出的$\left\{\begin{matrix}<br>v_x=v_{tx}+\omega\cdot{r_y} \\<br>v_y=v_{ty}+\omega\cdot{r_x}<br>\end{matrix}\right.$带入上式，可求出此轮的转速：</p><script type="math/tex; mode=display">v_w=v_{tx}+v_{ty}+\omega(r_x+r_y)</script><p>结合以上四个步骤，可以根据底盘运动状态解算出四个轮子的转速：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_{w1}=v_{tx}-v_{ty}-\omega(r_x+r_y)\\ v_{w2}=v_{tx}+v_{ty}+\omega(r_x+r_y)\\ v_{w3}=v_{tx}+v_{ty}-\omega(r_x+r_y)\\ v_{w4}=v_{tx}-v_{ty}+\omega(r_x+r_y)\end{matrix}\right.</script><p>以上方程组就是O形麦轮底盘的逆运动学模型。</p><h4 id="2-5-代码实现"><a href="#2-5-代码实现" class="headerlink" title="2.5 代码实现"></a>2.5 代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_RESOLUTION      1440.0   <span class="comment">//编码器分辨率, 轮子转一圈，编码器产生的脉冲数</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WHEEL_DIAMETER          0.058    <span class="comment">//轮子直径,单位：米</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D_X                     0.18     <span class="comment">//底盘Y轴上两轮中心的间距</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> D_Y                     0.25     <span class="comment">//底盘X轴上两轮中心的间距</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PID_RATE                50       <span class="comment">//PID调节PWM值的频率</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> pulse_per_meter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> rx_plus_ry_cali = <span class="number">0.3</span>;</span><br><span class="line"><span class="keyword">double</span> angular_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">double</span> linear_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">double</span> angular_correction_factor = <span class="number">1.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数作用：运动学解析参数初始化</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//轮子转动一圈，移动的距离为轮子的周长WHEEL_DIAMETER*3.1415926，编码器产生的脉冲信号为ENCODER_RESOLUTION。则电机编码器转一圈产生的脉冲信号除以轮子周长可得轮子前进1m的距离所对应编码器计数的变化</span></span><br><span class="line">    pulse_per_meter = (<span class="keyword">float</span>)(ENCODER_RESOLUTION/(WHEEL_DIAMETER*<span class="number">3.1415926</span>))/linear_correction_factor;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">float</span> r_x = D_X/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">float</span> r_y = D_Y/<span class="number">2</span>;</span><br><span class="line">    rx_plus_ry_cali = (r_x + r_y)/angular_correction_factor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数作用：逆向运动学解析，底盘三轴速度--&gt;轮子速度</span></span><br><span class="line"><span class="comment">  * @输入：机器人三轴速度 m/s</span></span><br><span class="line"><span class="comment">  * @输出：电机应达到的目标速度（一个PID控制周期内，电机编码器计数值的变化）</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Inverse</span><span class="params">(<span class="keyword">int16_t</span>* input, <span class="keyword">int16_t</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">float</span> v_tx   = (<span class="keyword">float</span>)input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">float</span> v_ty   = (<span class="keyword">float</span>)input[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">float</span> omega = (<span class="keyword">float</span>)input[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">float</span> v_w[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">v_w[<span class="number">0</span>] = v_tx - v_ty - (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">1</span>] = v_tx + v_ty + (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">2</span>] = v_tx + v_ty - (r_x + r_y)*omega;</span><br><span class="line">v_w[<span class="number">3</span>] = v_tx - v_ty + (r_x + r_y)*omega;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算一个PID控制周期内，电机编码器计数值的变化</span></span><br><span class="line">output[<span class="number">0</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">0</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">1</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">1</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">2</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">2</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">output[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(v_w[<span class="number">3</span>] * pulse_per_meter/PID_RATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-正运动学解析"><a href="#3-正运动学解析" class="headerlink" title="3. 正运动学解析"></a>3. 正运动学解析</h3><h4 id="3-1-正运动学模型"><a href="#3-1-正运动学模型" class="headerlink" title="3.1 正运动学模型"></a>3.1 正运动学模型</h4><p>正运动学模型（forward kinematic model）让我们可以通过四个轮子的速度，计算出底盘的运动状态。可以直接根据逆运动学模型中的三个方程解出来，比如：</p><script type="math/tex; mode=display">\left\{\begin{matrix}v_{tx}=\frac{v_4+v_3}{2}\\ v_{ty}=\frac{v_3-v_1}{2}\\ \omega=\frac{v_2-v_3}{2(r_x+r_y)}\end{matrix}\right.</script><p>转换为底盘坐标系下对时间求积分即为里程计变化量</p><h4 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//参数宏定义</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_MAX 32767        </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_MIN -32768 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_LOW_WRAP  ((ENCODER_MAX - ENCODER_MIN)*0.3+ENCODER_MIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ENCODER_HIGH_WRAP ((ENCODER_MAX - ENCODER_MIN)*0.7+ENCODER_MIN)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415926</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量定义</span></span><br><span class="line"><span class="keyword">int32_t</span>  wheel_turns[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int32_t</span>  encoder_sum_current[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @函数功能：正向运动学解析，轮子编码值-&gt;底盘三轴里程计坐标</span></span><br><span class="line"><span class="comment">  * @输入：编码器累加值</span></span><br><span class="line"><span class="comment">  * @输出：三轴里程计 x y yaw</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kinematics_Forward</span><span class="params">(<span class="keyword">int16_t</span>* input, <span class="keyword">int16_t</span>* output)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> dv_w_times_dt[<span class="number">4</span>]; <span class="comment">//轮子瞬时变化量dxw=dvw*dt</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">double</span> dv_t_times_dt[<span class="number">3</span>]; <span class="comment">//底盘瞬时变化量dxt=dvt*dt</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int16_t</span> encoder_sum[<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将左面轮子编码器累加值乘以-1，以计算前进的距离</span></span><br><span class="line">encoder_sum[<span class="number">0</span>] = -input[<span class="number">0</span>];</span><br><span class="line">encoder_sum[<span class="number">1</span>] = input[<span class="number">1</span>];</span><br><span class="line">encoder_sum[<span class="number">2</span>] = -input[<span class="number">2</span>];</span><br><span class="line">encoder_sum[<span class="number">3</span>] = input[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码器计数溢出处理</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(encoder_sum[i] &lt; ENCODER_LOW_WRAP &amp;&amp; encoder_sum_current[i] &gt; ENCODER_HIGH_WRAP)</span><br><span class="line">wheel_turns[i]++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(encoder_sum[i] &gt; ENCODER_HIGH_WRAP &amp;&amp; encoder_sum_current[i] &lt; ENCODER_LOW_WRAP)</span><br><span class="line">wheel_turns[i]--;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">wheel_turns[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将编码器数值转化为前进的距离，单位m</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">dv_w_times_dt[i] = <span class="number">1.0</span>*(encoder_sum[i] + wheel_turns[i]*(ENCODER_MAX-ENCODER_MIN)-encoder_sum_current[i])/pulse_per_meter;</span><br><span class="line">encoder_sum_current[i] = encoder_sum[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//要计算坐标所以变回来</span></span><br><span class="line">dv_w_times_dt[<span class="number">0</span>] = -dv_w_times_dt[<span class="number">0</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">1</span>] =  dv_w_times_dt[<span class="number">1</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">2</span>] = -dv_w_times_dt[<span class="number">2</span>];</span><br><span class="line">dv_w_times_dt[<span class="number">3</span>] =  dv_w_times_dt[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算底盘坐标系(base_link)下x轴、y轴变化距离m与Yaw轴朝向变化rad 一段时间内的变化量</span></span><br><span class="line">dv_t_times_dt[<span class="number">0</span>] = ( dv_w_times_dt[<span class="number">3</span>] + dv_w_times_dt[<span class="number">2</span>])/<span class="number">2.0</span>;</span><br><span class="line">dv_t_times_dt[<span class="number">1</span>] = ( dv_w_times_dt[<span class="number">2</span>] - dv_w_times_dt[<span class="number">0</span>])/<span class="number">2.0</span>;</span><br><span class="line">dv_t_times_dt[<span class="number">2</span>] = ( dv_w_times_dt[<span class="number">1</span>] - dv_w_times_dt[<span class="number">2</span>])/(<span class="number">2</span>*wheel_track_cali);</span><br><span class="line"></span><br><span class="line"><span class="comment">//积分计算里程计坐标系(odom_frame)下的机器人X,Y,Yaw轴坐标</span></span><br><span class="line"><span class="comment">//dx = ( vx*cos(theta) - vy*sin(theta) )*dt</span></span><br><span class="line"><span class="comment">//dy = ( vx*sin(theta) + vy*cos(theta) )*dt</span></span><br><span class="line">output[<span class="number">0</span>] += (<span class="keyword">int16_t</span>)(<span class="built_in">cos</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">0</span>] - <span class="built_in">sin</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">1</span>] += (<span class="keyword">int16_t</span>)(<span class="built_in">sin</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">0</span>] + <span class="built_in">cos</span>((<span class="keyword">double</span>)output[<span class="number">2</span>])*dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">2</span>] += (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">2</span>]*<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Yaw轴坐标变化范围控制-2Π -&gt; 2Π</span></span><br><span class="line"><span class="keyword">if</span>(output[<span class="number">2</span>] &gt; PI)</span><br><span class="line">output[<span class="number">2</span>] -= <span class="number">2</span>*PI;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(output[<span class="number">2</span>] &lt; -PI)</span><br><span class="line">output[<span class="number">2</span>] += <span class="number">2</span>*PI;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送机器人X轴y轴Yaw轴瞬时变化量，在ROS端除以时间</span></span><br><span class="line">output[<span class="number">3</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">0</span>]);</span><br><span class="line">output[<span class="number">4</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">1</span>]);</span><br><span class="line">output[<span class="number">5</span>] = (<span class="keyword">int16_t</span>)(dv_t_times_dt[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>【1】<a href="https://zhuanlan.zhihu.com/p/20282234">https://zhuanlan.zhihu.com/p/20282234</a></p><p>【2】<a href="https://blog.csdn.net/shixiaolu63/article/details/78496457">https://blog.csdn.net/shixiaolu63/article/details/78496457</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Chrome多设备书签同步方案</title>
    <link href="http://www.fanziqi.site/posts/a53da602.html"/>
    <id>http://www.fanziqi.site/posts/a53da602.html</id>
    <published>2021-08-30T15:15:00.000Z</published>
    <updated>2021-09-01T14:57:35.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Chrome多设备书签同步方案"><a href="#Chrome多设备书签同步方案" class="headerlink" title="Chrome多设备书签同步方案"></a>Chrome多设备书签同步方案</h1><p>众所周知因为某些原因Chrome无法与它的服务器正常通讯,这就影响到了我们书签的同步,这里介绍一个插件,将书签同步到GitHub或GItee上.</p><p>项目地址: ↓ </p><p><a href="https://github.com/CLDeveloping/chrome-bookmark">Github项目</a> | <a href="https://gitee.com/CLCoding/chrome-bookmark">Gitee项目</a></p><ul><li>将项目整个下载下来,解压缩,在浏览器地址栏输入：<code>chrome://extensions/</code>，进入扩展程序管理界面</li><li>点击【加载已解压的扩展程序】-&gt; 选择项目根目录，导入源码文件夹</li><li>这里只介绍GitHub操作.进入自己的GitHub创建一个私有项目,随便命名</li><li>获取Github项目<a href="https://github.com/settings/tokens">私有访问Token</a>（如何获取：Github -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token）选择repo,时间选无限,将生成的token拷贝下来,这个只会出现一次,最好拿小本本记下来</li><li>点击书签工具配置,将仓库地址和token填入,选择保存配置</li><li>重新点击书签图标工具，就可以选择上传或者下载书签了</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Chrome" scheme="http://www.fanziqi.site/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>MPU6050-DMP读不出数据</title>
    <link href="http://www.fanziqi.site/posts/bfa5a820.html"/>
    <id>http://www.fanziqi.site/posts/bfa5a820.html</id>
    <published>2021-08-30T04:00:00.000Z</published>
    <updated>2021-08-30T04:20:57.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MPU6050-DMP读不出数据"><a href="#MPU6050-DMP读不出数据" class="headerlink" title="MPU6050-DMP读不出数据"></a>MPU6050-DMP读不出数据</h1><p>遇上一个很头疼的问题，MPU6050可以正常读取三个轴的数据，但是使用DMP方式读取数据时，会卡在这一句上</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Get a packet. */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">mpu_read_fifo_stream</span>(dmp.packet_length, fifo_data, more))</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>进入此函数，通过逐句debug，发现卡在这一句上了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!st.chip_cfg.dmp_on)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>问题来了，这说的是dmp没有打开啊？？可是前面命名已经使能了DMP</p><p>于是打开百度，同样问题的解答有以下几点</p><ul><li>MPU6050供电问题，经检查确实为3.3V，故排除</li><li>FIFO没有使能，经检查也有使能，排除</li></ul><p>嘶 那问题出在哪呢</p><p><strong>MPU6050不讲武德，它坏了</strong></p><p><strong>换一个芯片就好了</strong></p><p><strong>RNM退钱！</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人学习——ROS基础</title>
    <link href="http://www.fanziqi.site/posts/eb3a5cff.html"/>
    <id>http://www.fanziqi.site/posts/eb3a5cff.html</id>
    <published>2021-08-25T14:00:00.000Z</published>
    <updated>2021-09-01T14:55:41.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ROS机器人学习——ROS基础"><a href="#ROS机器人学习——ROS基础" class="headerlink" title="ROS机器人学习——ROS基础"></a>ROS机器人学习——ROS基础</h1><h2 id="ROS系统结构"><a href="#ROS系统结构" class="headerlink" title="ROS系统结构"></a>ROS系统结构</h2><ol><li>节点(Node) : 软件模块</li><li>节点管理器(ROS Master) : 控制中心,提供参数管理</li><li>话题(Topic) : 异步通信机制,传输消息Message,可有多个发布者和订阅者</li><li>服务(Service) : 同步通信机制,传输请求/应答数据,只允许有一个节点提供指定命名的服务</li></ol><h2 id="ROS工作空间"><a href="#ROS工作空间" class="headerlink" title="ROS工作空间"></a>ROS工作空间</h2><p>工作空间(workspace)是存放工程相关文件的文件夹,包括以下四个目录空间</p><ul><li><code>src</code>:代码空间,存放源码</li><li><code>build</code>:编译空间,存储编译的缓存和中间文件</li><li><code>devel</code>:开发空间,存放编译生成的可执行文件</li><li><code>install</code>:安装空间,非必须</li></ul><h3 id="创建工作空间"><a href="#创建工作空间" class="headerlink" title="创建工作空间"></a>创建工作空间</h3><p>(以下使用<code>WORKSPACE</code>代表你的工作空间名)</p><ol><li><p>创建工作空间</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    mkdir -p ~/WORKSPACE/src</span><br><span class="line">    <span class="built_in">cd</span> ~/WORKSPACE/src</span><br><span class="line">catkin_init_workspace</span><br></pre></td></tr></table></figure></li><li><p>编译工作空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/WORKSPACE/</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure></li><li><p>设置环境变量</p><p> 编译完成后,会自动产生<code>build</code>和<code>devel</code>,<code>devel</code>文件夹中会产生<code>setup.*sh</code>样子的环境变量设置脚本,用<code>source</code>运行脚本,以生效工作空间中的环境变量.</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br></pre></td></tr></table></figure><p> 但是这么设置环境变量只能在当前终端下生效,如希望在所有终端都生效,则需要在终端的配置文件中添加环境变量的设置:</p></li></ol><pre><code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /WORKSPACE/devel/setup.bash&quot;</span>&gt;&gt;~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></code></pre><ol><li><p>检查环境变量</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure><p> 如果打印的路径中包含当前工作空间的路径,说明环境变量设置成功.</p><p> <strong>TODO:添加成功的截图</strong></p></li></ol><h3 id="创建功能包"><a href="#创建功能包" class="headerlink" title="创建功能包"></a>创建功能包</h3><p>(以下使用<code>PACKAGE</code>代表创建的功能包)</p><p>功能包结构:</p><p>PACKAGE/</p><p>​        CmakeList.txt    -&gt; 纪录功能报的编译规则</p><p>​        package.xml    -&gt; 描述功能包属性的信息</p><p>​        ……</p><p><strong>功能包不能嵌套,多个功能包需平行放置于代码空间<code>src</code>中</strong></p><ol><li><p>创建功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># catkin_create_pkg命令使用方法:</span></span><br><span class="line"><span class="comment"># catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</span></span><br><span class="line"><span class="built_in">cd</span> ~/WORKSPACE/src</span><br><span class="line">catkin_create_pkg learning_communication std_msgs rospy roscpp</span><br></pre></td></tr></table></figure><p>创建完成后,src下会生成一个<code>learning_communication</code>文件夹,已包含<code>CmakeList.txt</code>和<code>package.xml</code></p></li><li><p>编译功能包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/WORKSPACE</span><br><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> ~/WORKSPACE/devel/setup.bash</span><br></pre></td></tr></table></figure><p><strong>同一工作空间下不能存在同名功能包</strong></p><p><strong>不同工作空间下可以存在同名功能包</strong></p></li></ol><p>所有工作空间的路径会依次顺序记录在ROS_PACKAGE_PATH环境变量中,即新的路径会排在前面.当在不同工作空间下存在同名功能包,ROS会优先查找纪录在最前端的工作空间中有没有需要的功能包,如果不存在则继续向下查找.</p><p>可通过以下命令查看所有ROS的环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">env | grep ros</span><br></pre></td></tr></table></figure><p>查找功能包存放路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rospack find PACKAGE</span><br></pre></td></tr></table></figure><p><strong>TODO:添加查找功能包的路径图片</strong></p><h2 id="ROS通信编程"><a href="#ROS通信编程" class="headerlink" title="ROS通信编程"></a>ROS通信编程</h2><h3 id="话题编程"><a href="#话题编程" class="headerlink" title="话题编程"></a>话题编程</h3><p>话题编程流程</p><ol><li>创建发布者</li><li>创建订阅者</li><li>添加编译选项</li><li>添加可执行程序</li></ol><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros-%E8%AF%9D%E9%A2%98.png" alt="截屏2021-08-25 下午7.46.04" style="zoom: 33%;"></p><h4 id="创建发布者Publisher"><a href="#创建发布者Publisher" class="headerlink" title="创建发布者Publisher"></a>创建发布者Publisher</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * talker.cpp</span></span><br><span class="line"><span class="comment"> * 创建一个Publisher,发布chatter话题,发布字符串&quot;Hello World&quot;,类型为string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ROS节点初始化,节点名称为talker</span></span><br><span class="line">  <span class="comment">// 注:节点名称必须唯一 </span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;talker&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建节点句柄,方便管理节电资源的使用和管理</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个Publisher，发布名为chatter的topic，消息类型为std_msgs::String</span></span><br><span class="line">  <span class="comment">// 1000为消息发布队列大小,当发布消息实际速度较慢时,Publisher会将消息存储在一定空间的队列中,当消息数量超过队列大小时,ROS会自动删除队列中最早入队的消息</span></span><br><span class="line">  ros::Publisher chatter_pub = n.advertise&lt;std_msgs::String&gt;(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置循环的频率,单位为Hz</span></span><br><span class="line">  <span class="comment">// 当调用Rate::sleep()时,ROS节点会根据此处设置的频率休眠响应的时间,以保证维持一致的时间周期.</span></span><br><span class="line">  <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 发生异常,ros::ok()返回false,跳出循环</span></span><br><span class="line">  <span class="comment">// 异常包括 1.Ctrl+C/2.被另外同名节点踢掉线/3.节点调用了关闭函数ros::shutdown()/4.所有ros::NodeHandles句柄被销毁</span></span><br><span class="line">  <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 初始化std_msgs::String类型的消息msg,msg只有一个成员data</span></span><br><span class="line">    std_msgs::String msg;</span><br><span class="line">    std::stringstream ss;</span><br><span class="line">    ss &lt;&lt; <span class="string">&quot;hello world &quot;</span> &lt;&lt; count;</span><br><span class="line">    <span class="comment">/*这一句一般出现在创建ROS话题的发布者（Publisher）节点程序中，是利用c++自带的头文件sstream，来实现利用输入输出流的方式往string里写东西，并且还可以拼接string和其他类型的变量。</span></span><br><span class="line"><span class="comment">    *该语句实现了string型的数据&quot;hello world&quot;和int型变量count的拼接，形成一个新的string。即如果count是１，那么hello world1会作为string被存放在ss当中。</span></span><br><span class="line"><span class="comment">    *使用ss.str()调用这个string。最后可以用ROS_INFO输出。  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    msg.data = ss.<span class="built_in">str</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ROS_INFO类似于printf/cout,用来打印日志信息</span></span><br><span class="line">    <span class="comment">// c_str()函数返回一个指向正规C字符串的指针常量, 内容与本string串相同. </span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;%s&quot;</span>, msg.data.<span class="built_in">c_str</span>());</span><br><span class="line">    <span class="comment">// 发布消息</span></span><br><span class="line">    chatter_pub.<span class="built_in">publish</span>(msg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来处理节点订阅话题的所有回调函数(目前的发布节点没有订阅信息,此函数非必须,但为了保证不出错所以所有节点都默认加入该函数)</span></span><br><span class="line">    ros::<span class="built_in">spinOnce</span>();</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 目前为止,Publisher一个周期的工作完成了,让他休息一段时间,100ms后开始下一周期的工作</span></span><br><span class="line">    loop_rate.<span class="built_in">sleep</span>();</span><br><span class="line">    ++count;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建订阅者Subscriber"><a href="#创建订阅者Subscriber" class="headerlink" title="创建订阅者Subscriber"></a>创建订阅者Subscriber</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * listener.cpp</span></span><br><span class="line"><span class="comment"> * 创建一个Subscriber,订阅chatter话题，消息类型String</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;std_msgs/String.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收到订阅的消息后，会进入消息回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::String::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 将接收到的消息打印出来</span></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;I heard: [%s]&quot;</span>, msg-&gt;data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 初始化ROS节点</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;listener&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建节点句柄</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 订阅节点需要声明订阅信息,该信息会在ROS Master中注册,Master会关注系统中是否存在发布该话题的节点,若存在则会帮助两个节点建立连接,完成数据传输</span></span><br><span class="line">  <span class="comment">// 创建一个Subscriber，订阅名为chatter的topic，注册回调函数chatterCallback</span></span><br><span class="line">  ros::Subscriber sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;chatter&quot;</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 循环等待回调函数,此函数在ros::ok()返回false时退出</span></span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译功能包"><a href="#编译功能包" class="headerlink" title="编译功能包"></a>编译功能包</h4><p>设置编译规则<code>CmakeList.txt</code></p><ol><li><p>设置头文件路径</p><p> <code>include_directories(头文件相对路径)</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Specify additional locations of header files</span></span><br><span class="line"><span class="comment">## Your package locations should be listed before other locations </span></span><br><span class="line">include_directories(</span><br><span class="line">  include</span><br><span class="line">  <span class="variable">$&#123;catkin_INCLUDE_DIRS&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>设置需要编译的代码和可生成的可执行文件 </p><p><code>add_executable(生成的可执行文件 参与编译的源码文件1 参与编译的源码文件2)</code></p></li><li><p>配置链接的第三方库文件</p><p><code>target_link_libraries(生成的可执行文件 链接的库1 链接的库2)</code></p></li><li><p>若生成的可执行文件需要依赖其他文件生成的代码,如消息类型,则需设置依赖</p><p><code>add_dependencies(生成的可执行文件 $&#123;PROJECT_NAME&#125;_generate_messages_cpp)</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Declare a C++ executable</span></span><br><span class="line"><span class="comment">## With catkin_make all packages are built within a single CMake context</span></span><br><span class="line"><span class="comment">## The recommended prefix ensures that target names across packages don&#x27;t collide</span></span><br><span class="line">add_executable(talker src/talker.cpp)</span><br><span class="line">target_link_libraries(talker <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="comment">#add_dependencies(talker $&#123;PROJECT_NAME&#125;_generate_messages_cpp)</span></span><br><span class="line"></span><br><span class="line">add_executable(listener src/listener.cpp)</span><br><span class="line">target_link_libraries(listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="comment">#add_dependencies(listener $&#123;PROJECT_NAME&#125;_generate_messages_cpp)</span></span><br></pre></td></tr></table></figure></li></ol><p>在工作空间路径下编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/WORKSPACE</span><br><span class="line">catkin_make</span><br></pre></td></tr></table></figure><p>系统会生成<code>talker</code>和<code>listener</code>两个可执行文件,位于<code>~/WORKSPACE/devel/lib/PACKAGE</code>路径下</p><h4 id="运行功能包"><a href="#运行功能包" class="headerlink" title="运行功能包"></a>运行功能包</h4><p>每次编译之后都需要设置环境变量,假定已将环境变量脚本添加到终端配置文件中,运行以下代码刷新环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><ol><li><p>启动<code>roscore</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure></li><li><p>启动<code>Publisher</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_communication talker</span><br></pre></td></tr></table></figure><p><strong>(TODO:添加运行截图)</strong></p></li><li><p>启动<code>Subscriber</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_communication listener</span><br></pre></td></tr></table></figure><p><strong>(TODO:添加运行截图)</strong></p><p>若先运行<code>Subscriber</code>,节点会处于等待状态直到<code>Publisher</code>启动</p></li></ol><p>至此,已经完成了话题通信.</p><h4 id="自定义话题消息"><a href="#自定义话题消息" class="headerlink" title="自定义话题消息"></a>自定义话题消息</h4><p>以上,<code>chatter</code>话题的消息类型为ROS预定的<code>String</code>,在ROS元功能包<code>common_msgs</code>中提供了许多不同消息类型,几乎满足一般需求.但有些情况下需要针对自己的机器人设计特定的消息类型</p><p>.msg文件是ROS中定义消息类型的文件,放置在功能包根目录下的msg文件夹中</p><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string name</span><br><span class="line">uint8 sex</span><br><span class="line">uint8 age</span><br></pre></td></tr></table></figure><p>还可以定义常量,在发布或订阅消息数据时可直接使用,相当于宏定义.如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint8 unknown = 0</span><br><span class="line">uint8 male    = 1</span><br><span class="line">uint8 female  = 2</span><br></pre></td></tr></table></figure><p>很多消息定义中还会包含一个标准格式的头信息<code>std_msgs/Header</code>,此处定义消息类型较为简单,也可以不加头信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uint32 seq</span><br><span class="line">time stamp</span><br><span class="line">string frame_id</span><br></pre></td></tr></table></figure><p><code>seq</code>为消息顺序标识无,无需手动设置,<code>Publisher</code>发布消息时会自动累加;</p><p><code>stamp</code>为消息中与数据相关联的时间戳,可用于时间同步</p><p><code>frame_id</code>为消息中与数据相关联的参考坐标系id</p><p>为了使用这个自定义的消息类型,需要编译msg文件</p><ol><li><p>在<code>package.xml</code>中添加以下功能包依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li><li><p>设置<code>CmakeList.txt</code></p><ol><li><p><code>find_package</code>中添加消息声称依赖的功能包<code>message_generation</code></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line">geometry_msgs</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>设置<code>catkin</code>依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">catkin_package(</span><br><span class="line">......</span><br><span class="line">  CATKIN_DEPENDS geometry_msgs roscpp rospy std_msgs message_runtime</span><br><span class="line">......</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>设置需要编译的msg文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">add_message_files(</span><br><span class="line">FILES</span><br><span class="line">Person.msg</span><br><span class="line">)</span><br><span class="line">generate_messages(</span><br><span class="line">DEPENDENCIES</span><br><span class="line">std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在根目录下<code>catkin_make</code>编译,使用如下命令查看自定义的Person消息类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosmsg show person</span><br></pre></td></tr></table></figure><p><strong>(TODO:添加运行截图)</strong></p><p>即可在代码中使用,参考<code>String</code>类型使用方法</p></li></ol><h3 id="服务编程"><a href="#服务编程" class="headerlink" title="服务编程"></a>服务编程</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ros-%E6%9C%8D%E5%8A%A1.png" alt="ros-服务" style="zoom: 33%;"></p><p>下面以加法运算为例,<code>Client</code>发布两个需要相加的<code>int</code>变量,<code>Server</code>节点接收请求后完成运算并返回结果</p><h4 id="自定义服务数据"><a href="#自定义服务数据" class="headerlink" title="自定义服务数据"></a>自定义服务数据</h4><p>通过<code>.srv</code>文件进行接口定义,放置于功能包根目录下的<code>srv</code>文件夹中.</p><p>该文件包含请求与应答两个数据域,中间用—-分割,内容格式与自定义话题相同</p><p>以加法运算为例,创建<code>AddTwoInts.srv</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int64 a</span><br><span class="line">int64 b</span><br><span class="line">---</span><br><span class="line">int64 sum</span><br></pre></td></tr></table></figure><p>与话题一样,需要在<code>package.xml</code>和<code>CMakeList.txt</code>中配置依赖和编译规则</p><ol><li><p><code>package.xml</code>添加以下依赖(与话题相同)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li><li><p><code>CMakeList.txt</code>添加以下配置</p><ol><li><p><code>find_package</code>中添加消息声称依赖的功能包<code>message_generation</code>(与话题相同)</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">find_package(catkin REQUIRED COMPONENTS</span><br><span class="line"> geometry_msgs</span><br><span class="line">  roscpp</span><br><span class="line">  rospy</span><br><span class="line">  std_msgs</span><br><span class="line">  message_generation</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>设置需要编译的srv文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_service_files(</span><br><span class="line">FILES</span><br><span class="line">AddTwoInts.srv</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="创建服务器Server"><a href="#创建服务器Server" class="headerlink" title="创建服务器Server"></a>创建服务器Server</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * server.cpp</span></span><br><span class="line"><span class="comment"> * AddTwoInts Server</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="comment">// 使用ROS中的服务,必须包含服务数据类型的头文件,这个头文件是前文AddTwoInts.srv自动生成的</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;learning_communication/AddTwoInts.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// service回调函数，输入参数req，输出参数res</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(learning_communication::AddTwoInts::Request  &amp;req,</span></span></span><br><span class="line"><span class="params"><span class="function">         learning_communication::AddTwoInts::Response &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 将输入参数中的请求数据相加，结果放到应答变量中,反馈到Client,回调函数返回true</span></span><br><span class="line">  res.sum = req.a + req.b;</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;request: x=%ld, y=%ld&quot;</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;sending back response: [%ld]&quot;</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ROS节点初始化</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_server&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建节点句柄</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个名为add_two_ints的server，注册回调函数add()</span></span><br><span class="line">  ros::ServiceServer service = n.<span class="built_in">advertiseService</span>(<span class="string">&quot;add_two_ints&quot;</span>, add);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 循环等待回调函数</span></span><br><span class="line">  <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Ready to add two ints.&quot;</span>);</span><br><span class="line">  ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见,Server类似于话题中的Subscriber</p><h4 id="创建客户端Client"><a href="#创建客户端Client" class="headerlink" title="创建客户端Client"></a>创建客户端Client</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * client.cpp</span></span><br><span class="line"><span class="comment"> * AddTwoInts Client</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;learning_communication/AddTwoInts.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ROS节点初始化</span></span><br><span class="line">  ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;add_two_ints_client&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从终端命令行获取两个加数</span></span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;usage: add_two_ints_client X Y&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建节点句柄</span></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 创建一个add_two_int的Client实例，服务类型是learning_communication::AddTwoInts</span></span><br><span class="line">  ros::ServiceClient client = n.serviceClient&lt;learning_communication::AddTwoInts&gt;(<span class="string">&quot;add_two_ints&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 实例化一个服务数据类型的变量,包含两个成员:request和response</span></span><br><span class="line">  <span class="comment">// 创建learning_communication::AddTwoInts类型的service消息</span></span><br><span class="line">  learning_communication::AddTwoInts srv;</span><br><span class="line">  srv.request.a = <span class="built_in">atoll</span>(argv[<span class="number">1</span>]);</span><br><span class="line">  srv.request.b = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发布service请求，等待加法运算的应答结果</span></span><br><span class="line">  <span class="keyword">if</span> (client.<span class="built_in">call</span>(srv))</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;Sum: %ld&quot;</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;Failed to call service add_two_ints&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见,Client类似于话题中的Publisher</p><h4 id="编译功能包-1"><a href="#编译功能包-1" class="headerlink" title="编译功能包"></a>编译功能包</h4><p>设置编译规则<code>CmakeList.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add_executable(server src/server.cpp)</span><br><span class="line">target_link_libraries(server <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line">add_dependencies(server <span class="variable">$&#123;PROJECT_NAME&#125;</span>_gencpp)</span><br><span class="line"></span><br><span class="line">add_executable(client src/client.cpp)</span><br><span class="line">target_link_libraries(client <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line">add_dependencies(client <span class="variable">$&#123;PROJECT_NAME&#125;</span>_gencpp)</span><br></pre></td></tr></table></figure><p>catkin_make编译,刷新环境变量</p><h4 id="运行功能包-1"><a href="#运行功能包-1" class="headerlink" title="运行功能包"></a>运行功能包</h4><ol><li><p>启动<code>roscore</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roscore</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>启动<code>Server</code></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_communication server</span><br></pre></td></tr></table></figure></li></ol><p>​        <strong>(TODO:添加运行截图)</strong></p><ol><li><p>启动<code>Client</code></p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun learning_communication client 3 5</span><br></pre></td></tr></table></figure></li></ol><p>​        <strong>(TODO:添加运行截图)</strong></p><h2 id="分布式多机通信"><a href="#分布式多机通信" class="headerlink" title="分布式多机通信"></a>分布式多机通信</h2><p><strong>(TODO:待添加)</strong></p><h2 id="ROS常用组件"><a href="#ROS常用组件" class="headerlink" title="ROS常用组件"></a>ROS常用组件</h2><h3 id="launch启动文件"><a href="#launch启动文件" class="headerlink" title="launch启动文件"></a>launch启动文件</h3><p>每当我们需要运行一个ROS节点或工具时，都需要打开一个新的终端运行一个命令。当系统中的节点数量不断增加时，每个节点一个终端的模式会变得非常麻烦。启动文件（Launch File）便是ROS中一种同时启动多个节点的途径，还可以自动启动ROSMaster节点管理器，而且可以实现每个节点的各种配置，为多个节点的操作提供了很大便利。</p><p>下面是一个最简单的launch文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sim1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sim2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h4><ol><li><p><code>&lt;launch&gt;</code></p><p> XML文件必须要包含一个根元素，launch文件中的根元素采用<code>&lt;launch&gt;</code>标签定义，文件中的其他内容都必须包含在这个标签之中：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">……</span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>&lt;node&gt;</code></p><p> 启动文件的核心是启动ROS节点，采用<code>&lt;node&gt;</code>标签定义，语法如下：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;package-name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;node-name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;executable-name&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 从上边的定义规则可以看出，在启动文件中启动一个节点需要三个属性：name、pkg和type。</p><ul><li><p><code>name</code> : 节点运行的名称，将覆盖节点中<code>ros::init()</code>定义的节点名称；</p></li><li><p><code>pkg</code> : 节点所在的功能包名称</p></li><li><p><code>type</code> : 节点的可执行文件名称</p><p>在某些情况下，我们还有可能用到以下属性：</p><p>| 属性                 | 属性作用                                                     |<br>| :—————————- | —————————————————————————————— |<br>| <code>output=&quot;screen&quot;</code>    | 终端输出转储在当前的控制台上，而不是在日志文件中             |<br>| <code>respawn=&quot;true&quot;</code>     | 当roslaunch启动完所有该启动的节点之后，会监测每一个节点，保证它们正常的运行状态。对于任意节点，当它终止时，roslaunch 会将该节点重启 |<br>| <code>required=&quot;true&quot;</code>    | 当被此属性标记的节点终止时，roslaunch会将其他的节点一并终止。注意此属性不可以与<code>respawn=&quot;true&quot;</code>一起描述同一个节点 |<br>| <code>ns = &quot;NAME_SPACE&quot;</code>  | 这个属性可以让你在自定义的命名空间里运行节点                 |<br>| <code>args = &quot;arguments&quot;</code> | 节点需要的输入参数                                           |</p></li></ul></li></ol><h4 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h4><ol><li><p><code>&lt;param&gt;</code></p><p> parameter是ROS系统运行中的参数，存储在参数服务器中。在launch文件中可以通过<code>&lt;param&gt;</code>元素加载parameter。launch文件执行后，parameter就加载到ROS的参数服务器上了。</p><p> 每个活跃的节点都可以通过 ros::param::get()接口来获取parameter的值，用户也可以在终端中通过rosparam命令获得parameter的值。</p><p> <code>&lt;param&gt;</code>使用方法:</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;output_frame&quot;</span> <span class="attr">value</span>=<span class="string">&quot;odom&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 运行launch文件后，output_frame这个parameter的值就设置为odom，并且加载到ROS参数服务器上了。但是在很多复杂的系统中，参数的数量很多，如果这样一个一个的设置会非常麻烦，ROS也为我们提供了另外一种类似的参数加载方式:<code>&lt;rosparam&gt;</code></p><p> <code>&lt;rosparam&gt;</code>使用方法</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rosparam</span> <span class="attr">file</span>=<span class="string">&quot;$(find 2dnav_pr2)/config/costmap_common_params.yaml&quot;</span> <span class="attr">command</span>=<span class="string">&quot;load&quot;</span> <span class="attr">ns</span>=<span class="string">&quot;local_costmap&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> <code>&lt;rosparam&gt;</code>可以帮助我们将一个yaml格式文件中的参数全部加载到ROS参数服务器中，需要设置command属性为“load”，还可以选择设置命名空间“ns”。</p></li><li><p><code>&lt;arg&gt;</code></p><p> argument是launch文件内部的局部变量,仅限于launch文件内部使用,便于launch文件的重构,与ROS节点内部无关</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;MyArg&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 像上面这样，就简单地声明了一个参数，名叫demo，但是声明不等于定义，我们需要给他赋值，在赋值之后参数才能够发挥作用。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;MyArg1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;MyArg2&quot;</span> <span class="attr">default</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p> 以上是两种简单的赋值方法，两者的区别是使用后者赋值的参数可以在命令行中像下面这样被修改，前者则不行。</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch xxx xxx.launch MyArg2=1234</span><br></pre></td></tr></table></figure><p> launch文件中需要使用到argument时，可以使用如下方式调用：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">arg</span> <span class="attr">name</span>=<span class="string">&quot;arg-name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$(arg arg-name)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">node</span> <span class="attr">name</span>=<span class="string">&quot;node&quot;</span> <span class="attr">pkg</span>=<span class="string">&quot;package&quot;</span> <span class="attr">type</span>=<span class="string">&quot;type &quot;</span><span class="attr">args</span>=<span class="string">&quot;$(arg arg-name)&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p> 当<code>$(arg arg_name)</code>出现在launch文件任意位置时，将会自动替代为所给参数的值。</p></li></ol><h4 id="重映射机制"><a href="#重映射机制" class="headerlink" title="重映射机制"></a>重映射机制</h4><p>ROS的设计目标是提高代码的复用率，所以ROS社区中的很多功能包我们都可以拿来直接使用，而不需要关注功能包的内部实现。那么问题就来了，别人功能包的接口不一定和我们的系统兼容呀？</p><p>ROS提供一种重映射的机制，简单来说就是取别名，类似于C++中的别名机制，我们不需要修改别人功能包的接口，只需要将接口名称重映射一下，取个别名，我们的系统就认识了（接口的数据类型必须相同）。launch文件中的<code>&lt;remap&gt;</code>标签顾名思义重映射，emap标签里包含一个<code>original-name</code>和一个<code>new-name</code>，及原名称和新名称。</p><p>比如turtlebot的键盘控制节点，发布的速度控制指令话题可能是<code>/turtlebot/cmd_vel</code>，但是我们自己的机器人订阅的速度控制话题是<code>/cmd_vel</code>，这个时候使用<code>&lt;remap&gt;</code>就可以轻松解决问题，将<code>/turtlebot/cmd_vel</code>重映射为<code>/cmd_vel</code>，我们的机器人就可以接收到速度控制指令了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">&quot;/turtlebot/cmd_vel&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/cmd_vel&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>重映射机制在ROS中的使用非常广泛，也非常重要，方法不止这一种，也可以在终端rosrun命令中实现重映射.</p><h4 id="嵌套复用"><a href="#嵌套复用" class="headerlink" title="嵌套复用"></a>嵌套复用</h4><p>在复杂的系统当中，launch文件往往有很多，这些launch文件之间也会存在依赖关系。如果需要直接复用一个已有launch文件中的内容，可以使用<code>&lt;include&gt;</code>标签包含其他launch文件，这和C语言中的include几乎是一样的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(dirname)/other.launch&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>launch是ROS框架中非常实用、灵活的功能，它类似于一种高级编程语言，可以帮助我们管理启动系统时的方方面面。在使用ROS的过程中，很多情况下我们并不需要编写大量代码，仅需要使用已有的功能包，编辑一下launch文件，就可以完成很多机器人功能。</p><ul><li><p>注 : 使用 <code>roslaunch</code> 命令 和 使用 <code>rosrun</code> 命令 单独运行每个节点之间的重要区别</p><p>默认情况下，roslaunch 命令 从启动节点开始，标准输出信息会重定向到一个日志文件中，而不会像 rosrun 命令那样，将 log 信息显示在终端(console)上。日志文件所在路径： <code>∼/.ros/log/run_id/node_name-number-stdout.log</code>.如果想将标准输出信息显示在终端(console)上,需要在 node 元素中使用 output 属性：output=”screen”.但node 元素的 output 属性只能影响这个节点自己。除了 output 属性，我们可以使用 roslaunch命令行工具的 –screen 命令行选项强制性的在终端的窗口中显示所有节点的输出信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">roslaunch --screen package-name launch-file-name</span><br></pre></td></tr></table></figure></li></ul><h3 id="TF坐标变换"><a href="#TF坐标变换" class="headerlink" title="TF坐标变换"></a>TF坐标变换</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/ROS-ABTF%E5%8F%98%E6%8D%A2.png" alt="ROS-ABTF变换" style="zoom: 33%;"></p><p>如图所示A,B两个坐标系,A坐标系下的位姿可以通过平移和旋转变换成B坐标系下的位姿,这里的平移和旋转可以用一个4*4的变换矩阵来描述(详见机器人学)</p><h4 id="创建TF广播器"><a href="#创建TF广播器" class="headerlink" title="创建TF广播器"></a>创建TF广播器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * turtle_tf_broadcaster.cpp</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_broadcaster.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Pose.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::string turtle_name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poseCallback</span><span class="params">(<span class="keyword">const</span> turtlesim::PoseConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// tf广播器</span></span><br><span class="line">    <span class="keyword">static</span> tf::TransformBroadcaster br;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据乌龟当前的位姿，设置相对于世界坐标系的坐标变换</span></span><br><span class="line">    tf::Transform transform;</span><br><span class="line">    transform.<span class="built_in">setOrigin</span>( tf::<span class="built_in">Vector3</span>(msg-&gt;x, msg-&gt;y, <span class="number">0.0</span>) );</span><br><span class="line">    tf::Quaternion q;</span><br><span class="line">    q.<span class="built_in">setRPY</span>(<span class="number">0</span>, <span class="number">0</span>, msg-&gt;theta);</span><br><span class="line">    transform.<span class="built_in">setRotation</span>(q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布坐标变换</span></span><br><span class="line">    br.<span class="built_in">sendTransform</span>(tf::<span class="built_in">StampedTransform</span>(transform, ros::Time::<span class="built_in">now</span>(), <span class="string">&quot;world&quot;</span>, turtle_name));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;my_tf_broadcaster&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;need turtle name as argument&quot;</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    turtle_name = argv[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅乌龟的pose信息</span></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line">    ros::Subscriber sub = node.<span class="built_in">subscribe</span>(turtle_name+<span class="string">&quot;/pose&quot;</span>, <span class="number">10</span>, &amp;poseCallback);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建TF监听器"><a href="#创建TF监听器" class="headerlink" title="创建TF监听器"></a>创建TF监听器</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * turtle_tf_listener.cpp</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tf/transform_listener.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;geometry_msgs/Twist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;turtlesim/Spawn.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;my_tf_listener&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过服务调用，产生第二只乌龟turtle2</span></span><br><span class="line">    ros::service::<span class="built_in">waitForService</span>(<span class="string">&quot;spawn&quot;</span>);</span><br><span class="line">    ros::ServiceClient add_turtle = node.serviceClient&lt;turtlesim::Spawn&gt;(<span class="string">&quot;spawn&quot;</span>);</span><br><span class="line">    turtlesim::Spawn srv;</span><br><span class="line">    add_turtle.<span class="built_in">call</span>(srv);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义turtle2的速度控制发布器</span></span><br><span class="line">    ros::Publisher turtle_vel = node.advertise&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;turtle2/cmd_vel&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tf监听器</span></span><br><span class="line">    tf::TransformListener listener;</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">rate</span><span class="params">(<span class="number">10.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (node.<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        tf::StampedTransform transform;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查找turtle2与turtle1的坐标变换</span></span><br><span class="line">            listener.<span class="built_in">waitForTransform</span>(<span class="string">&quot;/turtle2&quot;</span>, <span class="string">&quot;/turtle1&quot;</span>, ros::<span class="built_in">Time</span>(<span class="number">0</span>), ros::<span class="built_in">Duration</span>(<span class="number">3.0</span>));</span><br><span class="line">            listener.<span class="built_in">lookupTransform</span>(<span class="string">&quot;/turtle2&quot;</span>, <span class="string">&quot;/turtle1&quot;</span>, ros::<span class="built_in">Time</span>(<span class="number">0</span>), transform);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in"><span class="keyword">catch</span></span> (tf::TransformException &amp;ex) </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">ROS_ERROR</span>(<span class="string">&quot;%s&quot;</span>,ex.<span class="built_in">what</span>());</span><br><span class="line">            ros::<span class="built_in">Duration</span>(<span class="number">1.0</span>).<span class="built_in">sleep</span>();</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据turtle1和turtle2之间的坐标变换，计算turtle2需要运动的线速度和角速度</span></span><br><span class="line">        <span class="comment">// 并发布速度控制指令，使turtle2向turtle1移动</span></span><br><span class="line">        geometry_msgs::Twist vel_msg;</span><br><span class="line">        vel_msg.angular.z = <span class="number">4.0</span> * <span class="built_in">atan2</span>(transform.<span class="built_in">getOrigin</span>().<span class="built_in">y</span>(),</span><br><span class="line">                                        transform.<span class="built_in">getOrigin</span>().<span class="built_in">x</span>());</span><br><span class="line">        vel_msg.linear.x = <span class="number">0.5</span> * <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(transform.<span class="built_in">getOrigin</span>().<span class="built_in">x</span>(), <span class="number">2</span>) +</span><br><span class="line">                                      <span class="built_in">pow</span>(transform.<span class="built_in">getOrigin</span>().<span class="built_in">y</span>(), <span class="number">2</span>));</span><br><span class="line">        turtle_vel.<span class="built_in">publish</span>(vel_msg);</span><br><span class="line"></span><br><span class="line">        rate.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="编译功能包-2"><a href="#编译功能包-2" class="headerlink" title="编译功能包"></a>编译功能包</h4><p>设置编译规则<code>CmakeList.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add_executable(turtle_tf_broadcaster src/turtle_tf_broadcaster.cpp)</span><br><span class="line">target_link_libraries(turtle_tf_broadcaster <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_executable(turtle_tf_listener src/turtle_tf_listener.cpp)</span><br><span class="line">target_link_libraries(turtle_tf_listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br></pre></td></tr></table></figure><p>catkin_make编译,刷新环境变量</p><h4 id="launch文件启动"><a href="#launch文件启动" class="headerlink" title="launch文件启动"></a>launch文件启动</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 海龟仿真器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtlesim_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sim&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 键盘控制 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;turtlesim&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_teleop_key&quot;</span> <span class="attr">name</span>=<span class="string">&quot;teleop&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 两只海龟的tf广播 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_broadcaster&quot;</span> <span class="attr">args</span>=<span class="string">&quot;/turtle1&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle1_tf_broadcaster&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_broadcaster&quot;</span> <span class="attr">args</span>=<span class="string">&quot;/turtle2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;turtle2_tf_broadcaster&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 监听tf广播，并且控制turtle2移动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;learning_tf&quot;</span> <span class="attr">type</span>=<span class="string">&quot;turtle_tf_listener&quot;</span> <span class="attr">name</span>=<span class="string">&quot;listener&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>Typora快捷键</title>
    <link href="http://www.fanziqi.site/posts/5e339248.html"/>
    <id>http://www.fanziqi.site/posts/5e339248.html</id>
    <published>2021-08-25T07:00:00.000Z</published>
    <updated>2021-08-25T15:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h1><ol><li>最大标题：command + 1 或者：#</li><li>大标题：command + 2 或者：##</li><li>标准标题：command + 3 或者：###</li><li>中标题：command + 4 或者：####</li><li>小标题：command + 5 或者：#####</li><li>插入表格：command + T</li><li>插入代码：command + alt +c</li><li>行间公式 command + Alt + b</li><li>段落：command + 0</li><li>竖线 ： command + Alt +q</li><li>有序列表（1. 2.） ：输入数字+“.”之后输入空格 或者：command + Alt + o</li><li>黑点标记：command + Alt + u</li><li>隔离线shift + command + -</li><li>超链接：command + Alt + l</li><li>插入链接：command +k</li><li>下划线：command +u</li><li>加粗：command +b</li><li>搜索：command +f</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="快捷键" scheme="http://www.fanziqi.site/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你配置哔哔点啥</title>
    <link href="http://www.fanziqi.site/posts/af935eab.html"/>
    <id>http://www.fanziqi.site/posts/af935eab.html</id>
    <published>2021-08-07T07:44:00.000Z</published>
    <updated>2021-08-08T07:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="手把手教你配置哔哔点啥"><a href="#手把手教你配置哔哔点啥" class="headerlink" title="手把手教你配置哔哔点啥"></a>手把手教你配置哔哔点啥</h1><p>有一些闲言碎语不知道去哪说，所以搭建了一个哔哔点啥页面</p><h1 id="一、服务部署"><a href="#一、服务部署" class="headerlink" title="一、服务部署"></a>一、服务部署</h1><h3 id="1-首先保证成功激活腾讯云开发"><a href="#1-首先保证成功激活腾讯云开发" class="headerlink" title="1. 首先保证成功激活腾讯云开发"></a>1. 首先保证成功激活腾讯云开发</h3><h3 id="2-点击一键部署至云开发"><a href="#2-点击一键部署至云开发" class="headerlink" title="2. 点击一键部署至云开发"></a>2. <a href="https://console.cloud.tencent.com/tcb/env/index?action=CreateAndDeployCloudBaseProject&amp;appUrl=https%3A%2F%2Fgithub.com%2Flmm214%2Fbber&amp;branch=main">点击一键部署至云开发</a></h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-1.png" alt="image-20210807160349972"></p><h3 id="3-进入环境-登录授权，启用“匿名登录”"><a href="#3-进入环境-登录授权，启用“匿名登录”" class="headerlink" title="3. 进入环境-登录授权，启用“匿名登录”"></a>3. 进入<a href="https://console.cloud.tencent.com/tcb/env/login">环境-登录授权</a>，启用“匿名登录”</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-2.png" alt="image-20210807160443690"></p><h3 id="4-进入环境-安全配置，将博客网址添加到“WEB安全域名”"><a href="#4-进入环境-安全配置，将博客网址添加到“WEB安全域名”" class="headerlink" title="4. 进入环境-安全配置，将博客网址添加到“WEB安全域名”"></a>4. 进入<a href="https://console.cloud.tencent.com/tcb/env/safety">环境-安全配置</a>，将博客网址添加到“WEB安全域名”</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-3.png" alt="image-20210807160514198"></p><h3 id="5-进入环境-HTTP访问服务，复制链接备用。"><a href="#5-进入环境-HTTP访问服务，复制链接备用。" class="headerlink" title="5. 进入环境-HTTP访问服务，复制链接备用。"></a>5. 进入<a href="https://console.cloud.tencent.com/tcb/env/access">环境-HTTP访问服务</a>，复制链接备用。</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-4.png" alt="image-20210807160549968"></p><h3 id="6-进入云函数，修改自定义serverkey-bber-并保存备用。"><a href="#6-进入云函数，修改自定义serverkey-bber-并保存备用。" class="headerlink" title="6. 进入云函数，修改自定义serverkey bber 并保存备用。"></a>6. 进入<a href="https://console.cloud.tencent.com/tcb/scf/index">云函数</a>，修改自定义serverkey <code>bber</code> 并保存备用。</h3><p>记录下这个key，后面需要用</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-5.png" alt="image-20210807160730497"></p><h3 id="7-扫码进入公众号，输入命名绑定"><a href="#7-扫码进入公众号，输入命名绑定" class="headerlink" title="7. 扫码进入公众号，输入命名绑定"></a>7. 扫码进入公众号，输入命名绑定</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-0.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/bber 你刚刚设置的key,https://你的云函数HTTP访问地址/bber</span><br><span class="line"></span><br><span class="line">比如: /bber mykey,https://balabala.ap-shanghai.app.tcloudbase.com/bber</span><br></pre></td></tr></table></figure><h3 id="8-手动添加一条哔哔-必须要有"><a href="#8-手动添加一条哔哔-必须要有" class="headerlink" title="8. 手动添加一条哔哔  必须要有"></a>8. 手动添加一条哔哔  <em>必须要有</em></h3><p>进入腾讯云数据库-&gt;talks-&gt;文档列表-&gt;添加文档</p><p>字段: content</p><p>类型: string</p><p>值: 随便</p><p>点击确定</p><h3 id="9-验证微信发送"><a href="#9-验证微信发送" class="headerlink" title="9. 验证微信发送"></a>9. 验证微信发送</h3><p>微信发送一条文字，返回哔哔成功，talks文档列表里多出来一条，即为服务部署成功</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-6.png" alt="image-20210807161419278"></p><h2 id="二、前端部署"><a href="#二、前端部署" class="headerlink" title="二、前端部署"></a>二、前端部署</h2><h3 id="1-新建一个markdown文件"><a href="#1-新建一个markdown文件" class="headerlink" title="1. 新建一个markdown文件"></a>1. 新建一个<em>markdown</em>文件</h3><p>以源代码模式编辑，复制以下内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;speak-bber&#x27;</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">speak</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/ispeak-bber@1.1.1-beta/ispeak-bber.min.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> &gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line">ispeakBber</span><br><span class="line"><span class="code">    .init(&#123;</span></span><br><span class="line"><span class="code">      el: &#x27;#speak-bber&#x27;,</span></span><br><span class="line"><span class="code">      name: &#x27;DreamyTZK 🦄&#x27;, // 显示的昵称</span></span><br><span class="line"><span class="code">      envId: &#x27;腾讯云开发环境id&#x27;, // 环境id</span></span><br><span class="line"><span class="code">      region: &#x27;ap-shanghai&#x27;, // 腾讯云地址，默认为上海</span></span><br><span class="line"><span class="code">      limit: 10, // 每次加载的条数，默认为5</span></span><br><span class="line"><span class="code">      avatar: &#x27;https://cdn.jsdelivr.net/npm/kang-static@latest/avatar.jpg&#x27;,</span></span><br><span class="line"><span class="code">      fromcolor:&#x27;rgb(245, 150, 170)&#x27;</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">    .then(function() &#123;</span></span><br><span class="line"><span class="code">      console.log(&#x27;ispeak 加载完成&#x27;)</span></span><br><span class="line"><span class="code">    &#125;)</span></span><br><span class="line"><span class="code">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>退出源代码模式后应该看不见上面的代码</p><h3 id="2-重新生成hexo静态网站"><a href="#2-重新生成hexo静态网站" class="headerlink" title="2. 重新生成hexo静态网站"></a>2. 重新生成hexo静态网站</h3><p>此处不再赘述</p><h3 id="3-查看哔哔页面"><a href="#3-查看哔哔页面" class="headerlink" title="3.查看哔哔页面"></a>3.查看哔哔页面</h3><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/bibi-7.png" alt="image-20210807161821445"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="网站" scheme="http://www.fanziqi.site/categories/%E7%BD%91%E7%AB%99/"/>
    
    
    <category term="hexo" scheme="http://www.fanziqi.site/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Altium Designer导出Gerber文件的一般步骤</title>
    <link href="http://www.fanziqi.site/posts/a1423033.html"/>
    <id>http://www.fanziqi.site/posts/a1423033.html</id>
    <published>2021-08-06T14:30:00.000Z</published>
    <updated>2021-08-08T07:35:13.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Altium-Designer导出Gerber文件的一般步骤"><a href="#Altium-Designer导出Gerber文件的一般步骤" class="headerlink" title="Altium Designer导出Gerber文件的一般步骤"></a>Altium Designer导出Gerber文件的一般步骤</h1><p>PCB画完之后，需要生成Gerber文件提交给PCB工厂进行生产，本文将介绍生成Gerber的一般步骤</p><h2 id="一、导出非机械层"><a href="#一、导出非机械层" class="headerlink" title="一、导出非机械层"></a>一、导出非机械层</h2><h3 id="1-1-”文件“-gt-”制造输出“-gt-“Gerber-Files”"><a href="#1-1-”文件“-gt-”制造输出“-gt-“Gerber-Files”" class="headerlink" title="1.1 ”文件“ -&gt; ”制造输出“ -&gt; “Gerber Files”"></a>1.1 ”文件“ -&gt; ”制造输出“ -&gt; “Gerber Files”</h3><p>（“File”-&gt;“Fabrication Outputs”-&gt;“Gerber Files”）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-1.png" alt="image-20210806221126738"></p><h3 id="1-2-通用（General）"><a href="#1-2-通用（General）" class="headerlink" title="1.2 通用（General）"></a>1.2 通用（General）</h3><p>单位：英寸（Inches）</p><p>格式：2:5</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-2.png" alt="image-20210806221658661"></p><h3 id="1-3-层（Layers）"><a href="#1-3-层（Layers）" class="headerlink" title="1.3 层（Layers）"></a>1.3 层（Layers）</h3><p>左面出图层除机械层全选择，镜像层不选，最下面四个层的合集与上面层重复全部不选</p><p>右面机械层全不选</p><p>下面勾选”包括未连接的中间层焊盘“（Include unconnected mid-layer pads）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-3.png" alt="image-20210806222145277"></p><h3 id="1-4-钻孔图层（Drill-Drawing）"><a href="#1-4-钻孔图层（Drill-Drawing）" class="headerlink" title="1.4 钻孔图层（Drill Drawing）"></a>1.4 钻孔图层（Drill Drawing）</h3><p>全不选</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-4.png" alt="image-20210806222318634"></p><h3 id="1-5-光圈（Apertures）"><a href="#1-5-光圈（Apertures）" class="headerlink" title="1.5 光圈（Apertures）"></a>1.5 光圈（Apertures）</h3><p>选择嵌入的孔径（Embedded apertures）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-5.png" alt="image-20210806222832869"></p><h3 id="1-6-高级（Advanced）"><a href="#1-6-高级（Advanced）" class="headerlink" title="1.6 高级（Advanced）"></a>1.6 高级（Advanced）</h3><p>设置如图两项，其他默认即可</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-6.png" alt="image-20210806223016206"></p><h3 id="1-7-点击确定（OK）"><a href="#1-7-点击确定（OK）" class="headerlink" title="1.7 点击确定（OK）"></a>1.7 点击确定（OK）</h3><p>弹出的直接关掉，不用保存</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-1-7.png" alt="image-20210806223142508"></p><h2 id="二、导出机械层"><a href="#二、导出机械层" class="headerlink" title="二、导出机械层"></a>二、导出机械层</h2><h3 id="2-1-“文件“-gt-”制造输出“-gt-”Gerber-Files“"><a href="#2-1-“文件“-gt-”制造输出“-gt-”Gerber-Files“" class="headerlink" title="2.1 “文件“ -&gt; ”制造输出“ -&gt; ”Gerber Files“"></a>2.1 “文件“ -&gt; ”制造输出“ -&gt; ”Gerber Files“</h3><p>同2.1</p><h3 id="2-2-通用（General）"><a href="#2-2-通用（General）" class="headerlink" title="2.2 通用（General）"></a>2.2 通用（General）</h3><p>同2.1</p><h3 id="3-层（Layers）"><a href="#3-层（Layers）" class="headerlink" title="3. 层（Layers）"></a>3. 层（Layers）</h3><p>左面出图层全不选，镜像层全不选</p><p>右面机械层全选</p><p>取消勾选”包括未连接的中间层焊盘“（Include unconnected mid-layer pads）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-2-3.png" alt="image-20210806223538241"></p><h3 id="2-4-钻孔图层（Drill-Drawing）"><a href="#2-4-钻孔图层（Drill-Drawing）" class="headerlink" title="2.4 钻孔图层（Drill Drawing）"></a>2.4 钻孔图层（Drill Drawing）</h3><p>勾选钻孔图（Drill Drawing Plots）和钻孔向导图（Drill Guide Plots）下的输出所有使用的钻孔对（Plot all used drill pairs）</p><p>不勾选镜像输出</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-2-4.png" alt="image-20210806223735534"></p><h3 id="2-5-光圈（Apertures）"><a href="#2-5-光圈（Apertures）" class="headerlink" title="2.5 光圈（Apertures）"></a>2.5 光圈（Apertures）</h3><p>同1.5</p><h3 id="2-6-高级（Advanced）"><a href="#2-6-高级（Advanced）" class="headerlink" title="2.6 高级（Advanced）"></a>2.6 高级（Advanced）</h3><p>同1.6</p><h3 id="2-7-点击确定（OK）"><a href="#2-7-点击确定（OK）" class="headerlink" title="2.7 点击确定（OK）"></a>2.7 点击确定（OK）</h3><p>弹出的直接关掉，不用保存</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-2-7.png" alt="image-20210806223916694"></p><h2 id="三、导出钻孔层"><a href="#三、导出钻孔层" class="headerlink" title="三、导出钻孔层"></a>三、导出钻孔层</h2><h3 id="3-1-”文件”-gt-“制造输出”-gt-“NC-Drill-Files”"><a href="#3-1-”文件”-gt-“制造输出”-gt-“NC-Drill-Files”" class="headerlink" title="3.1 ”文件” -&gt; “制造输出” -&gt; “NC Drill Files”"></a>3.1 ”文件” -&gt; “制造输出” -&gt; “NC Drill Files”</h3><p>（“File”-&gt;“Fabrication Outputs”-&gt;“NC Drill Files”）</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-3-1.png" alt="image-20210806224045854"></p><h3 id="3-2-如图设置"><a href="#3-2-如图设置" class="headerlink" title="3.2 如图设置"></a>3.2 如图设置</h3><p>单位：英寸（Inches）</p><p>格式：2:5</p><p>前导/尾数零（Leading/Trailing Zeroes）：摒弃前导零（Suppress leading zeroes）</p><p>其他默认即可</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-3-2.png" alt="image-20210806224252303"></p><h3 id="3-3-点击确定（OK）"><a href="#3-3-点击确定（OK）" class="headerlink" title="3.3 点击确定（OK）"></a>3.3 点击确定（OK）</h3><p>弹出“导入钻孔数据”（Import Drill Data），点击确定</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-3-3.png" alt="image-20210806224531631"></p><p>如果又弹出一个，同样点击确定即可</p><p>都不用保存，直接关掉</p><h2 id="四、到此为止，已经完成了Gerber文件的导出"><a href="#四、到此为止，已经完成了Gerber文件的导出" class="headerlink" title="四、到此为止，已经完成了Gerber文件的导出"></a>四、到此为止，已经完成了Gerber文件的导出</h2><p>Gerber默认导出在PCB所在目录下的“Project Outputs for XXX”文件夹，如图</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/AD-Gerber-4-1.png" alt="image-20210806225134364"></p><p>将整个文件夹打包，发给PCB厂家</p><hr><p>Github：<a href="https://github.com/fan-ziqi">点击进入</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Altium Designer" scheme="http://www.fanziqi.site/categories/Altium-Designer/"/>
    
    
    <category term="PCB" scheme="http://www.fanziqi.site/tags/PCB/"/>
    
  </entry>
  
  <entry>
    <title>Git操作</title>
    <link href="http://www.fanziqi.site/posts/c4c88997.html"/>
    <id>http://www.fanziqi.site/posts/c4c88997.html</id>
    <published>2021-07-25T12:44:00.000Z</published>
    <updated>2021-09-03T02:59:51.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h1><ul><li><p>安装</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install git</span><br></pre></td></tr></table></figure></li><li><p>查看版本</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li><p>生成密钥</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;YOUREMAIL&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看公钥</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub </span><br></pre></td></tr></table></figure></li><li><p>GIthub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key</p></li><li><p>检查本地是否能远程访问github服务器，出现You’ve successfully authenticated，说明认证通过。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>配置自己的名称和电子邮件地址</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;YOURNAME&quot;</span><br><span class="line">git config --global user.email &quot;YOUREMAIL&quot;</span><br></pre></td></tr></table></figure></li><li><p>查看设置</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --list</span><br></pre></td></tr></table></figure></li><li><p>新项目</p><ul><li><p>建立新的repository</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/new</span><br></pre></td></tr></table></figure></li><li><p>新建目录</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/test_project</span><br><span class="line">cd ~/test_project</span><br><span class="line">git init //初始化一个空的git repository  </span><br><span class="line">touch README //README 文件用于描述该项目  </span><br></pre></td></tr></table></figure></li><li><p>提交</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add README  //提交README</span><br><span class="line">git commit -m &quot;first commit&quot; //-m 用于指定本次提交的描述信息 </span><br><span class="line">git remote add origin https://github.com//username//test_project.git //第一次初始化</span><br><span class="line">git push -u origin master  </span><br></pre></td></tr></table></figure></li></ul></li><li><p>已有项目</p><ul><li><p>clone下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:fan-ziqi/My_ROS_Robot.git</span><br></pre></td></tr></table></figure></li><li><p>提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .   // .代表添加所有文件  </span><br><span class="line">git commit -m &quot;对文件操作的简易描述&quot;  </span><br><span class="line">git push -u origin master </span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="0903更新"><a href="#0903更新" class="headerlink" title="0903更新"></a>0903更新</h1><p>出现错误<code>error: failed to push some refs to &#39;https://github.com/xxx/xxx.git&#39;</code></p><p>出现错误的原因是github中的某些文件不在本地代码目录中。</p><p>也就是说我们需要先将远程代码库中的任何文件先pull到本地代码库中，才能push新的代码到github代码库中。</p><p>使用如下命令：git pull —rebase origin main</p><p>然后再进行上传: git push -u origin main</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="技能" scheme="http://www.fanziqi.site/categories/%E6%8A%80%E8%83%BD/"/>
    
    
    <category term="Git" scheme="http://www.fanziqi.site/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ROS机器人学习——机器人建模与仿真</title>
    <link href="http://www.fanziqi.site/posts/7859c9f3.html"/>
    <id>http://www.fanziqi.site/posts/7859c9f3.html</id>
    <published>2021-07-23T03:23:04.000Z</published>
    <updated>2021-09-07T06:43:03.518Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="ROS机器人学习" scheme="http://www.fanziqi.site/categories/ROS%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="ROS" scheme="http://www.fanziqi.site/tags/ROS/"/>
    
  </entry>
  
  <entry>
    <title>32单片机缩写</title>
    <link href="http://www.fanziqi.site/posts/f382e178.html"/>
    <id>http://www.fanziqi.site/posts/f382e178.html</id>
    <published>2020-08-07T05:42:28.000Z</published>
    <updated>2021-08-08T04:09:15.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>IRQ: Interrupt Request 中断请求</p><p>RCC: Rest and Clock Control 复位与时钟控制</p><p>HAL: Hardware Abstraction Layer硬件抽象层,代表HAL库</p><p>DMA: Direct Memory Access 直接内存存取</p><p>EX: extended 延伸，扩展</p><p>PWR: Power Controller 电源控制</p><p>Conf: configuration</p><p>It: interrupt</p><p>MSP: Mixed Signal Processor混合信号处理器</p><p>RSSI: Received Signal Strength Indication接收的信号强度指示</p><p>SNR: 信噪比SIGNAL-NOISE RATIO</p><p>上下行同信：上行（终端-&gt;网关；上传），下行（网关-&gt;终端；接收</p><p>EXTI: （External interrupt/event controller）—外部中断/事件控制器</p><p>idel: 空闲</p><p>RF_CAD:The radio is doing channel activity detection</p><p>FSK:Frequency-shift keying频移键控，是信息传输中使用得较早的一种调制方式,它的主要优点是: 实现起来较容易,抗噪声与抗衰减的性能较好。在中低速数据传输中得到了广泛的应用。</p><p>PHY: Port Physical Layer，中文可称之为端口物理层，是一个对OSI模型物理层的共同简称。</p><p>MAC：Media Access Control 介质访问控制</p><p>PLL: PhaseLockedLoop锁相环</p><p>APB: Advanced Peripheral BUS 外围总线</p><p>AHB，是Advanced High performance Bus的缩写，译作高级高性能总线，这是一种“系统总线”。</p><p>MSP: MCU Specific Package</p><p>Int 初始化 deint反初始化</p><p>Transmit：传输；传播；发射；传达；遗传，发送</p><p>Init：初始化（initialization）</p><p>clock：时钟；计时器</p><p>system：制度，体制；系统；方法</p><p>Config：配置，布局；显示配置信息命令</p><p>USART：代表串口(Universal Synchronous/Asynchronous Receiver/Transmitter)通用同步/异步串行接收/发送器</p><p>GPIO：general purpose input/output 代表引脚， （通用输入/输出）简称为GPIO</p><p>SPI：SPI是串行外设接口（Serial Peripheral Interface）的缩写</p><p>RTC：实时时钟（Real-Time Clock）</p><p>ADC：ADC,Analog-to-Digital Converter的缩写,指模/数转换器或者模数转换器</p><p>Channel： 通道；频道；海峡</p><p>ARM：Advanced RISC Machine</p><p>AAPCS：ARM Architecture Process call standard</p><p>ARM 体系结构过程调用标准</p><p>RISC： Reduced Instruction Set Computer 精简指令集计算机</p><p>RTOS：Real Time Operating System 实时操作系统</p><p>DMA：Direct Memory Access 存储器直接访问</p><p>EXTI: External Interrupts 外部中断</p><p>FSMC: Flexible static memory controller 可变静态存储控制器</p><p>FPB：flash patch and breakpoint FLASH 转换及断电单元</p><p>HSE：Hign speed external</p><p>HSI: High speed internal</p><p>LSE: Low Speed external</p><p>LSI: Low Speed Internal</p><p>LSU: load store unit 存取单元</p><p>PFU: prefetch unit 预取单元</p><p>ISR：Interrupt Service Routines 中断服务程序</p><p>NMI: Nonmaskable Interrupt 不可屏蔽中断</p><p>NVIC: Nested Vectored Interrupt Controller 嵌套向量中断控制器</p><p>MPU: Memory Protection Unit 内存保护单元</p><p>MIPS:million instructions per second 每秒能执行的百万条指令的条数</p><p>RCC：Reset and clock control 复位和时钟控制</p><p>RTC: Real-Time Clock 实时时钟</p><p>IWDG: independent watchdog 独立看门狗</p><p>WWDG：Window watchdog 窗口看门狗</p><p>TIM：timer 定时器</p><p>GAL:generic array logic 通用阵列逻辑</p><p>PAL:programmable array logic 可编程阵列逻辑</p><p>ASIC:Application Specific Integrated Circuit 专用集成电路</p><p>FPGA:Field－Programmable Gate Array 现场可编程门阵列</p><p>CPLD:Complex Programmable Logic Device 可编程逻辑器件</p><p>端口</p><p>AFIO：alternate function IO 复用 IO 端口</p><p>GPIO：general purpose input/output 通用 IO 端口</p><p>IOP（A-G）:IO port A - IO port G (例如：IOPA:IO port A)</p><p>CAN：Controller area network 控制器局域网</p><p>FLITF：The Flash memory interface 闪存存储器接口</p><p>I2C： Inter-integrated circuit 微集成电路</p><p>IIS： integrate interface of sound 集成音频接口</p><p>JTAG：joint test action group 联合测试行动小组</p><p>SPI：Serial Peripheral Interface 串行外围设备接口 SDIO: SD I/O</p><p>UART: Universal Synchr./Asynch. Receiver Transmitter 通用异步接收/发送装置</p><p>USB: Universal Serial Bus 通用串行总线</p><p>寄存器相关</p><p>CPSP： Current Program Status Register 当前程序状态寄存器</p><p>SPSP： saved program status register 程序状态备份寄存器</p><p>CSR：clock control/status register 时钟控制状态寄存器</p><p>LR： link register 链接寄存器</p><p>SP： stack pointer 堆栈指针</p><p>MSP: main stack pointer 主堆栈指针</p><p>PSP：process stack pointer</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>stm32学习笔记</title>
    <link href="http://www.fanziqi.site/posts/8cc52eb9.html"/>
    <id>http://www.fanziqi.site/posts/8cc52eb9.html</id>
    <published>2020-08-06T03:09:13.000Z</published>
    <updated>2021-08-08T07:21:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>STM32 命名规则</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/stm32-learn-1.png" alt="1"></p><hr><h2 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h2><p>头文件：stm32f10x_gpio.h</p><p>源文件：stm32f10x_gpio.c</p><h3 id="重要函数："><a href="#重要函数：" class="headerlink" title="重要函数："></a>重要函数：</h3><ul><li><p>初始化函数：<br><code>void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct);</code></p><p>初始化一个或者多个IO口（同一组）的工作方式和速度。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> GPIO_Pin;                           <span class="comment">//指定要初始化的IO口         </span></span><br><span class="line">    GPIOSpeed_TypeDef GPIO_Speed; <span class="comment">//设置IO口输出速度</span></span><br><span class="line">    GPIOMode_TypeDef GPIO_Mode;    <span class="comment">//设置工作模式：8种中的一个</span></span><br><span class="line">&#125;GPIO_InitTypeDef;</span><br><span class="line"></span><br><span class="line">GPIOx: GPIOA~GPIOG</span><br></pre></td></tr></table></figure><p>​    GPIO_Init函数初始化样例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; <span class="comment">//LED0--&gt;PB.5 端口配置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//IO口速度为50MHz</span></span><br><span class="line">GPIO_Init(GPIOB, &amp;GPIO_InitStructure); <span class="comment">//根据设定参数初始化GPIOB.5</span></span><br></pre></td></tr></table></figure><ul><li><p>2个读取输入电平函数：</p><ul><li><p><code>uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：读取某个GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。</p><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输入电平</span></span><br></pre></td></tr></table></figure></li><li><p><code>uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx);</code><br>作用：读取某组GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。<br>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_ReadInputData(GPIOA);<span class="comment">//读取GPIOA组中所有io口输入电平</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>2个读取输出电平函数：</p><ul><li><p><code>uint8_t GPIO_ReadOutputDataBit (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：读取某个GPIO的输出电平。实际操作的是GPIO_ODR寄存器。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输出电平</span></span><br></pre></td></tr></table></figure></li><li><p><code>uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);</code><br>作用：读取某组GPIO的输出电平。实际操作的是GPIO_ODR寄存器。<br>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_ReadOutputData(GPIOA);<span class="comment">//读取GPIOA组中所有io口输出电平</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>4个设置输出电平函数：</p><ul><li><code>void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：设置某个IO口输出为高电平（1）。实际操作BSRR寄存器</li><li><code>void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin);</code><br>作用：设置某个IO口输出为低电平（0）。实际操作的BRR寄存器。</li><li><code>void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal);</code></li><li><code>void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal);</code><br> 这两个函数不常用，也是用来设置IO口输出电平。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键输入：</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(mode==<span class="number">1</span>) key_up=<span class="number">1</span>;<span class="comment">//支持连续按</span></span><br><span class="line">      <span class="keyword">if</span>（key_up &amp;&amp;  KEY按下）</span><br><span class="line">      &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);<span class="comment">//延时，防抖</span></span><br><span class="line">        key_up=<span class="number">0</span>;<span class="comment">//标记这次key已经按下</span></span><br><span class="line">        <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="keyword">return</span> KEY_VALUE;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY没有按下)  key_up=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> 没有按下</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h2 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h2><p>头文件: stm32f10x_rcc.h</p><p>源文件:stm32f10x_rcc.c</p><ol><li><p>时钟使能配置:</p><p>  <code>RCC_LSEConfig()</code> 、<code>RCC_HSEConfig()</code>、<code>RCC_HSICmd()</code> 、 <code>RCC_LSICmd()</code> 、 <code>RCC_PLLCmd()</code> ……</p></li><li><p>时钟源相关配置：<br>   <code>RCC_PLLConfig ()</code>、 <code>RCC_SYSCLKConfig()</code> 、<code>RCC_RTCCLKConfig()</code> …</p></li><li><p>分频系数选择配置：<br>  <code>RCC_HCLKConfig()</code> 、 <code>RCC_PCLK1Config()</code> 、 <code>RCC_PCLK2Config()</code>…</p></li><li><p>外设时钟使能：<br>  <code>RCC_APB1PeriphClockCmd():</code>  //APB1线上外设时钟使能<br>  <code>RCC_APB2PeriphClockCmd();</code>  //APB2线上外设时钟使能<br>  <code>RCC_AHBPeriphClockCmd();</code>   //AHB线上外设时钟使能</p></li><li><p>其他外设时钟配置：</p><p> <code>RCC_ADCCLKConfig ();</code>  <code>RCC_RTCCLKConfig();</code></p></li><li><p>状态参数获取参数：<br> <code>RCC_GetClocksFreq();</code><br> <code>RCC_GetSYSCLKSource();</code><br> <code>RCC_GetFlagStatus()</code></p></li><li><p>RCC中断相关函数 :<br> <code>RCC_ITConfig()</code> 、<code>RCC_GetITStatus()</code> 、 <code>RCC_ClearITPendingBit()</code>…</p></li></ol><hr><h2 id="NVIC中断优先级分组"><a href="#NVIC中断优先级分组" class="headerlink" title="NVIC中断优先级分组"></a>NVIC中断优先级分组</h2><ul><li><p>中断管理方法：</p><p>首先，对STM32中断进行分组，组0~4。同时，对每个中断设置一个抢占优先级和一个响应优先级值。</p></li><li><p>抢占优先级 &amp; 响应优先级区别：</p><p>高优先级的抢占优先级是可以打断正在进行的低抢占优先级中断的。</p><p>抢占优先级相同的中断，高响应优先级不可以打断低响应优先级的中断。</p><p>抢占优先级相同的中断，当两个中断同时发生的情况下，哪个响应优先级高，哪个先执行。</p><p>如果两个中断的抢占优先级和响应优先级都是一样的话，则看哪个中断先发生就先执行；</p></li><li><p>一般情况下，系统代码执行过程中，只设置一次中断优先级分组，比如分组2，设置好分组之后一般不会再改变分组。随意改变分组会导致中断管理混乱，程序出现意想不到的执行结果。</p></li><li><p>中断优先级分组函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));</span><br><span class="line">  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>中断参数初始化函数：</p><p><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannel; <span class="comment">//设置中断通道</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelPreemptionPriority;<span class="comment">//设置响应优先级</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelSubPriority; <span class="comment">//设置抢占优先级</span></span><br><span class="line">  FunctionalState NVIC_IRQChannelCmd; <span class="comment">//使能/使能</span></span><br><span class="line">&#125; NVIC_InitTypeDef;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line"></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//串口1中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span> ;<span class="comment">// 抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;<span class="comment">// 子优先级位2</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据上面指定的参数初始化NVIC寄存器</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>中断优先级设置步骤：</p><ol><li>系统运行后先设置中断优先级分组。调用函数：<br>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);<br> （整个系统执行过程中，只设置一次中断分组。）</li><li>针对每个中断，设置对应的抢占优先级和响应优先级：<br>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</li><li>如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。</li></ol></li></ul><hr><h2 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Init</span><span class="params">()</span></span>; <span class="comment">//串口初始化：波特率，数据字长，奇偶校验，硬件流控以及收发使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Cmd</span><span class="params">()</span></span>;<span class="comment">//使能串口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ITConfig</span><span class="params">()</span></span>;<span class="comment">//使能相关中断</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendData</span><span class="params">()</span></span>;<span class="comment">//发送数据到串口，DR</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">USART_ReceiveData</span><span class="params">()</span></span>;<span class="comment">//接受数据，从DR读取接受到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function">FlagStatus <span class="title">USART_GetFlagStatus</span><span class="params">()</span></span>;<span class="comment">//获取状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearFlag</span><span class="params">()</span></span>;<span class="comment">//清除状态标志位</span></span><br><span class="line"><span class="function">ITStatus <span class="title">USART_GetITStatus</span><span class="params">()</span></span>;<span class="comment">//获取中断状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearITPendingBit</span><span class="params">()</span></span>;<span class="comment">//清除中断状态标志位</span></span><br></pre></td></tr></table></figure><p>波特率计算方法</p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/stm32-learn-2.png" alt="2"></p><p><img src="https://fan-ziqi.oss-cn-beijing.aliyuncs.com/img/stm32-learn-3.png" alt="3"></p><p>串口配置的一般步骤</p><ol><li>串口时钟使能，GPIO时钟使能:RCC_APB2PeriphClockCmd();</li><li>串口复位:USART_DeInit(); 这一步不是必须的</li><li>GPIO端口模式设置:GPIO_Init(); 模式设置为GPIO_Mode_AF_PP</li><li>串口参数初始化：USART_Init();</li><li>开启中断并且初始化NVIC（如果需要开启中断才需要这个步骤）<pre><code>  NVIC_Init();  USART_ITConfig();</code></pre></li><li>使能串口:USART_Cmd();</li><li>编写中断处理函数：USARTx_IRQHandler();</li><li>串口数据收发：<br>void USART_SendData();//发送数据到串口，DR<br>uint16_t USART_ReceiveData();//接受数据，从DR读取接受到的数据</li><li>串口传输状态获取：<br>FlagStatus USART_GetFlagStatus(USART_TypeDef<em> USARTx, uint16_t USART_FLAG);<br>void USART_ClearITPendingBit(USART_TypeDef</em> USARTx, uint16_t USART_IT);</li></ol><hr><h2 id="外部中断"><a href="#外部中断" class="headerlink" title="外部中断"></a>外部中断</h2><ul><li><p><code>void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource);</code><br>   //设置IO口与中断线的映射关系</p><p>   例:  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource2);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct);</code><br> //初始化中断线：触发方式等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint32_t</span> EXTI_Line;   <span class="comment">//指定要配置的中断线           </span></span><br><span class="line">  EXTIMode_TypeDef EXTI_Mode;   <span class="comment">//模式：事件 OR中断</span></span><br><span class="line">  EXTITrigger_TypeDef EXTI_Trigger;<span class="comment">//触发方式：上升沿/下降沿/双沿触发</span></span><br><span class="line">  FunctionalState EXTI_LineCmd;  <span class="comment">//使能 OR失能</span></span><br><span class="line">&#125;EXTI_InitTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EXTI_InitStructure.EXTI_Line=EXTI_Line2; </span><br><span class="line">EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">EXTI_InitStructure.EXTI_LineCmd = ENABLE;</span><br><span class="line">EXTI_Init(&amp;EXTI_InitStructure); </span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>ITStatus EXTI_GetITStatus(uint32_t EXTI_Line);</code><br>//判断中断线中断状态，是否发生</p></li><li><p><code>void EXTI_ClearITPendingBit(uint32_t EXTI_Line);</code><br>//清除中断线上的中断标志位</p></li><li><p>外部中断的一般配置步骤：</p><ol><li>初始化IO口为输入。<pre><code>GPIO_Init();</code></pre></li><li>开启IO口复用时钟。<pre><code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</code></pre></li><li>设置IO口与中断线的映射关系。<pre><code>void GPIO_EXTILineConfig();</code></pre></li><li>初始化线上中断，设置触发条件等。<pre><code>   EXTI_Init();</code></pre></li><li>配置中断分组（NVIC），并使能中断。<pre><code>   NVIC_Init();</code></pre></li><li>编写中断服务函数。<pre><code>  EXTIx_IRQHandler();</code></pre></li><li>清除中断标志位<pre><code>  EXTI_ClearITPendingBit();</code></pre></li></ol></li></ul><hr><h2 id="通用定时器"><a href="#通用定时器" class="headerlink" title="通用定时器"></a>通用定时器</h2><ul><li><p>定时器参数初始化：         </p><p><code>void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Prescaler;        </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_CounterMode;     </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Period;        </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ClockDivision;  </span><br><span class="line">  <span class="keyword">uint8_t</span> TIM_RepetitionCounter;</span><br><span class="line">&#125; TIM_TimeBaseInitTypeDef; </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TIM_TimeBaseStructure.TIM_Period = <span class="number">4999</span>; TIM_TimeBaseStructure.TIM_Prescaler =<span class="number">7199</span>; TIM_TimeBaseStructure.TIM_ClockDivision =   TIM_CKD_DIV1; TIM_TimeBaseStructure.TIM_CounterMode =   TIM_CounterMode_Up; </span><br><span class="line">TIM_TimeBaseInit(TIM3, &amp;TIM_TimeBaseStructure); </span><br></pre></td></tr></table></figure></li><li><p>定时器使能函数：</p><p><code>void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)</code></p></li><li><p>定时器中断使能函数：</p><p><code>void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState);</code></p></li><li><p>状态标志位获取和清除：</p><p><code>FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);</code><br><code>void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG);</code><br><code>ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT);</code><br><code>void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT);</code></p></li><li><p>定时器中断实现步骤</p><ol><li>能定时器时钟。<pre><code>  RCC_APB1PeriphClockCmd();</code></pre></li><li>初始化定时器，配置ARR,PSC。<pre><code>TIM_TimeBaseInit();</code></pre></li><li>开启定时器中断，配置NVIC。<pre><code>void TIM_ITConfig();NVIC_Init();</code></pre></li><li>使能定时器。<pre><code>TIM_Cmd();</code></pre></li><li>编写中断服务函数。<pre><code>TIMx_IRQHandler();</code></pre></li></ol></li></ul><hr><h2 id="PWM输出"><a href="#PWM输出" class="headerlink" title="PWM输出"></a>PWM输出</h2><ul><li><p>初始化：</p><p><code>void TIM_OCxInit(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCMode;  <span class="comment">//PWM模式1或者模式2</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OutputState; <span class="comment">//输出使能 OR失能</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OutputNState;</span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Pulse; <span class="comment">//比较值，写CCRx</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCPolarity; <span class="comment">//比较输出极性</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCNPolarity; </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCIdleState;  </span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_OCNIdleState; </span><br><span class="line">&#125; TIM_OCInitTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2; <span class="comment">//PWM模式2</span></span><br><span class="line">TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable; <span class="comment">//比较输出使能</span></span><br><span class="line">TIM_OCInitStructure. TIM_Pulse=<span class="number">100</span>;</span><br><span class="line">TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High; <span class="comment">//输出极性:TIM输出比较极性高</span></span><br><span class="line">TIM_OC2Init(TIM3, &amp;TIM_OCInitStructure);  <span class="comment">//根据T指定的参数初始化外设TIM3 OC2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>设置比较值函数：</p><p><code>void TIM_SetCompareX(TIM_TypeDef* TIMx, uint16_t Compare2);</code></p></li><li><p>使能输出比较预装载：</p><p><code>void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload);</code></p></li><li><p>使能自动重装载的预装载寄存器允许位：</p><p><code>void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState);</code></p></li><li><p>PWM输出配置步骤：</p><ol><li>使能定时器3和相关IO口时钟。<pre><code>使能定时器3时钟：RCC_APB1PeriphClockCmd();使能GPIOB时钟：RCC_APB2PeriphClockCmd();</code></pre></li><li>初始化IO口为复用功能输出。函数：GPIO_Init();<pre><code>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;      </code></pre></li><li>这里我们是要把PB5用作定时器的PWM输出引脚，所以要重映射配置，<pre><code>所以需要开启AFIO时钟。同时设置重映射。 RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE); GPIO_PinRemapConfig(GPIO_PartialRemap_TIM3, ENABLE); </code></pre></li><li>初始化定时器：ARR,PSC等：TIM_TimeBaseInit();</li><li>初始化输出比较参数:TIM_OC2Init()</li><li>使能预装载寄存器： TIM_OC2PreloadConfig(TIM3, TIM_OCPreload_Enable); </li><li>使能定时器。TIM_Cmd();</li><li>不断改变比较值CCRx，达到不同的占空比效果:TIM_SetCompare2();</li></ol></li></ul><hr><h2 id="输入捕获"><a href="#输入捕获" class="headerlink" title="输入捕获"></a>输入捕获</h2><ul><li><p>初始化函数：</p><p><code>void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_Channel; <span class="comment">//捕获通道1-4   </span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICPolarity; <span class="comment">//捕获极性</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICSelection; <span class="comment">//映射关系</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICPrescaler; <span class="comment">//分频系数</span></span><br><span class="line">  <span class="keyword">uint16_t</span> TIM_ICFilter;  <span class="comment">//滤波器</span></span><br><span class="line">&#125; TIM_ICInitTypeDef;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TIM5_ICInitStructure.TIM_Channel = TIM_Channel_1; TIM5_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;</span><br><span class="line">TIM5_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI; </span><br><span class="line">TIM5_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;</span><br><span class="line">TIM5_ICInitStructure.TIM_ICFilter = <span class="number">0x00</span>;</span><br><span class="line">TIM_ICInit(TIM5, &amp;TIM5_ICInitStructure);</span><br></pre></td></tr></table></figure></li><li><p>通道极性设置独立函数：</p><p><code>void TIM_OCxPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)；</code></p></li><li><p>获取通道捕获值</p><p><code>uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)；</code></p></li></ul><ul><li><p>输入捕获的一般配置步骤：</p><ol><li>初始化定时器和通道对应IO的时钟。</li><li>初始化IO口，模式为输入：GPIO_Init();<pre><code>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD; //PA0 输入</code></pre></li><li>初始化定时器ARR，PSC<br>TIM_TimeBaseInit();</li><li>初始化输入捕获通道<br>TIM_ICInit();</li><li>如果要开启捕获中断，<pre><code>TIM_ITConfig();NVIC_Init();</code></pre></li><li>使能定时器：TIM_Cmd();</li><li>编写中断服务函数：TIMx_IRQHandler();</li></ol></li></ul><hr><h2 id="DMA"><a href="#DMA" class="headerlink" title="DMA"></a>DMA</h2><p>DMA，全称Direct Memory Access，即直接存储器访问。</p><p>DMA的出现就是为了解决批量数据的输入/输出问题。DMA是指外部设备不通过CPU而直接与系统内存交换数据的接口技术。这样数据的传送速度就取决于存储器和外设的工作速度。</p><ul><li><p>初始化函数：</p><p><code>void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct);</code></p></li><li><p>2个使能函数:</p><ul><li><code>void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState);</code>//使能DMA通道</li><li><code>void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState);</code>//使能DMA通道中断</li></ul></li><li><p>2个传输数据量函数</p><ul><li><code>void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber);</code>//设置DMA通道的传输数据量（DMA处于关闭状态）</li><li><code>uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx);</code>//获取当前DMA通道传输剩余数据量（DMA处于开启状态）</li></ul></li><li><p>DMA的一般步骤</p><ul><li>使能DMA时钟。调用函数：<code>RCC_AHBPeriphClockCmd()</code>；</li><li>初始化DMA通道参数。调用函数：<code>DMA_Init()</code>；</li><li>使能串口DMA发送，串口DMA使能函数。调用函数：<code>USART_DMACmd()</code>；</li><li>使能DMA1通道，启动传输。调用函数：<code>DMA_Cmd()</code>；</li><li>查询DMA传输状态。调用函数：<code>DMA_GetFlagStatus()</code>；</li><li>获取/设置通道当前剩余数据量。调用函数：<code>DMA_GetCurrDataCounter()</code>；<code>DMA_SetCurrDataCounter()</code>。</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/tags/stm32/"/>
    
  </entry>
  
  <entry>
    <title>stm32库函数及缩写</title>
    <link href="http://www.fanziqi.site/posts/2ed78409.html"/>
    <id>http://www.fanziqi.site/posts/2ed78409.html</id>
    <published>2020-08-01T03:06:58.000Z</published>
    <updated>2021-08-08T07:22:39.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="缩写定义"><a href="#缩写定义" class="headerlink" title="缩写定义"></a>缩写定义</h2><div class="table-container"><table><thead><tr><th style="text-align:left">缩写</th><th>外设/单元</th></tr></thead><tbody><tr><td style="text-align:left">ADC</td><td>模数转换器</td></tr><tr><td style="text-align:left">BKP</td><td>备份寄存器</td></tr><tr><td style="text-align:left">CAN</td><td>控制器局域网模块</td></tr><tr><td style="text-align:left">DMA</td><td>直接内存存取控制器</td></tr><tr><td style="text-align:left">EXTI</td><td>外部中断事件控制器</td></tr><tr><td style="text-align:left">FLASH</td><td>闪存存储器</td></tr><tr><td style="text-align:left">GPIO</td><td>通用输入输出</td></tr><tr><td style="text-align:left">I2C</td><td>内部集成电路</td></tr><tr><td style="text-align:left">IWDG</td><td>独立看门狗</td></tr><tr><td style="text-align:left">NVIC</td><td>嵌套中断向量列表控制器</td></tr><tr><td style="text-align:left">PWR</td><td>电源/功耗控制</td></tr><tr><td style="text-align:left">RCC</td><td>复位与时钟控制器</td></tr><tr><td style="text-align:left">RTC</td><td>实时时钟</td></tr><tr><td style="text-align:left">SPI</td><td>串行外设接口</td></tr><tr><td style="text-align:left">SysTick</td><td>系统嘀嗒定时器</td></tr><tr><td style="text-align:left">TIM</td><td>通用定时器</td></tr><tr><td style="text-align:left">TIM1</td><td>高级控制定时器</td></tr><tr><td style="text-align:left">USART</td><td>通用同步异步接收发射端</td></tr><tr><td style="text-align:left">WWDG</td><td>窗口看门狗</td></tr></tbody></table></div><h2 id="固态函数库命名规则"><a href="#固态函数库命名规则" class="headerlink" title="固态函数库命名规则"></a>固态函数库命名规则</h2><p>PPP 表示任一外设缩写，例如：ADC。</p><p>系统、源程序文件和头文件命名都以<strong>“stm32f10x_”</strong>作为开头，例如：<strong>stm32f10x_conf.h</strong>。</p><p>常量仅被应用于一个文件的，定义于该文件中；被应用于多个文件的，在对应头文件中定义。所有常量都由英文字母大写书写。</p><p>寄存器作为常量处理。他们的命名都由英文字母大写书写。在大多数情况下，他们采用与缩写规范与本用户手册一致。</p><p>外设函数的命名以该外设的缩写加下划线为开头。每个单词的第一个字母都由英文字母大写书写，例如：<strong>SPI_SendData**</strong>。** 在函数名中，只允许存在一个下划线，用以分隔外设缩写和函数名的其它部分。</p><p>名为 <strong>PPP_Init</strong> 的函数，其功能是根据 <strong>PPP_InitTypeDef</strong> 中指定的参数，初始化外设 PPP，例如 <strong>TIM_Init</strong>. 文档和库规范</p><p>名为 <strong>PPP_DeInit</strong> 的函数，其功能为复位外设 PPP 的所有寄存器至缺省值，例如 <strong>TIM_DeInit</strong>. </p><p>名为 <strong>PPP_StructInit</strong> 的函数，其功能为通过设置 <strong>PPP_InitTypeDef</strong> 结构中的各种参数来定义外设的功能，例如：<strong>USART_StructInit</strong></p><p>名为 <strong>PPP_Cmd</strong> 的函数，其功能为使能或者失能外设 PPP，例如： <strong>SPI_Cmd</strong>. </p><p>名为 <strong>PPP_ITConfig</strong> 的函数，其功能为使能或者失能来自外设 PPP 某中断源，例如： <strong>RCC_ITConfig</strong>. </p><p>名为 <strong>PPP_DMAConfig</strong> 的函数，其功能为使能或者失能外设 PPP 的 DMA 接口，例如：<strong>TIM1_DMAConfig</strong>. </p><p>用以配置外设功能的函数，总是以字符串“Config”结尾，例如 <strong>GPIO_PinRemapConfig</strong>. </p><p>名为 <strong>PPP_GetFlagStatus</strong> 的函数，其功能为检查外设 PPP 某标志位被设置与否，例如：<strong>I2C_GetFlagStatus</strong>. </p><p>名为 <strong>PPP_ClearFlag</strong> 的函数，其功能为清除外设 PPP 标志位，例如：<strong>I2C_ClearFlag</strong>. </p><p>名为 <strong>PPP_GetITStatus</strong> 的函数，其功能为判断来自外设 PPP 的中断发生与否，例如：<strong>I2C_GetITStatus</strong>. </p><p>名 为 <strong>PPP_ClearITPendingBit</strong> 的函数，其功能为清除外设 PPP 中断待处理标志位，例如：<strong>I2C_ClearITPendingBit</strong>. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/categories/stm32/"/>
    
    
    <category term="stm32" scheme="http://www.fanziqi.site/tags/stm32/"/>
    
  </entry>
  
</feed>
